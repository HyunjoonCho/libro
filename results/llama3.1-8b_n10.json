{
    "Lang_12": {
        "Lang_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:326)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, emptyChars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, emptyChars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:324: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]         RandomStringUtils.random(0, 0, 0, false, false, \"abc\", new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:331: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]         RandomStringUtils.random(0, 0, 0, false, false, \"abc\", new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:324: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]         RandomStringUtils.random(0, 0, 0, false, false, \"abc\", new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:331: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]         RandomStringUtils.random(0, 0, 0, false, false, \"abc\", new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:326: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, chars, random);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:326: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, chars, random);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:326: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, chars, random);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:326: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, chars, random);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:326: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(1, 0, 0, false, false, chars, random);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:326: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(1, 0, 0, false, false, chars, random);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsFailureAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsFailureAutoGen(RandomStringUtilsTest.java:326)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_4": {
        "Lang_4_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2322: error: incompatible types: CharBuffer cannot be converted to String\n    [javac]     assertEquals(StringEscapeUtils.escapeHtml4(cs1), StringEscapeUtils.escapeHtml4(cs2));\n    [javac]                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2322: error: incompatible types: CharBuffer cannot be converted to String\n    [javac]     assertEquals(StringEscapeUtils.escapeHtml4(cs1), StringEscapeUtils.escapeHtml4(cs2));\n    [javac]                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:567: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:567: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2322)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java:50: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator lt = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java:50: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator lt = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2353: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2353: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: incompatible types: CharSequenceTranslator cannot be converted to LookupTranslator\n    [javac]     LookupTranslator translator = StringEscapeUtils.ESCAPE_HTML4;\n    [javac]                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorAutoGen(StringUtilsTest.java:2322)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_8": {
        "Lang_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[h:mma z]> but was:<[9:20AM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[h:mma z]> but was:<[9:21AM CDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatZPatternAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatZPatternAutoGen\njunit.framework.AssertionFailedError: expected:<[10]:20AM PDT> but was:<[7]:20AM PDT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatZPatternAutoGen(FastDateParserTest.java:530)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatZPatternAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatZPatternAutoGen\njunit.framework.AssertionFailedError: expected:<[10:21AM E]DT> but was:<[7:21AM P]DT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatZPatternAutoGen(FastDateParserTest.java:530)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njava.lang.StringIndexOutOfBoundsException: begin -1, end 10, length 10\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:528)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njava.lang.StringIndexOutOfBoundsException: begin -1, end 10, length 10\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:528)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<1[2:00 PM EST E]DT> but was:<1[0:20AM P]DT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:530)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<1[2:00 PM EST] EDT> but was:<1[0:22AM] EDT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:530)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_8/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_8/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:528: error: cannot find symbol\n    [javac]     fdf.setTimeZone(TimeZone.getTimeZone(\"US/Eastern\"));\n    [javac]        ^\n    [javac]   symbol:   method setTimeZone(TimeZone)\n    [javac]   location: variable fdf of type FastDateFormat\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_8/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_8/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:528: error: cannot find symbol\n    [javac]     fdf.setTimeZone(TimeZone.getTimeZone(\"US/Eastern\"));\n    [javac]        ^\n    [javac]   symbol:   method setTimeZone(TimeZone)\n    [javac]   location: variable fdf of type FastDateFormat\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[US/Eastern]> but was:<[10:20AM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:529)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[US/Eastern]> but was:<[10:22AM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:529)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[01:46:40 US/Central]> but was:<[9:46PM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:268)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[01:46:40 US/Central]> but was:<[9:46PM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:268)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ PM E]ST> but was:<12:00[PM P]ST>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneAutoGen(DateUtilsTest.java:1707)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ ]PM EST> but was:<12:00[]PM EST>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneAutoGen(DateUtilsTest.java:1707)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00PM US/Central]> but was:<[7:21AM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:275)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00PM US/Central]> but was:<[7:23AM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:275)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_8/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_8/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:527: error: cannot find symbol\n    [javac]     fdf.setTimeZone(TimeZone.getTimeZone(\"US/Eastern\"));\n    [javac]        ^\n    [javac]   symbol:   method setTimeZone(TimeZone)\n    [javac]   location: variable fdf of type FastDateFormat\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_8/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_8/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:527: error: cannot find symbol\n    [javac]     fdf.setTimeZone(TimeZone.getTimeZone(\"US/Eastern\"));\n    [javac]        ^\n    [javac]   symbol:   method setTimeZone(TimeZone)\n    [javac]   location: variable fdf of type FastDateFormat\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_15": {
        "Time_15_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1523)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testIssue147AutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testIssue147AutoGen(TestPeriod_Basics.java:1523)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException for overflow\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testFieldUtilsSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testFieldUtilsSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testFieldUtilsSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1523)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1523)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testFieldUtilsSafeMultiplyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testFieldUtilsSafeMultiplyAutoGen\njunit.framework.AssertionFailedError: expected:<-9223372036854775807> but was:<-9223372036854775808>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testFieldUtilsSafeMultiplyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testFieldUtilsSafeMultiplyAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testFieldUtilsSafeMultiplyAutoGen(TestPeriod_Basics.java:1523)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1523)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_6": {
        "Time_6_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2), is(equalTo(expectedEnd)));\n    [javac]                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2)), is(equalTo(expectedEnd)));\n    [javac]                                                 ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2), is(equalTo(expectedEnd)));\n    [javac]                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2)), is(equalTo(expectedEnd)));\n    [javac]                                                 ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(1), is(equalTo(expectedEnd)));\n    [javac]                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-1)), is(equalTo(expectedEnd)));\n    [javac]                                                 ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(1), is(equalTo(expectedEnd)));\n    [javac]                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-1)), is(equalTo(expectedEnd)));\n    [javac]                                                 ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2), is(equalTo(expectedEnd)));\n    [javac]                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2)), is(equalTo(expectedEnd)));\n    [javac]                                                 ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2), is(equalTo(expectedEnd)));\n    [javac]                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2)), is(equalTo(expectedEnd)));\n    [javac]                                                 ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyMinusYearsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyMinusYearsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testGJChronologyMinusYearsAutoGen(TestDateTimeFormatter.java:1033)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_6_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2014), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2014)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2014), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2014)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:841: error: cannot find symbol\n    [javac]     assertThat(startWithZeroYear, is(equalTo(expectedEndWithZeroYear)));\n    [javac]                                      ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:841: error: cannot find symbol\n    [javac]     assertThat(startWithZeroYear, is(equalTo(expectedEndWithZeroYear)));\n    [javac]                                      ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_15": {
        "Lang_15_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Class<?>[]\n    [javac]     Class<?>[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Class<?>[]\n    [javac]     Class<?>[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: diamond operator is not supported in -source 6\n    [javac]     Other other = new Other<>();\n    [javac]                             ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: diamond operator is not supported in -source 6\n    [javac]     Other other = new Other<>();\n    [javac]                             ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns[0].getTypeArguments()[0]);\n    [javac]                                                 ^\n    [javac]   symbol:   method getTypeArguments()\n    [javac]   location: interface Type\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(Object.class, typeVarAssigns[1].getTypeArguments()[0]);\n    [javac]                                                 ^\n    [javac]   symbol:   method getTypeArguments()\n    [javac]   location: interface Type\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns[0].getTypeArguments()[0]);\n    [javac]                                                 ^\n    [javac]   symbol:   method getTypeArguments()\n    [javac]   location: interface Type\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(Object.class, typeVarAssigns[1].getTypeArguments()[0]);\n    [javac]                                                 ^\n    [javac]   symbol:   method getTypeArguments()\n    [javac]   location: interface Type\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     Type[] typeArguments = TypeUtils.getTypeArguments(Other.class, type);\n    [javac]                                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     Type[] typeArguments = TypeUtils.getTypeArguments(Other.class, type);\n    [javac]                                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: cannot find symbol\n    [javac]     Type type = Type.getGenericReturnType(This.class);\n    [javac]                     ^\n    [javac]   symbol:   method getGenericReturnType(Class<This>)\n    [javac]   location: interface Type\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     Type[] typeArgs = TypeUtils.getTypeArguments(Other.class, type);\n    [javac]                                                               ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: cannot find symbol\n    [javac]     Type type = Type.getGenericReturnType(This.class);\n    [javac]                     ^\n    [javac]   symbol:   method getGenericReturnType(Class<This>)\n    [javac]   location: interface Type\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     Type[] typeArgs = TypeUtils.getTypeArguments(Other.class, type);\n    [javac]                                                               ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: cannot find symbol\n    [javac]     Type type = new TypeToken<Other<String>>() {}.getType();\n    [javac]                     ^\n    [javac]   symbol:   class TypeToken\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     Map<Type, Type> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, type);\n    [javac]                                                                              ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: cannot find symbol\n    [javac]     Type type = new TypeToken<Other<String>>() {}.getType();\n    [javac]                     ^\n    [javac]   symbol:   class TypeToken\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     Map<Type, Type> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, type);\n    [javac]                                                                              ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Class<?>\n    [javac]     Class<?> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: cannot find symbol\n    [javac]     assertEquals(2, typeVarAssigns.size());\n    [javac]                                   ^\n    [javac]   symbol:   method size()\n    [javac]   location: variable typeVarAssigns of type Class<?>\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                              ^\n    [javac]   symbol:   method get(TypeVariable<Class<This>>)\n    [javac]   location: variable typeVarAssigns of type Class<?>\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(Object.class, typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                              ^\n    [javac]   symbol:   method get(TypeVariable<Class<This>>)\n    [javac]   location: variable typeVarAssigns of type Class<?>\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Class<?>\n    [javac]     Class<?> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: cannot find symbol\n    [javac]     assertEquals(2, typeVarAssigns.size());\n    [javac]                                   ^\n    [javac]   symbol:   method size()\n    [javac]   location: variable typeVarAssigns of type Class<?>\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                              ^\n    [javac]   symbol:   method get(TypeVariable<Class<This>>)\n    [javac]   location: variable typeVarAssigns of type Class<?>\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(Object.class, typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                              ^\n    [javac]   symbol:   method get(TypeVariable<Class<This>>)\n    [javac]   location: variable typeVarAssigns of type Class<?>\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsMissesTypeArgumentsForPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsMissesTypeArgumentsForPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsMissesTypeArgumentsForPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsMissesTypeArgumentsForPartiallyAssignedClassesAutoGen\njava.lang.ClassCastException: class java.util.HashMap cannot be cast to class java.lang.reflect.ParameterizedType (java.util.HashMap and java.lang.reflect.ParameterizedType are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArgumentsMissesTypeArgumentsForPartiallyAssignedClassesAutoGen(TypeUtilsTest.java:675)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_15_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<Class<?>,Class<?>>\n    [javac]     Map<Class<?>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(otherClass, thisClass);\n    [javac]                                                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<Class<?>,Class<?>>\n    [javac]     Map<Class<?>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(otherClass, thisClass);\n    [javac]                                                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_9": {
        "Chart_9_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:850: error: cannot find symbol\n    [javac]         assertEquals(0, copy.getSeriesData().size());\n    [javac]                             ^\n    [javac]   symbol:   method getSeriesData()\n    [javac]   location: variable copy of type TimeSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:850: error: cannot find symbol\n    [javac]         assertEquals(0, copy.getSeriesData().size());\n    [javac]                             ^\n    [javac]   symbol:   method getSeriesData()\n    [javac]   location: variable copy of type TimeSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries copy = series.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries copy = series.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries copy = series.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries copy = series.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries bar = foo.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries bar = foo.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries copiedSeries = originalSeries.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries copiedSeries = originalSeries.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyAutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyAutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries copy = series.createCopy(new Day(1, 1, 2006), new Day(18, 1, 2006));\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries copy = series.createCopy(new Day(1, 1, 2006), new Day(18, 1, 2006));\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njunit.framework.AssertionFailedError: Expected CloneNotSupportedException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_7": {
        "Time_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEWYORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_startOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEWYORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_startOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_7/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:958: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     MutableDateTime result = new MutableDateTime(2000, 1, 1, 0, 0, 0, 0, new org.joda.time.DateTimeZone(\"America/New_York\"));\n    [javac]                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:960: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     assertEquals(new MutableDateTime(2000, 2, 29, 0, 0, 0, 0, new org.joda.time.DateTimeZone(\"America/New_York\")), result);\n    [javac]                                                               ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_7/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:958: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     MutableDateTime result = new MutableDateTime(2000, 1, 1, 0, 0, 0, 0, new org.joda.time.DateTimeZone(\"America/New_York\"));\n    [javac]                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:960: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     assertEquals(new MutableDateTime(2000, 2, 29, 0, 0, 0, 0, new org.joda.time.DateTimeZone(\"America/New_York\")), result);\n    [javac]                                                               ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:614)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:614)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEWYORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseIntoMonthDayFeb29StartOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEWYORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseIntoMonthDayFeb29StartOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEWYORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_startOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEWYORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_startOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEW_YORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_startOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'NEW_YORK' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_startOfYearAutoGen(TestDateTimeFormatter.java:958)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_5": {
        "Chart_5_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:475: error: no suitable method found for addOrUpdate(int,int,boolean)\n    [javac]     series.addOrUpdate(1, 2, true);\n    [javac]           ^\n    [javac]     method XYSeries.addOrUpdate(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method XYSeries.addOrUpdate(Number,Number) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:475: error: no suitable method found for addOrUpdate(int,int,boolean)\n    [javac]     series.addOrUpdate(1, 2, true);\n    [javac]           ^\n    [javac]     method XYSeries.addOrUpdate(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method XYSeries.addOrUpdate(Number,Number) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:842: error: cannot find symbol\n    [javac]     assertEquals(3, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:846: error: no suitable constructor found for XYSeries(String,boolean,boolean,boolean)\n    [javac]     XYSeries series = new XYSeries(\"Test\", true, true, true);\n    [javac]                       ^\n    [javac]     constructor XYSeries.XYSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor XYSeries.XYSeries(Comparable,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor XYSeries.XYSeries(Comparable,boolean,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: cannot find symbol\n    [javac]     assertEquals(2, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:842: error: cannot find symbol\n    [javac]     assertEquals(3, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:846: error: no suitable constructor found for XYSeries(String,boolean,boolean,boolean)\n    [javac]     XYSeries series = new XYSeries(\"Test\", true, true, true);\n    [javac]                       ^\n    [javac]     constructor XYSeries.XYSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor XYSeries.XYSeries(Comparable,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor XYSeries.XYSeries(Comparable,boolean,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:849: error: cannot find symbol\n    [javac]     assertEquals(2, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<3> but was:<2.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().size());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(0).getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:484: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().size());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:485: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(0).getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().size());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(0).getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:484: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().size());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:485: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(0).getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:842: error: cannot find symbol\n    [javac]     assertEquals(3, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:850: error: cannot find symbol\n    [javac]     assertEquals(2, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:842: error: cannot find symbol\n    [javac]     assertEquals(3, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:850: error: cannot find symbol\n    [javac]     assertEquals(2, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:842: error: cannot find symbol\n    [javac]     assertEquals(2, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/time/junit/TimeSeriesTests.java:842: error: cannot find symbol\n    [javac]     assertEquals(2, series.getDataItem(0).getValue());\n    [javac]                                          ^\n    [javac]   symbol:   method getValue()\n    [javac]   location: class XYDataItem\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:485: error: cannot find symbol\n    [javac]     series.setAllowDuplicateXValues(false);\n    [javac]           ^\n    [javac]   symbol:   method setAllowDuplicateXValues(boolean)\n    [javac]   location: variable series of type XYSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:485: error: cannot find symbol\n    [javac]     series.setAllowDuplicateXValues(false);\n    [javac]           ^\n    [javac]   symbol:   method setAllowDuplicateXValues(boolean)\n    [javac]   location: variable series of type XYSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<2.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     series.setAllowDuplicateXValues(true);\n    [javac]           ^\n    [javac]   symbol:   method setAllowDuplicateXValues(boolean)\n    [javac]   location: variable series of type XYSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     series.setAllowDuplicateXValues(true);\n    [javac]           ^\n    [javac]   symbol:   method setAllowDuplicateXValues(boolean)\n    [javac]   location: variable series of type XYSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<1.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_9": {
        "Lang_9_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d3\", \"'d'd'\");\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d3\", \"'d'd'\");\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d'd'd\", \"d3\");\n    [javac]                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d'd'd\", \"d3\");\n    [javac]                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         fdp.parse(\"d3\", \"d'd\");\n    [javac]                         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         fdp.parse(\"d3\", \"d'd\");\n    [javac]                         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         fdp.parse(\"d3\", \"d'd\");\n    [javac]                         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         fdp.parse(\"d3\", \"d'd\");\n    [javac]                         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1696: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormatter\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1696: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]                             ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class DateUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1696: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormatter\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1696: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]                             ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class DateUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d3\", \"'d'd\");\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d3\", \"'d'd\");\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java:1145: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormatter\n    [javac]   location: class FieldUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java:1145: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]                             ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class FieldUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java:1145: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormatter\n    [javac]   location: class FieldUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java:1145: error: cannot find symbol\n    [javac]     DateTimeFormatter dtf = DateTimeFormat.forPattern(\"'d'd'\");\n    [javac]                             ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class FieldUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(format, date);\n    [javac]                                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(format, date);\n    [javac]                                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d'd'd\", \"d3\");\n    [javac]                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d'd'd\", \"d3\");\n    [javac]                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d3\", \"'d'd\");\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(\"d3\", \"'d'd\");\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_39": {
        "Lang_39_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1764)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 3\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 3\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException, but no exception was thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_27": {
        "Lang_27_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberHandlesBothExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberHandlesBothExponentIndicatorsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionWithExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionWithExponentIndicatorsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberStringIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberStringIndexOutOfBoundsExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberStringIndexOutOfBoundsExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithBothExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithBothExponentIndicatorsAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithBothExponentIndicatorsAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsExponentIndicatorsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionWithBothExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionWithBothExponentIndicatorsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_13": {
        "Time_13_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-0.1]S> but was:<PT[0.100]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-0.1]S> but was:<PT[0.100]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-0.1]S> but was:<PT[0.100]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT-0.1[]S> but was:<PT-0.1[00]S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_34": {
        "Lang_34_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:492: error: unreported exception InterruptedException; must be caught or declared to be thrown\n    [javac]     thread.join();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:492: error: unreported exception InterruptedException; must be caught or declared to be thrown\n    [javac]     thread.join();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:326: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.JSON_STYLE;\n    [javac]                                        ^\n    [javac]   symbol:   variable JSON_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:329: error: loadClass(String) in <anonymous org.apache.commons.lang3.reflect.MethodUtilsTest$1> cannot override loadClass(String) in ClassLoader\n    [javac]         protected Class<?> loadClass(String name) throws ClassNotFoundException {\n    [javac]                            ^\n    [javac]   attempting to assign weaker access privileges; was public\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:337: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         new ToStringStyle();\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:341: error: cannot find symbol\n    [javac]     assertNotNull(ToStringStyle.JSON_STYLE);\n    [javac]                                ^\n    [javac]   symbol:   variable JSON_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:344: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         new ToStringStyle();\n    [javac]         ^\n    [javac] 5 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:326: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.JSON_STYLE;\n    [javac]                                        ^\n    [javac]   symbol:   variable JSON_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:329: error: loadClass(String) in <anonymous org.apache.commons.lang3.reflect.MethodUtilsTest$1> cannot override loadClass(String) in ClassLoader\n    [javac]         protected Class<?> loadClass(String name) throws ClassNotFoundException {\n    [javac]                            ^\n    [javac]   attempting to assign weaker access privileges; was public\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:337: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         new ToStringStyle();\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:341: error: cannot find symbol\n    [javac]     assertNotNull(ToStringStyle.JSON_STYLE);\n    [javac]                                ^\n    [javac]   symbol:   variable JSON_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java:344: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         new ToStringStyle();\n    [javac]         ^\n    [javac] 5 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:487: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         new ToStringStyle();\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:490: error: cannot find symbol\n    [javac]         assertTrue(\"ToStringStyle instance should be garbage collected\", ToStringStyle.threadLocal.get() == null);\n    [javac]                                                                                       ^\n    [javac]   symbol:   variable threadLocal\n    [javac]   location: class ToStringStyle\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:487: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         new ToStringStyle();\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:490: error: cannot find symbol\n    [javac]         assertTrue(\"ToStringStyle instance should be garbage collected\", ToStringStyle.threadLocal.get() == null);\n    [javac]                                                                                       ^\n    [javac]   symbol:   variable threadLocal\n    [javac]   location: class ToStringStyle\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> style = new ThreadLocal<>();\n    [javac]                                                        ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> style = new ThreadLocal<>();\n    [javac]                                                        ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:486: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:486: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:484: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:484: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java:111: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java:111: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:484: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:484: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_12": {
        "Chart_12_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:786: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class CategoryPlotTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:786: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class CategoryPlotTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:175: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: cannot find symbol\n    [javac]     Dataset dataset = plot.getDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class PieChart3DTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:175: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: cannot find symbol\n    [javac]     Dataset dataset = plot.getDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class PieChart3DTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1043: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultPieDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1043: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultPieDataset();\n    [javac]                           ^\n    [javac]   symbol:   class DefaultPieDataset\n    [javac]   location: class XYPlotTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1043: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultPieDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1043: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultPieDataset();\n    [javac]                           ^\n    [javac]   symbol:   class DefaultPieDataset\n    [javac]   location: class XYPlotTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultPieDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class PieChart3DTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:178: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getChangeListener());\n    [javac]                                 ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultPieDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class PieChart3DTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:178: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getChangeListener());\n    [javac]                                 ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:148: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getChangeListener());\n    [javac]                                 ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:148: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getChangeListener());\n    [javac]                                 ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:177: error: cannot find symbol\n    [javac]     assertEquals(0, plot.getDataset().getNotifyInterval());\n    [javac]                                      ^\n    [javac]   symbol:   method getNotifyInterval()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:177: error: cannot find symbol\n    [javac]     assertEquals(0, plot.getDataset().getNotifyInterval());\n    [javac]                                      ^\n    [javac]   symbol:   method getNotifyInterval()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:591: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:593: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getChangeListener() instanceof DefaultCategoryDataset.DefaultChangeListener);\n    [javac]                                  ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:593: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getChangeListener() instanceof DefaultCategoryDataset.DefaultChangeListener);\n    [javac]                                                                                        ^\n    [javac]   symbol:   class DefaultChangeListener\n    [javac]   location: class DefaultCategoryDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:591: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:593: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getChangeListener() instanceof DefaultCategoryDataset.DefaultChangeListener);\n    [javac]                                  ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:593: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getChangeListener() instanceof DefaultCategoryDataset.DefaultChangeListener);\n    [javac]                                                                                        ^\n    [javac]   symbol:   class DefaultChangeListener\n    [javac]   location: class DefaultCategoryDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:242: error: incompatible types: DefaultCategoryDataset cannot be converted to XYDataset\n    [javac]     XYDataset dataset = new DefaultCategoryDataset();\n    [javac]                         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:243: error: incompatible types: XYDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:244: error: cannot find symbol\n    [javac]     assertFalse(dataset.getNotify() instanceof DefaultCategoryDataset.DatasetChangeListener);\n    [javac]                        ^\n    [javac]   symbol:   method getNotify()\n    [javac]   location: variable dataset of type XYDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:244: error: cannot find symbol\n    [javac]     assertFalse(dataset.getNotify() instanceof DefaultCategoryDataset.DatasetChangeListener);\n    [javac]                                                                      ^\n    [javac]   symbol:   class DatasetChangeListener\n    [javac]   location: class DefaultCategoryDataset\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:242: error: incompatible types: DefaultCategoryDataset cannot be converted to XYDataset\n    [javac]     XYDataset dataset = new DefaultCategoryDataset();\n    [javac]                         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:243: error: incompatible types: XYDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:244: error: cannot find symbol\n    [javac]     assertFalse(dataset.getNotify() instanceof DefaultCategoryDataset.DatasetChangeListener);\n    [javac]                        ^\n    [javac]   symbol:   method getNotify()\n    [javac]   location: variable dataset of type XYDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java:244: error: cannot find symbol\n    [javac]     assertFalse(dataset.getNotify() instanceof DefaultCategoryDataset.DatasetChangeListener);\n    [javac]                                                                      ^\n    [javac]   symbol:   class DatasetChangeListener\n    [javac]   location: class DefaultCategoryDataset\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_14": {
        "Time_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n4.txt": "[error] TypeError(\"'in <string>' requires string as left operand, not NoneType\")",
        "Time_14_n6.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 36: fail(\"Expected IllegalFieldValueExceptio')",
        "Time_14_n10.txt": "[error] StopIteration()",
        "Time_14_n8.txt": "[error] TypeError(\"'in <string>' requires string as left operand, not NoneType\")",
        "Time_14_n7.txt": "[error] JavaSyntaxError('')",
        "Time_14_n9.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 36: fail(')",
        "Time_14_n5.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 40: fail(')",
        "Time_14_n2.txt": "[error] JavaSyntaxError('')",
        "Time_14_n3.txt": "[error] TypeError(\"'in <string>' requires string as left operand, not NoneType\")"
    },
    "Time_12": {
        "Time_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testCalendarEraInLocalDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testCalendarEraInLocalDateAutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testCalendarEraInLocalDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testCalendarEraInLocalDateAutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Constructors::testCalendarEraInLocalDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Constructors::testCalendarEraInLocalDateAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Constructors::testCalendarEraInLocalDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Constructors::testCalendarEraInLocalDateAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_21": {
        "Lang_21_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testIssueAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testIssueAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_19": {
        "Time_19_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalTime_Constructors.java:767: error: cannot find symbol\n    [javac]     assertEquals(1, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalTime_Constructors.java:768: error: cannot find symbol\n    [javac]     assertEquals(2, norwDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                             ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable norwDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalTime_Constructors.java:769: error: cannot find symbol\n    [javac]     assertEquals(3, finnishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable finnishDate of type DateTime\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalTime_Constructors.java:767: error: cannot find symbol\n    [javac]     assertEquals(1, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalTime_Constructors.java:768: error: cannot find symbol\n    [javac]     assertEquals(2, norwDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                             ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable norwDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalTime_Constructors.java:769: error: cannot find symbol\n    [javac]     assertEquals(3, finnishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable finnishDate of type DateTime\n    [javac] 3 errors"
            },
            "success": false
        },
        "Time_19_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testIssue124AutoGen\njunit.framework.AssertionFailedError: expected:<2011-10-30T01:59:00.000Z> but was:<2011-10-30T01:59:00.000Z>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testIssue124AutoGen\njunit.framework.AssertionFailedError: expected:<2011-10-30T00:59:00.000Z> but was:<2011-10-30T01:59:00.000+01:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n4.txt": "[error] TypeError(\"'in <string>' requires string as left operand, not NoneType\")",
        "Time_19_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n2.txt": "[error] JavaSyntaxError('')",
        "Time_19_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n1.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 16: assertEquals(\"2011-10-30T03:59:00.000+03:0')",
        "Time_19_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_26": {
        "Lang_26_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(1, fdf.parse(\"fredag, week 01\").get(Calendar.WEEK_OF_YEAR));\n    [javac]                           ^\n    [javac]   symbol:   method parse(String)\n    [javac]   location: variable fdf of type FastDateFormat\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(1, fdf.parse(\"fredag, week 01\").get(Calendar.WEEK_OF_YEAR));\n    [javac]                           ^\n    [javac]   symbol:   method parse(String)\n    [javac]   location: variable fdf of type FastDateFormat\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:338: error: cannot find symbol\n    [javac]     assertNotEquals(\"fredag, week 53\", fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:338: error: cannot find symbol\n    [javac]     assertNotEquals(\"fredag, week 53\", fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_11": {
        "Chart_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:43: error: package org.eclipse.swt.graphics does not exist\n    [javac] import org.eclipse.swt.graphics.Path;\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:217: error: cannot find symbol\n    [javac]     path3.setWindingRule(Path.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path\n    [javac]   location: class MatrixSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:43: error: package org.eclipse.swt.graphics does not exist\n    [javac] import org.eclipse.swt.graphics.Path;\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:217: error: cannot find symbol\n    [javac]     path3.setWindingRule(Path.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path\n    [javac]   location: class MatrixSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:477: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:478: error: windingRule is not public in Path2D; cannot be accessed from outside package\n    [javac]     path1.windingRule = GeneralPath.WIND_EVEN_ODD;\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:481: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:482: error: windingRule is not public in Path2D; cannot be accessed from outside package\n    [javac]     path2.windingRule = GeneralPath.WIND_EVEN_ODD;\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:487: error: cannot find symbol\n    [javac]     assertNotEquals(path1, path2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(GeneralPath,GeneralPath)\n    [javac]   location: class StatisticsTests\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:477: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:478: error: windingRule is not public in Path2D; cannot be accessed from outside package\n    [javac]     path1.windingRule = GeneralPath.WIND_EVEN_ODD;\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:481: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:482: error: windingRule is not public in Path2D; cannot be accessed from outside package\n    [javac]     path2.windingRule = GeneralPath.WIND_EVEN_ODD;\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:487: error: cannot find symbol\n    [javac]     assertNotEquals(path1, path2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(GeneralPath,GeneralPath)\n    [javac]   location: class StatisticsTests\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:221: error: cannot find symbol\n    [javac]     path3.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class MatrixSeriesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:223: error: cannot find symbol\n    [javac]     assertNotEquals(path1, path3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(GeneralPath,GeneralPath)\n    [javac]   location: class MatrixSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:221: error: cannot find symbol\n    [javac]     path3.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class MatrixSeriesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:223: error: cannot find symbol\n    [javac]     assertNotEquals(path1, path3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(GeneralPath,GeneralPath)\n    [javac]   location: class MatrixSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testIssue868AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testIssue868AutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testIssue868AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testIssue868AutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:479: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:481: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:479: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:481: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n1.txt": "[error] JavaSyntaxError('')",
        "Chart_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java:330: error: cannot find symbol\n    [javac]     path3.setWindingRule(WindingRule.EVEN_ODD_RULE);\n    [javac]                          ^\n    [javac]   symbol:   variable WindingRule\n    [javac]   location: class YIntervalSeriesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java:330: error: cannot find symbol\n    [javac]     path3.setWindingRule(WindingRule.EVEN_ODD_RULE);\n    [javac]                          ^\n    [javac]   symbol:   variable WindingRule\n    [javac]   location: class YIntervalSeriesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_37": {
        "Lang_37_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsTest.java:2564)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_22": {
        "Lang_22_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(numerator, denominator);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(1, f.greatestCommonDivisor(numerator, denominator));\n    [javac]                      ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(numerator, denominator);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(1, f.greatestCommonDivisor(numerator, denominator));\n    [javac]                      ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     int gcd = f.getGreatestCommonDivisor(Integer.MIN_VALUE, 2);\n    [javac]                ^\n    [javac]   symbol:   method getGreatestCommonDivisor(int,int)\n    [javac]   location: variable f of type Fraction\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     int gcd = f.getGreatestCommonDivisor(Integer.MIN_VALUE, 2);\n    [javac]                ^\n    [javac]   symbol:   method getGreatestCommonDivisor(int,int)\n    [javac]   location: variable f of type Fraction\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(1, f.getGreatestCommonDivisor());\n    [javac]                      ^\n    [javac]   symbol:   method getGreatestCommonDivisor()\n    [javac]   location: variable f of type Fraction\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(1, f.getGreatestCommonDivisor());\n    [javac]                      ^\n    [javac]   symbol:   method getGreatestCommonDivisor()\n    [javac]   location: variable f of type Fraction\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGCDAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGCDAutoGen\njava.lang.ArithmeticException: overflow: can't negate\n\tat org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:153)\n\tat org.apache.commons.lang3.math.FractionTest.testGCDAutoGen(FractionTest.java:1339)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGCDAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGCDAutoGen\njava.lang.ArithmeticException: overflow: can't negate\n\tat org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:153)\n\tat org.apache.commons.lang3.math.FractionTest.testGCDAutoGen(FractionTest.java:1339)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGCDIntegerMinValuePowerOfTwoAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGCDIntegerMinValuePowerOfTwoAutoGen\njunit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: cannot find symbol\n    [javac]     assertEquals(2, Fraction.gcd(Integer.MIN_VALUE, 1 << 31));\n    [javac]                             ^\n    [javac]   symbol:   method gcd(int,int)\n    [javac]   location: class Fraction\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: cannot find symbol\n    [javac]     assertEquals(2, Fraction.gcd(Integer.MIN_VALUE, 1 << 31));\n    [javac]                             ^\n    [javac]   symbol:   method gcd(int,int)\n    [javac]   location: class Fraction\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: method getReducedFraction in class Fraction cannot be applied to given types;\n    [javac]     assertEquals(0, f.getReducedFraction().getNumerator());\n    [javac]                      ^\n    [javac]   required: int,int\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: method getReducedFraction in class Fraction cannot be applied to given types;\n    [javac]     assertEquals(1, f.getReducedFraction().getDenominator());\n    [javac]                      ^\n    [javac]   required: int,int\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: method getReducedFraction in class Fraction cannot be applied to given types;\n    [javac]     assertEquals(0, f.getReducedFraction().getNumerator());\n    [javac]                      ^\n    [javac]   required: int,int\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: method getReducedFraction in class Fraction cannot be applied to given types;\n    [javac]     assertEquals(1, f.getReducedFraction().getDenominator());\n    [javac]                      ^\n    [javac]   required: int,int\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1347: error: cannot find symbol\n    [javac]     assertEquals(expected / (1 << i), f.getNumerator());\n    [javac]                                   ^\n    [javac]   symbol:   variable i\n    [javac]   location: class FractionTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1347: error: cannot find symbol\n    [javac]     assertEquals(expected / (1 << i), f.getNumerator());\n    [javac]                                   ^\n    [javac]   symbol:   variable i\n    [javac]   location: class FractionTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_10": {
        "Lang_10_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:465: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:465: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:460: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser fdp = new FastDateParser(\"yyyy - MM - dd\");\n    [javac]                              ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:461: error: cannot find symbol\n    [javac]         fdp.setLenient(false);\n    [javac]            ^\n    [javac]   symbol:   method setLenient(boolean)\n    [javac]   location: variable fdp of type FastDateParser\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:462: error: incompatible types: Date cannot be converted to String\n    [javac]         fdp.parse(date);\n    [javac]                   ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:460: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser fdp = new FastDateParser(\"yyyy - MM - dd\");\n    [javac]                              ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:461: error: cannot find symbol\n    [javac]         fdp.setLenient(false);\n    [javac]            ^\n    [javac]   symbol:   method setLenient(boolean)\n    [javac]   location: variable fdp of type FastDateParser\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:462: error: incompatible types: Date cannot be converted to String\n    [javac]         fdp.parse(date);\n    [javac]                   ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:464: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:464: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1697: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1697: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: SimpleDateFormat\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: SimpleDateFormat\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhitespaceAutoGen(FastDateFormatTest.java:319)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhitespaceAutoGen(FastDateFormatTest.java:319)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:316: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf.toPattern());\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:316: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf.toPattern());\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:464: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:464: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_14": {
        "Lang_14_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"Hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"Hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                                                       ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                                                       ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     Name name = java.lang.model.element.Name.of(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: package java.lang.model.element does not exist\n    [javac]     Name name = java.lang.model.element.Name.of(\"test\");\n    [javac]                                        ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     Name name = java.lang.model.element.Name.of(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: package java.lang.model.element does not exist\n    [javac]     Name name = java.lang.model.element.Name.of(\"test\");\n    [javac]                                        ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:834: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:834: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:834: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:834: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:509: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ExceptionUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:509: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:509: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ExceptionUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:509: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name(\"test\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"hello\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_36": {
        "Lang_36_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_30": {
        "Lang_30_n10.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n3.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n9.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n2.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n5.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n7.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n6.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n4.txt": "[error] JavaSyntaxError('')"
    },
    "Lang_23": {
        "Lang_23_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:401: error: incompatible types: Object cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat fmt4 = new Object();\n    [javac]                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:403: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:404: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:405: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt4);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:401: error: incompatible types: Object cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat fmt4 = new Object();\n    [javac]                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:403: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:404: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:405: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt4);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:400: error: cannot find symbol\n    [javac]     MessageFormat baseFmt1 = fmt1.getMessageFormat();\n    [javac]                                  ^\n    [javac]   symbol:   method getMessageFormat()\n    [javac]   location: variable fmt1 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:401: error: cannot find symbol\n    [javac]     MessageFormat baseFmt2 = fmt2.getMessageFormat();\n    [javac]                                  ^\n    [javac]   symbol:   method getMessageFormat()\n    [javac]   location: variable fmt2 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:402: error: cannot find symbol\n    [javac]     fmt1.setSomething(new Object()); // some field added by ExtendedMessageFormat\n    [javac]         ^\n    [javac]   symbol:   method setSomething(Object)\n    [javac]   location: variable fmt1 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:403: error: cannot find symbol\n    [javac]     fmt2.setSomething(new Object()); // some field added by ExtendedMessageFormat\n    [javac]         ^\n    [javac]   symbol:   method setSomething(Object)\n    [javac]   location: variable fmt2 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:404: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 5 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:400: error: cannot find symbol\n    [javac]     MessageFormat baseFmt1 = fmt1.getMessageFormat();\n    [javac]                                  ^\n    [javac]   symbol:   method getMessageFormat()\n    [javac]   location: variable fmt1 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:401: error: cannot find symbol\n    [javac]     MessageFormat baseFmt2 = fmt2.getMessageFormat();\n    [javac]                                  ^\n    [javac]   symbol:   method getMessageFormat()\n    [javac]   location: variable fmt2 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:402: error: cannot find symbol\n    [javac]     fmt1.setSomething(new Object()); // some field added by ExtendedMessageFormat\n    [javac]         ^\n    [javac]   symbol:   method setSomething(Object)\n    [javac]   location: variable fmt1 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:403: error: cannot find symbol\n    [javac]     fmt2.setSomething(new Object()); // some field added by ExtendedMessageFormat\n    [javac]         ^\n    [javac]   symbol:   method setSomething(Object)\n    [javac]   location: variable fmt2 of type ExtendedMessageFormat\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:404: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 5 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:343: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:345: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:343: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:345: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_16": {
        "Lang_16_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njava.lang.NumberFormatException: For input string: \"0X1234\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:652)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1277)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njava.lang.NumberFormatException: For input string: \"0X1234\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:652)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1277)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexUpperAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexUpperAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for input 0X1234\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for input 0X1234\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 120 source files to /root/libro/data/Defects4J/repos/Lang_16/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_16/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1277: error: lambda expressions are not supported in -source 6\n    [javac]     assertDoesNotThrow(() -> NumberUtils.createNumber(\"0X1234\"));\n    [javac]                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 120 source files to /root/libro/data/Defects4J/repos/Lang_16/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_16/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1277: error: lambda expressions are not supported in -source 6\n    [javac]     assertDoesNotThrow(() -> NumberUtils.createNumber(\"0X1234\"));\n    [javac]                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_16_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexCaseAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexCaseAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexCaseAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexCaseAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexCaseAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexCaseAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1280)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_3": {
        "Time_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<3> but was:<2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<3> but was:<2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/chrono/TestIslamicChronology.java:752: error: cannot find symbol\n    [javac]     assertEquals(2, mdt.getZone().getOffset(mdt.toDateTimeAtStartOfDay()).getTotalSeconds());\n    [javac]                                                ^\n    [javac]   symbol:   method toDateTimeAtStartOfDay()\n    [javac]   location: variable mdt of type MutableDateTime\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/chrono/TestIslamicChronology.java:752: error: cannot find symbol\n    [javac]     assertEquals(2, mdt.getZone().getOffset(mdt.toDateTimeAtStartOfDay()).getTotalSeconds());\n    [javac]                                                ^\n    [javac]   symbol:   method toDateTimeAtStartOfDay()\n    [javac]   location: variable mdt of type MutableDateTime\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroAutoGen\njunit.framework.AssertionFailedError: expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<7200000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestIslamicChronology::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<3600000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n8.txt": "[error] JavaSyntaxError('')",
        "Time_3_n9.txt": "[error] JavaSyntaxError('')",
        "Time_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_32": {
        "Lang_32_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testToStringStyleMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testToStringStyleMemoryLeakAutoGen\njunit.framework.AssertionFailedError: expected not same\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failSame(Assert.java:819)\n\tat org.junit.Assert.assertNotSame(Assert.java:798)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testToStringStyleMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.concurrent.TimedSemaphoreTest::testToStringStyleMemoryLeakAutoGen\njunit.framework.AssertionFailedError: expected not same\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failSame(Assert.java:819)\n\tat org.junit.Assert.assertNotSame(Assert.java:798)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1579: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1579: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:402: error: cannot find symbol\n    [javac]     ThreadLocalContext context = new ThreadLocalContext();\n    [javac]     ^\n    [javac]   symbol:   class ThreadLocalContext\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:402: error: cannot find symbol\n    [javac]     ThreadLocalContext context = new ThreadLocalContext();\n    [javac]                                      ^\n    [javac]   symbol:   class ThreadLocalContext\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:406: error: cannot find symbol\n    [javac]     Thread.currentThread().setLocale(locale);\n    [javac]                           ^\n    [javac]   symbol:   method setLocale(Locale)\n    [javac]   location: class Thread\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:409: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.DEFAULT;\n    [javac]                                        ^\n    [javac]   symbol:   variable DEFAULT\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:415: error: cannot find symbol\n    [javac]     assertEquals(null, Thread.currentThread().getLocale());\n    [javac]                                              ^\n    [javac]   symbol:   method getLocale()\n    [javac]   location: class Thread\n    [javac] 5 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:402: error: cannot find symbol\n    [javac]     ThreadLocalContext context = new ThreadLocalContext();\n    [javac]     ^\n    [javac]   symbol:   class ThreadLocalContext\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:402: error: cannot find symbol\n    [javac]     ThreadLocalContext context = new ThreadLocalContext();\n    [javac]                                      ^\n    [javac]   symbol:   class ThreadLocalContext\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:406: error: cannot find symbol\n    [javac]     Thread.currentThread().setLocale(locale);\n    [javac]                           ^\n    [javac]   symbol:   method setLocale(Locale)\n    [javac]   location: class Thread\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:409: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.DEFAULT;\n    [javac]                                        ^\n    [javac]   symbol:   variable DEFAULT\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:415: error: cannot find symbol\n    [javac]     assertEquals(null, Thread.currentThread().getLocale());\n    [javac]                                              ^\n    [javac]   symbol:   method getLocale()\n    [javac]   location: class Thread\n    [javac] 5 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:486: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:486: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1569: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1569: error: lambda expressions are not supported in -source 6\n    [javac]     Thread thread = new Thread(() -> {\n    [javac]                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:485: error: diamond operator is not supported in -source 6\n    [javac]         ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                                  ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:487: error: lambda expressions are not supported in -source 6\n    [javac]         Thread thread = new Thread(() -> {\n    [javac]                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:485: error: diamond operator is not supported in -source 6\n    [javac]         ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                                  ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:487: error: lambda expressions are not supported in -source 6\n    [javac]         Thread thread = new Thread(() -> {\n    [javac]                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:492: error: unreported exception InterruptedException; must be caught or declared to be thrown\n    [javac]     thread.join();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:492: error: unreported exception InterruptedException; must be caught or declared to be thrown\n    [javac]     thread.join();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1119: error: cannot find symbol\n    [javac]     Map<Thread, ThreadLocalMap> threadLocals = (Map<Thread, ThreadLocalMap>) threadLocalsField.get(thread);\n    [javac]                 ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1119: error: cannot find symbol\n    [javac]     Map<Thread, ThreadLocalMap> threadLocals = (Map<Thread, ThreadLocalMap>) threadLocalsField.get(thread);\n    [javac]                                                             ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1120: error: cannot find symbol\n    [javac]     Field tableField = ThreadLocalMap.class.getDeclaredField(\"table\");\n    [javac]                        ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1124: error: cannot find symbol\n    [javac]         Field entryField = ThreadLocalMap.class.getDeclaredField(\"table[i]\");\n    [javac]                            ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1127: error: cannot find symbol\n    [javac]         if (entry!= null && entry instanceof Entry) {\n    [javac]                                              ^\n    [javac]   symbol:   class Entry\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1128: error: cannot find symbol\n    [javac]             Entry entryObj = (Entry) entry;\n    [javac]             ^\n    [javac]   symbol:   class Entry\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1128: error: cannot find symbol\n    [javac]             Entry entryObj = (Entry) entry;\n    [javac]                               ^\n    [javac]   symbol:   class Entry\n    [javac]   location: class CompareToBuilderTest\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1119: error: cannot find symbol\n    [javac]     Map<Thread, ThreadLocalMap> threadLocals = (Map<Thread, ThreadLocalMap>) threadLocalsField.get(thread);\n    [javac]                 ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1119: error: cannot find symbol\n    [javac]     Map<Thread, ThreadLocalMap> threadLocals = (Map<Thread, ThreadLocalMap>) threadLocalsField.get(thread);\n    [javac]                                                             ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1120: error: cannot find symbol\n    [javac]     Field tableField = ThreadLocalMap.class.getDeclaredField(\"table\");\n    [javac]                        ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1124: error: cannot find symbol\n    [javac]         Field entryField = ThreadLocalMap.class.getDeclaredField(\"table[i]\");\n    [javac]                            ^\n    [javac]   symbol:   class ThreadLocalMap\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1127: error: cannot find symbol\n    [javac]         if (entry!= null && entry instanceof Entry) {\n    [javac]                                              ^\n    [javac]   symbol:   class Entry\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1128: error: cannot find symbol\n    [javac]             Entry entryObj = (Entry) entry;\n    [javac]             ^\n    [javac]   symbol:   class Entry\n    [javac]   location: class CompareToBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java:1128: error: cannot find symbol\n    [javac]             Entry entryObj = (Entry) entry;\n    [javac]                               ^\n    [javac]   symbol:   class Entry\n    [javac]   location: class CompareToBuilderTest\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_35": {
        "Lang_35_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:591)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:591)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ValidateTest::testArrayUtilsAddNullParamsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ValidateTest::testArrayUtilsAddNullParamsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ValidateTest.testArrayUtilsAddNullParamsAutoGen(ValidateTest.java:763)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_35_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:596)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddNullParametersAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddNullParametersAutoGen(ArrayUtilsAddTest.java:589)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_35_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ValidateTest.java:761: error: no suitable method found for add(String[],<null>,<null>)\n    [javac]         ArrayUtils.add(array, null, null);\n    [javac]                   ^\n    [javac]     method ArrayUtils.<T#1>add(T#1[],T#1) is not applicable\n    [javac]       (cannot infer type-variable(s) T#1\n    [javac]         (actual and formal argument lists differ in length))\n    [javac]     method ArrayUtils.<T#2>add(T#2[],int,T#2) is not applicable\n    [javac]       (cannot infer type-variable(s) T#2\n    [javac]         (argument mismatch; <null> cannot be converted to int))\n    [javac]     method ArrayUtils.add(boolean[],int,boolean) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to boolean[])\n    [javac]     method ArrayUtils.add(char[],int,char) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method ArrayUtils.add(byte[],int,byte) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to byte[])\n    [javac]     method ArrayUtils.add(short[],int,short) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to short[])\n    [javac]     method ArrayUtils.add(int[],int,int) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to int[])\n    [javac]     method ArrayUtils.add(long[],int,long) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to long[])\n    [javac]     method ArrayUtils.add(float[],int,float) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to float[])\n    [javac]     method ArrayUtils.add(double[],int,double) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to double[])\n    [javac]   where T#1,T#2 are type-variables:\n    [javac]     T#1 extends Object declared in method <T#1>add(T#1[],T#1)\n    [javac]     T#2 extends Object declared in method <T#2>add(T#2[],int,T#2)\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ValidateTest.java:761: error: no suitable method found for add(String[],<null>,<null>)\n    [javac]         ArrayUtils.add(array, null, null);\n    [javac]                   ^\n    [javac]     method ArrayUtils.<T#1>add(T#1[],T#1) is not applicable\n    [javac]       (cannot infer type-variable(s) T#1\n    [javac]         (actual and formal argument lists differ in length))\n    [javac]     method ArrayUtils.<T#2>add(T#2[],int,T#2) is not applicable\n    [javac]       (cannot infer type-variable(s) T#2\n    [javac]         (argument mismatch; <null> cannot be converted to int))\n    [javac]     method ArrayUtils.add(boolean[],int,boolean) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to boolean[])\n    [javac]     method ArrayUtils.add(char[],int,char) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method ArrayUtils.add(byte[],int,byte) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to byte[])\n    [javac]     method ArrayUtils.add(short[],int,short) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to short[])\n    [javac]     method ArrayUtils.add(int[],int,int) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to int[])\n    [javac]     method ArrayUtils.add(long[],int,long) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to long[])\n    [javac]     method ArrayUtils.add(float[],int,float) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to float[])\n    [javac]     method ArrayUtils.add(double[],int,double) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to double[])\n    [javac]   where T#1,T#2 are type-variables:\n    [javac]     T#1 extends Object declared in method <T#1>add(T#1[],T#1)\n    [javac]     T#2 extends Object declared in method <T#2>add(T#2[],int,T#2)\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_35_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ValidateTest.testArrayUtilsAddAutoGen(ValidateTest.java:762)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ValidateTest.testArrayUtilsAddAutoGen(ValidateTest.java:762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddNullAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddNullAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullPointerExceptionAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddNullPointerExceptionAutoGen(ClassUtilsTest.java:806)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullPointerExceptionAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddNullPointerExceptionAutoGen(ClassUtilsTest.java:806)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ValidateTest.testArrayUtilsAddAutoGen(ValidateTest.java:763)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ValidateTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ValidateTest.testArrayUtilsAddAutoGen(ValidateTest.java:763)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:591)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:591)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_9": {
        "Time_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]         zone.withFixed(0, 23, 59, 60);\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]         zone.withFixed(0, 23, 59, 60);\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]         zone.withFixed(999999999); // 23:59:59.999\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]         zone.withFixed(999999999); // 23:59:59.999\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Properties.java:738: error: cannot find symbol\n    [javac]     DateTimeZone maxValidOffset = zone.withFixed(0, 23, 59, 59, 999);\n    [javac]                                       ^\n    [javac]   symbol:   method withFixed(int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Properties.java:740: error: cannot find symbol\n    [javac]         zone.withFixed(0, 23, 59, 60, 0);\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Properties.java:738: error: cannot find symbol\n    [javac]     DateTimeZone maxValidOffset = zone.withFixed(0, 23, 59, 59, 999);\n    [javac]                                       ^\n    [javac]   symbol:   method withFixed(int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Properties.java:740: error: cannot find symbol\n    [javac]         zone.withFixed(0, 23, 59, 60, 0);\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/convert/TestStringConverter.java:587: error: cannot find symbol\n    [javac]         DateTimeZone.parseZone(\"UTC+23:59:59.999\");\n    [javac]                     ^\n    [javac]   symbol:   method parseZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/convert/TestStringConverter.java:587: error: cannot find symbol\n    [javac]         DateTimeZone.parseZone(\"UTC+23:59:59.999\");\n    [javac]                     ^\n    [javac]   symbol:   method parseZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]         zone.withFixed(0, 24, 0); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1061: error: cannot find symbol\n    [javac]         zone.withFixed(0, 0, 60); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]         zone.withFixed(0, 24, 0); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1061: error: cannot find symbol\n    [javac]         zone.withFixed(0, 0, 60); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         DateTime dt = tz.parseDateTime(\"1970-01-01T24:00:00.000\");\n    [javac]                         ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTime dt = tz.parseDateTime(\"1970-01-01T23:59:60.000\");\n    [javac]                         ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         DateTime dt = tz.parseDateTime(\"1970-01-01T24:00:00.000\");\n    [javac]                         ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTime dt = tz.parseDateTime(\"1970-01-01T23:59:60.000\");\n    [javac]                         ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]         dtz.withFixedInstant(0, 23, 59, 60, 0); // expected to throw an exception\n    [javac]            ^\n    [javac]   symbol:   method withFixedInstant(int,int,int,int,int)\n    [javac]   location: variable dtz of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]         dtz.withFixedInstant(0, 23, 59, 60, 0); // expected to throw an exception\n    [javac]            ^\n    [javac]   symbol:   method withFixedInstant(int,int,int,int,int)\n    [javac]   location: variable dtz of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:419: error: cannot find symbol\n    [javac]         zone.withOffsetTotalSeconds(24 * 60 * 60); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withOffsetTotalSeconds(int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:421: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestPartial_Properties\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:426: error: cannot find symbol\n    [javac]         zone.withOffsetTotalSeconds(-1); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withOffsetTotalSeconds(int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:428: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestPartial_Properties\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:419: error: cannot find symbol\n    [javac]         zone.withOffsetTotalSeconds(24 * 60 * 60); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withOffsetTotalSeconds(int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:421: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestPartial_Properties\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:426: error: cannot find symbol\n    [javac]         zone.withOffsetTotalSeconds(-1); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withOffsetTotalSeconds(int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:428: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestPartial_Properties\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:419: error: cannot find symbol\n    [javac]         zone.withFixed(0, 23, 59, 60); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestPartial_Properties.java:419: error: cannot find symbol\n    [javac]         zone.withFixed(0, 23, 59, 60); // should throw an exception\n    [javac]             ^\n    [javac]   symbol:   method withFixed(int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_20": {
        "Time_20_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1042: error: incompatible types: Set<String> cannot be converted to String[]\n    [javac]     String[] timeZones = DateTimeZone.getAvailableIDs();\n    [javac]                                                      ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1042: error: incompatible types: Set<String> cannot be converted to String[]\n    [javac]     String[] timeZones = DateTimeZone.getAvailableIDs();\n    [javac]                                                      ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_20_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen\njunit.framework.ComparisonFailure: expected:<Africa/Asm[e]ra> but was:<Africa/Asm[a]ra>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen\njunit.framework.ComparisonFailure: expected:<Africa/Asm[e]ra> but was:<Africa/Asm[a]ra>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneMismatchAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneMismatchAutoGen\njava.lang.IllegalArgumentException: Invalid format: \"2025-10-28T16:04:51.375Z\" is malformed at \"T16:04:51.375Z\"\n\tat org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:866)\n\tat org.joda.time.DateTime.parse(DateTime.java:144)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneMismatchAutoGen(TestDateTimeZone.java:1046)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneMismatchAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneMismatchAutoGen\njava.lang.IllegalArgumentException: Invalid format: \"2025-10-28T16:07:35.927Z\" is malformed at \"T16:07:35.927Z\"\n\tat org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:866)\n\tat org.joda.time.DateTime.parse(DateTime.java:144)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneMismatchAutoGen(TestDateTimeZone.java:1046)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/convert/TestStringConverter.java:573: error: cannot find symbol\n    [javac]     DateTime convertedDateTime = parseStringToFormattedString(convertDateTimeToFormattedString(originalDateTime));\n    [javac]                                                               ^\n    [javac]   symbol:   method convertDateTimeToFormattedString(DateTime)\n    [javac]   location: class TestStringConverter\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/convert/TestStringConverter.java:573: error: cannot find symbol\n    [javac]     DateTime convertedDateTime = parseStringToFormattedString(convertDateTimeToFormattedString(originalDateTime));\n    [javac]                                                               ^\n    [javac]   symbol:   method convertDateTimeToFormattedString(DateTime)\n    [javac]   location: class TestStringConverter\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_20_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen\njunit.framework.ComparisonFailure: expected:<Africa/Asm[e]ra> but was:<Africa/Asm[a]ra>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIdsAutoGen\njunit.framework.ComparisonFailure: expected:<Africa/Asm[e]ra> but was:<Africa/Asm[a]ra>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_2": {
        "Chart_2_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1182: error: ';' expected\n    [javac] This test method tests the\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1182: error: ';' expected\n    [javac] This test method tests the\n    [javac]                       ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1182: error: <identifier> expected\n    [javac] This test method tests the\n    [javac]                           ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1182: error: ';' expected\n    [javac] This test method tests the\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1182: error: ';' expected\n    [javac] This test method tests the\n    [javac]                       ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1182: error: <identifier> expected\n    [javac] This test method tests the\n    [javac]                           ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:282: error: incompatible types: possible lossy conversion from double to int\n    [javac]     int[] actual = new int[r.getUpperBound()];\n    [javac]                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:283: error: cannot find symbol\n    [javac]     DatasetUtilities.iterateRangeBounds(r, new RangeBoundListener() {\n    [javac]                                                ^\n    [javac]   symbol:   class RangeBoundListener\n    [javac]   location: class RegressionTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:285: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:288: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:291: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:293: error: incompatible types: possible lossy conversion from double to int\n    [javac]             actual[i++] = range.getLowerBound();\n    [javac]                                              ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:296: error: cannot find symbol\n    [javac]     assertArrayEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(int[],int[])\n    [javac]   location: class RegressionTests\n    [javac] 7 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:282: error: incompatible types: possible lossy conversion from double to int\n    [javac]     int[] actual = new int[r.getUpperBound()];\n    [javac]                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:283: error: cannot find symbol\n    [javac]     DatasetUtilities.iterateRangeBounds(r, new RangeBoundListener() {\n    [javac]                                                ^\n    [javac]   symbol:   class RangeBoundListener\n    [javac]   location: class RegressionTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:285: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:288: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:291: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:293: error: incompatible types: possible lossy conversion from double to int\n    [javac]             actual[i++] = range.getLowerBound();\n    [javac]                                              ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:296: error: cannot find symbol\n    [javac]     assertArrayEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(int[],int[])\n    [javac]   location: class RegressionTests\n    [javac] 7 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1119: error: cannot find symbol\n    [javac]     Number value = axis.iterateRangeBounds(0, 10);\n    [javac]                        ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1121: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(1, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1123: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(2, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1125: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(9, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1127: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(10, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1119: error: cannot find symbol\n    [javac]     Number value = axis.iterateRangeBounds(0, 10);\n    [javac]                        ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1121: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(1, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1123: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(2, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1125: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(9, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/time/junit/TimeSeriesTests.java:1127: error: cannot find symbol\n    [javac]     value = axis.iterateRangeBounds(10, 10);\n    [javac]                 ^\n    [javac]   symbol:   method iterateRangeBounds(int,int)\n    [javac]   location: variable axis of type NumberAxis\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/XYSeriesTests.java:784: error: no suitable method found for iterateRangeBounds(int[],int,int,int)\n    [javac]     Object[] result = DatasetUtilities.iterateRangeBounds(array, 0, 1, 3);\n    [javac]                                       ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/XYSeriesTests.java:784: error: no suitable method found for iterateRangeBounds(int[],int,int,int)\n    [javac]     Object[] result = DatasetUtilities.iterateRangeBounds(array, 0, 1, 3);\n    [javac]                                       ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n3.txt": "[error] JavaSyntaxError('')",
        "Chart_2_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                              ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: <identifier> expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                              ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: <identifier> expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                                             ^\n    [javac] 16 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                              ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: <identifier> expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                              ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: ';' expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java:1179: error: <identifier> expected\n    [javac] This test method covers three scenarios: when the start value is greater than the end, when the start value is equal to the end, and when the start value is\n    [javac]                                                                                                                                                             ^\n    [javac] 16 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:251: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities dataset = new DatasetUtilities();\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:252: error: no suitable method found for iterateRangeBounds(int,int,int)\n    [javac]     int[] range = dataset.iterateRangeBounds(1, 10, 2);\n    [javac]                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:256: error: no suitable method found for iterateRangeBounds(int,int,int)\n    [javac]     range = dataset.iterateRangeBounds(10, 1, 2);\n    [javac]                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:260: error: no suitable method found for iterateRangeBounds(int,int,int)\n    [javac]     range = dataset.iterateRangeBounds(10, 1, -2);\n    [javac]                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:251: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities dataset = new DatasetUtilities();\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:252: error: no suitable method found for iterateRangeBounds(int,int,int)\n    [javac]     int[] range = dataset.iterateRangeBounds(1, 10, 2);\n    [javac]                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:256: error: no suitable method found for iterateRangeBounds(int,int,int)\n    [javac]     range = dataset.iterateRangeBounds(10, 1, 2);\n    [javac]                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:260: error: no suitable method found for iterateRangeBounds(int,int,int)\n    [javac]     range = dataset.iterateRangeBounds(10, 1, -2);\n    [javac]                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:476: error: no suitable method found for iterateRangeBounds(int[],int,int,int)\n    [javac]     int[] result = DatasetUtilities.iterateRangeBounds(array, 1, 4, 1);\n    [javac]                                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:476: error: no suitable method found for iterateRangeBounds(int[],int,int,int)\n    [javac]     int[] result = DatasetUtilities.iterateRangeBounds(array, 1, 4, 1);\n    [javac]                                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:280: error: no suitable method found for iterateRangeBounds(int,int,int,int)\n    [javac]     int[] result = DatasetUtilities.iterateRangeBounds(1, 10, 0, 1);\n    [javac]                                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/RegressionTests.java:280: error: no suitable method found for iterateRangeBounds(int,int,int,int)\n    [javac]     int[] result = DatasetUtilities.iterateRangeBounds(1, 10, 0, 1);\n    [javac]                                    ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n4.txt": "[error] LexerError('Could not process token at \"`\", line 12: This test method checks the `iterateRangeBounds()` method with various edge cases for the start and end values, including the minimum and maximum values of th')"
    },
    "Lang_33": {
        "Lang_33_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsToClassNPEAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsToClassNPEAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsToClassNPEAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsToClassNPEAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_24": {
        "Lang_24_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_29": {
        "Lang_29_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1567: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1567: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java:423: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]     String javaVersion = SystemUtils.getJavaVersionAsFloat(version);\n    [javac]                                     ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java:423: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]     String javaVersion = SystemUtils.getJavaVersionAsFloat(version);\n    [javac]                                     ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1569: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1569: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1567: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]             SystemUtils.getJavaVersionAsFloat();\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1573: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1567: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]             SystemUtils.getJavaVersionAsFloat();\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1573: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:992: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:992: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_1": {
        "Lang_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: <identifier> expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                   ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: invalid method declaration; return type required\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                                                      ^\n    [javac] 20 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: <identifier> expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                   ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: invalid method declaration; return type required\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1376: error: ';' expected\n    [javac] This test attempts to create a Long from a hex string that is too large to be represented by an Integer, but not large enough to be handled by the current implementation of NumberUtils.createLong(). If the implementation is fixed to use Long.decode() instead of valueOf(), this test should pass.\n    [javac]                                                                                                                                                                                                      ^\n    [javac] 20 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1379: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(expected, number.longValue());\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1379: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(expected, number.longValue());\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n5.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 23: fail(')",
        "Lang_1_n4.txt": "[error] LexerError('Could not process token at \"`\", line 7: This test method checks that when a hex string with more than 8 digits is passed to `NumberUtils.createNumber()`, it returns a `Long` object instead of an `Integer` object')",
        "Lang_1_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex string with more than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexNumberAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex string with more than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexNumberAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen\njava.lang.NumberFormatException: For input string: \"80000000\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:652)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:957)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_17": {
        "Time_17_n1.txt": "[error] TypeError(\"'in <string>' requires string as left operand, not NoneType\")",
        "Time_17_n4.txt": "[error] TypeError(\"'in <string>' requires string as left operand, not NoneType\")",
        "Time_17_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1232: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1235: error: cannot find symbol\n    [javac]     assertEquals(-2, dtch.getOffset());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1232: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1235: error: cannot find symbol\n    [javac]     assertEquals(-2, dtch.getOffset());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_17_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1132: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     assertEquals(-2, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1136: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 4 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1132: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     assertEquals(-2, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestLocalDate_Basics.java:1136: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds() / 3600);\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 4 errors"
            },
            "success": false
        },
        "Time_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1238: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset().getTotalSeconds());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1242: error: cannot find symbol\n    [javac]         assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1238: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset().getTotalSeconds());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1242: error: cannot find symbol\n    [javac]         assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1233: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1237: error: cannot find symbol\n    [javac]         assertEquals(-3, dtch.getOffset());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1241: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1245: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset()); // Expected -3\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 4 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1233: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1237: error: cannot find symbol\n    [javac]         assertEquals(-3, dtch.getOffset());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1241: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset());\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1245: error: cannot find symbol\n    [javac]         assertEquals(-2, dtch.getOffset()); // Expected -3\n    [javac]                              ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 4 errors"
            },
            "success": false
        },
        "Time_17_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-26T00:01:00.000-03:00> but was:<2012-02-25T23:01:00.000-02:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-26T00:01:00.000-03:00> but was:<2012-02-25T23:01:00.000-03:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1230: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1233: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: cannot find symbol\n    [javac]     assertEquals(-2, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1239: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 4 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1230: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1233: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: cannot find symbol\n    [javac]     assertEquals(-2, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1239: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getOffset().getTotalSeconds());\n    [javac]                          ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 4 errors"
            },
            "success": false
        },
        "Time_17_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-25T02:00:00.000-02:00> but was:<2012-02-25T23:01:00.000-02:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-25T02:00:00.000-02:00> but was:<2012-02-25T23:01:00.000-03:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_6": {
        "Lang_6_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:520: error: incompatible types: possible lossy conversion from int to char\n    [javac]         if (Character.isSurrogate(codePoint)) {\n    [javac]                                   ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:520: error: incompatible types: possible lossy conversion from int to char\n    [javac]         if (Character.isSurrogate(codePoint)) {\n    [javac]                                   ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_1": {
        "Chart_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:246: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:247: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot = null;\n    [javac]             ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:246: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:247: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot = null;\n    [javac]             ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:253: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:253: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:255: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:253: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:253: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:255: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1082: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot = plot;\n    [javac]             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1084: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot.setDataset(0, dataset);\n    [javac]             ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1082: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot = plot;\n    [javac]             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1084: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot.setDataset(0, dataset);\n    [javac]             ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n2.txt": "[error] JavaSyntaxError('')",
        "Chart_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:256: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:260: error: cannot find symbol\n    [javac]         int seriesCount = result.getRowCount();\n    [javac]                                 ^\n    [javac]   symbol:   method getRowCount()\n    [javac]   location: variable result of type LegendItemCollection\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:256: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:260: error: cannot find symbol\n    [javac]         int seriesCount = result.getRowCount();\n    [javac]                                 ^\n    [javac]   symbol:   method getRowCount()\n    [javac]   location: variable result of type LegendItemCollection\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:253: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:253: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:255: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:256: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot = plot;\n    [javac]             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:259: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot.setDataset(index, dataset);\n    [javac]             ^\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:255: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:256: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot = plot;\n    [javac]             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:259: error: plot has private access in AbstractCategoryItemRenderer\n    [javac]     renderer.plot.setDataset(index, dataset);\n    [javac]             ^\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot();\n    [javac]                     ^\n    [javac]   symbol:   class CategoryPlot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: cannot find symbol\n    [javac]     plot.addSeries(new DefaultCategorySeries());\n    [javac]                        ^\n    [javac]   symbol:   class DefaultCategorySeries\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]         renderer.getDataset(0);\n    [javac]                 ^\n    [javac]   symbol:   method getDataset(int)\n    [javac]   location: variable renderer of type AbstractCategoryItemRenderer\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot();\n    [javac]                     ^\n    [javac]   symbol:   class CategoryPlot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: cannot find symbol\n    [javac]     plot.addSeries(new DefaultCategorySeries());\n    [javac]                        ^\n    [javac]   symbol:   class DefaultCategorySeries\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]         renderer.getDataset(0);\n    [javac]                 ^\n    [javac]   symbol:   method getDataset(int)\n    [javac]   location: variable renderer of type AbstractCategoryItemRenderer\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]         result.getRowCount();\n    [javac]               ^\n    [javac]   symbol:   method getRowCount()\n    [javac]   location: variable result of type LegendItemCollection\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: cannot find symbol\n    [javac]     Plot plot = new Plot();\n    [javac]                     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]         result.getRowCount();\n    [javac]               ^\n    [javac]   symbol:   method getRowCount()\n    [javac]   location: variable result of type LegendItemCollection\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: incompatible types: XYPlot cannot be converted to CategoryPlot\n    [javac]     renderer.setPlot(plot);\n    [javac]                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: incompatible types: XYPlot cannot be converted to CategoryPlot\n    [javac]     renderer.setPlot(plot);\n    [javac]                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_3": {
        "Lang_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for Double value\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for Double value\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatPrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatPrecisionAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for floating point number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatPrecisionAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatPrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatPrecisionAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for floating point number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatPrecisionAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1362: error: method createNumber in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(Double.valueOf(\"123.456\"), NumberUtils.createNumber(\"123.456\", Double.class));\n    [javac]                                                        ^\n    [javac]   required: String\n    [javac]   found: String,Class<Double>\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1363: error: method createNumber in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(new BigDecimal(\"123.456\"), NumberUtils.createNumber(\"123.456\", BigDecimal.class));\n    [javac]                                                        ^\n    [javac]   required: String\n    [javac]   found: String,Class<BigDecimal>\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1362: error: method createNumber in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(Double.valueOf(\"123.456\"), NumberUtils.createNumber(\"123.456\", Double.class));\n    [javac]                                                        ^\n    [javac]   required: String\n    [javac]   found: String,Class<Double>\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1363: error: method createNumber in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(new BigDecimal(\"123.456\"), NumberUtils.createNumber(\"123.456\", BigDecimal.class));\n    [javac]                                                        ^\n    [javac]   required: String\n    [javac]   found: String,Class<BigDecimal>\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_3_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1359: error: no suitable method found for valueOf(String)\n    [javac]     assertNotEquals(BigDecimal.valueOf(number), result);\n    [javac]                               ^\n    [javac]     method BigDecimal.valueOf(long) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to long)\n    [javac]     method BigDecimal.valueOf(double) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to double)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1359: error: no suitable method found for valueOf(String)\n    [javac]     assertNotEquals(BigDecimal.valueOf(number), result);\n    [javac]                               ^\n    [javac]     method BigDecimal.valueOf(long) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to long)\n    [javac]     method BigDecimal.valueOf(double) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to double)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for Double or BigDecimal\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatsAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for Double or BigDecimal\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatsAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatPrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatPrecisionAutoGen\njunit.framework.AssertionFailedError: expected:<class java.lang.Float> but was:<class java.math.BigDecimal>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatTruncationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatTruncationAutoGen\njunit.framework.AssertionFailedError: Values should be different. Actual: class java.math.BigDecimal\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failEquals(Assert.java:185)\n\tat org.junit.Assert.assertNotEquals(Assert.java:161)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for floating point number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatPrecisionAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for floating point number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatPrecisionAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatParsingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatParsingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for floating point number that cannot be parsed as Float\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatParsingAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatParsingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatParsingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for floating point number that cannot be parsed as Float\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatParsingAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_5": {
        "Lang_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testLocaleUtilsAutoGen(FieldUtilsTest.java:1155)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testLocaleUtilsAutoGen(FieldUtilsTest.java:1155)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _en\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _en\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testLocaleUtilsAutoGen(FieldUtilsTest.java:1154)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testLocaleUtilsAutoGen(FieldUtilsTest.java:1154)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_5/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_5/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java:502: error: cannot find symbol\n    [javac]     assertEquals(Locale.FR, locale);\n    [javac]                        ^\n    [javac]   symbol:   variable FR\n    [javac]   location: class Locale\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_5/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_5/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java:502: error: cannot find symbol\n    [javac]     assertEquals(Locale.FR, locale);\n    [javac]                        ^\n    [javac]   symbol:   variable FR\n    [javac]   location: class Locale\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testLocaleUtilsAutoGen(FieldUtilsTest.java:1155)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testLocaleUtilsAutoGen(FieldUtilsTest.java:1155)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_5": {
        "Time_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1530: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.standard()).withYearsRemoved().normalizedStandard(PeriodType.standard().withYearsRemoved());\n    [javac]                                                                         ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1530: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.standard()).withYearsRemoved().normalizedStandard(PeriodType.standard().withYearsRemoved());\n    [javac]                                                                         ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1530: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})).withYearsRemoved().normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()}));\n    [javac]                                                                                                                                                        ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1530: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})).withYearsRemoved().normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()}));\n    [javac]                                                                                                                                                        ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njava.lang.UnsupportedOperationException: Field is not supported\n\tat org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)\n\tat org.joda.time.Period.withYears(Period.java:896)\n\tat org.joda.time.Period.normalizedStandard(Period.java:1630)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1529: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.standard()).withYearsRemoved().normalizedStandard(PeriodType.standard().withYearsRemoved());\n    [javac]                                                                         ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1529: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.standard()).withYearsRemoved().normalizedStandard(PeriodType.standard().withYearsRemoved());\n    [javac]                                                                         ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1530: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.standard()).withYearsRemoved().normalizedStandard(PeriodType.standard().withYearsRemoved());\n    [javac]                                                                         ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1530: error: cannot find symbol\n    [javac]         Period p = new Period(startDate, endDate, PeriodType.standard()).withYearsRemoved().normalizedStandard(PeriodType.standard().withYearsRemoved());\n    [javac]                                                                         ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: class Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Constructors.java:1541: error: cannot find symbol\n    [javac]     p2 = p2.withYearsRemoved();\n    [javac]            ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: variable p2 of type Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Constructors.java:1541: error: cannot find symbol\n    [javac]     p2 = p2.withYearsRemoved();\n    [javac]            ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: variable p2 of type Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_11": {
        "Time_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder = getTestDataTimeZoneBuilder();\n    [javac]                                   ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder = getTestDataTimeZoneBuilder();\n    [javac]                                   ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:327: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> verboseBuilder.toDateTimeZone(\"TestDTZ\", true));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:336: error: illegal start of expression\n    [javac] }\n    [javac] ^\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:336: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:327: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> verboseBuilder.toDateTimeZone(\"TestDTZ\", true));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:336: error: illegal start of expression\n    [javac] }\n    [javac] ^\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:336: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]     ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1055: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1063: error: method getStandardOffset in class DateTimeZone cannot be applied to given types;\n    [javac]     assertEquals(\"Warning: Duplicate named rule in zone 'TestDTZ2', creating new id 'TestDTZ2_1'\", zone1.getStandardOffset().toString());\n    [javac]                                                                                                         ^\n    [javac]   required: long\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1064: error: method getStandardOffset in class DateTimeZone cannot be applied to given types;\n    [javac]     assertEquals(\"TestDTZ2_1\", zone2.getStandardOffset().toString());\n    [javac]                                     ^\n    [javac]   required: long\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]     ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1055: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1063: error: method getStandardOffset in class DateTimeZone cannot be applied to given types;\n    [javac]     assertEquals(\"Warning: Duplicate named rule in zone 'TestDTZ2', creating new id 'TestDTZ2_1'\", zone1.getStandardOffset().toString());\n    [javac]                                                                                                         ^\n    [javac]   required: long\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZone.java:1064: error: method getStandardOffset in class DateTimeZone cannot be applied to given types;\n    [javac]     assertEquals(\"TestDTZ2_1\", zone2.getStandardOffset().toString());\n    [javac]                                     ^\n    [javac]   required: long\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:135: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:143: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:135: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:143: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder1 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:320: error: cannot find symbol\n    [javac]             DateTimeZoneBuilder builder2 = getTestDataTimeZoneBuilder();\n    [javac]                                            ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:327: error: cannot find symbol\n    [javac]     assertEquals(true, DateTimeZoneBuilder.verbose());\n    [javac]                                           ^\n    [javac]   symbol:   method verbose()\n    [javac]   location: class DateTimeZoneBuilder\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder1 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:320: error: cannot find symbol\n    [javac]             DateTimeZoneBuilder builder2 = getTestDataTimeZoneBuilder();\n    [javac]                                            ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:327: error: cannot find symbol\n    [javac]     assertEquals(true, DateTimeZoneBuilder.verbose());\n    [javac]                                           ^\n    [javac]   symbol:   method verbose()\n    [javac]   location: class DateTimeZoneBuilder\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder1 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:318: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder2 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder1 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:318: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder2 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1346: error: local variable builder is accessed from within inner class; needs to be declared final\n    [javac]             builder.toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1346: error: local variable builder is accessed from within inner class; needs to be declared final\n    [javac]             builder.toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_17": {
        "Chart_17_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         series.clone();\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         series.clone();\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clonedSeries = series.clone();\n    [javac]                                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clonedSeries = series.clone();\n    [javac]                                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clonedSeries = series.clone();\n    [javac]                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clonedSeries = series.clone();\n    [javac]                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_10": {
        "Time_10_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                          ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                                             ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                          ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                                             ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testDaysBetweenMonthDayAutoGen(TestDateTimeFormatter.java:968)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthsAutoGen\njunit.framework.AssertionFailedError: expected:<29> but was:<59>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthsAutoGen\njunit.framework.AssertionFailedError: expected:<29> but was:<59>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testDaysBetweenMonthDayAutoGen(TestDateTimeFormatter.java:969)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                          ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                                             ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                          ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays();\n    [javac]                                             ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n9.txt": "[error] JavaSyntaxError('')",
        "Time_10_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen\njunit.framework.AssertionFailedError: expected:<59> but was:<88>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen\njunit.framework.AssertionFailedError: expected:<59> but was:<88>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenExceptionAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testDaysBetweenExceptionAutoGen(TestDateTimeFormatter.java:970)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:969: error: cannot find symbol\n    [javac]     isoChronology = isoChronology.withClen(\"gregory\");\n    [javac]                                  ^\n    [javac]   symbol:   method withClen(String)\n    [javac]   location: variable isoChronology of type Chronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:970: error: cannot find symbol\n    [javac]     assertEquals(59, Days.daysBetween(january1, february29).withChronology(isoChronology).getDays());\n    [javac]                                                            ^\n    [javac]   symbol:   method withChronology(Chronology)\n    [javac]   location: class Days\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:969: error: cannot find symbol\n    [javac]     isoChronology = isoChronology.withClen(\"gregory\");\n    [javac]                                  ^\n    [javac]   symbol:   method withClen(String)\n    [javac]   location: variable isoChronology of type Chronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:970: error: cannot find symbol\n    [javac]     assertEquals(59, Days.daysBetween(january1, february29).withChronology(isoChronology).getDays());\n    [javac]                                                            ^\n    [javac]   symbol:   method withChronology(Chronology)\n    [javac]   location: class Days\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_16": {
        "Chart_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: cannot find symbol\n    [javac]     dataset.setSeriesCount(0);\n    [javac]            ^\n    [javac]   symbol:   method setSeriesCount(int)\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: cannot find symbol\n    [javac]     dataset.setSeriesCount(0);\n    [javac]            ^\n    [javac]   symbol:   method setSeriesCount(int)\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: cannot find symbol\n    [javac]     dataset.getSeriesKeys(); // should initialize the seriesKeys\n    [javac]            ^\n    [javac]   symbol:   method getSeriesKeys()\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: cannot find symbol\n    [javac]     dataset.getSeriesKeys(); // should initialize the seriesKeys\n    [javac]            ^\n    [javac]   symbol:   method getSeriesKeys()\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:332: error: cannot find symbol\n    [javac]         dataset.getCategoryKeys();\n    [javac]                ^\n    [javac]   symbol:   method getCategoryKeys()\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:333: error: cannot find symbol\n    [javac]         dataset.getSeriesKeys();\n    [javac]                ^\n    [javac]   symbol:   method getSeriesKeys()\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:332: error: cannot find symbol\n    [javac]         dataset.getCategoryKeys();\n    [javac]                ^\n    [javac]   symbol:   method getCategoryKeys()\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:333: error: cannot find symbol\n    [javac]         dataset.getSeriesKeys();\n    [javac]                ^\n    [javac]   symbol:   method getSeriesKeys()\n    [javac]   location: variable dataset of type DefaultIntervalCategoryDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java:296: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java:296: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_2": {
        "Time_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(WeekFields.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(WeekFields.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_40": {
        "Lang_40_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:424: error: cannot find symbol\n    [javac]     assertNotEquals(upperCaseString, upperCaseStringGerman);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:425: error: cannot find symbol\n    [javac]     assertNotEquals(lowerCaseString, lowerCaseStringGerman);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:424: error: cannot find symbol\n    [javac]     assertNotEquals(upperCaseString, upperCaseStringGerman);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:425: error: cannot find symbol\n    [javac]     assertNotEquals(lowerCaseString, lowerCaseStringGerman);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/StrBuilderTest.java:1805: error: cannot find symbol\n    [javac]     assertNotEquals(expectedLower, localeLower);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/StrBuilderTest.java:1806: error: cannot find symbol\n    [javac]     assertNotEquals(expectedUpper, localeUpper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/StrBuilderTest.java:1805: error: cannot find symbol\n    [javac]     assertNotEquals(expectedLower, localeLower);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/StrBuilderTest.java:1806: error: cannot find symbol\n    [javac]     assertNotEquals(expectedUpper, localeUpper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/LocaleUtilsTest.java:515: error: cannot find symbol\n    [javac]     assertNotEquals(lowerCaseUS, lowerCaseFrench);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class LocaleUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/LocaleUtilsTest.java:515: error: cannot find symbol\n    [javac]     assertNotEquals(lowerCaseUS, lowerCaseFrench);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class LocaleUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.ExtendedMessageFormatTest::testToCaseInsensitiveAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.ExtendedMessageFormatTest::testToCaseInsensitiveAutoGen\njunit.framework.ComparisonFailure: expected:<[Hello]> but was:<[0]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.ExtendedMessageFormatTest::testToCaseInsensitiveAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.ExtendedMessageFormatTest::testToCaseInsensitiveAutoGen\njunit.framework.ComparisonFailure: expected:<[Hello]> but was:<[0]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1761: error: cannot find symbol\n    [javac]     String titleCase = original.toTitleCase();\n    [javac]                                ^\n    [javac]   symbol:   method toTitleCase()\n    [javac]   location: variable original of type String\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1761: error: cannot find symbol\n    [javac]     String titleCase = original.toTitleCase();\n    [javac]                                ^\n    [javac]   symbol:   method toTitleCase()\n    [javac]   location: variable original of type String\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: cannot find symbol\n    [javac]     String title = original.toTitleCase(Locale.ROOT);\n    [javac]                            ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:423: error: cannot find symbol\n    [javac]     assertEquals(title, original.toTitleCase(Locale.ROOT));\n    [javac]                                 ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:429: error: cannot find symbol\n    [javac]     title = original.toTitleCase(french);\n    [javac]                     ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:431: error: cannot find symbol\n    [javac]     assertNotEquals(upper, original.toUpperCase(Locale.ROOT));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:432: error: cannot find symbol\n    [javac]     assertNotEquals(lower, original.toLowerCase(Locale.ROOT));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:433: error: cannot find symbol\n    [javac]     assertNotEquals(title, original.toTitleCase(Locale.ROOT));\n    [javac]                                    ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: cannot find symbol\n    [javac]     String title = original.toTitleCase(Locale.ROOT);\n    [javac]                            ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:423: error: cannot find symbol\n    [javac]     assertEquals(title, original.toTitleCase(Locale.ROOT));\n    [javac]                                 ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:429: error: cannot find symbol\n    [javac]     title = original.toTitleCase(french);\n    [javac]                     ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:431: error: cannot find symbol\n    [javac]     assertNotEquals(upper, original.toUpperCase(Locale.ROOT));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:432: error: cannot find symbol\n    [javac]     assertNotEquals(lower, original.toLowerCase(Locale.ROOT));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:433: error: cannot find symbol\n    [javac]     assertNotEquals(title, original.toTitleCase(Locale.ROOT));\n    [javac]                                    ^\n    [javac]   symbol:   method toTitleCase(Locale)\n    [javac]   location: variable original of type String\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsTest::testToLowerCaseAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsTest::testToLowerCaseAutoGen\njunit.framework.ComparisonFailure: expected:<[a]> but was:<[\u00e5]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsTest::testToLowerCaseAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsTest::testToLowerCaseAutoGen\njunit.framework.ComparisonFailure: expected:<[a]> but was:<[\u00e5]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_8": {
        "Time_8_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for offset -1:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for offset -1:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetLessThanOneHourAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetLessThanOneHourAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_28": {
        "Lang_28_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#8288;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#8288;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(input);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(input);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     StringEscapeUtils.escapeXML(writer, input);\n    [javac]                      ^\n    [javac]   symbol:   method escapeXML(StringWriter,String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     StringEscapeUtils.escapeXML(writer, input);\n    [javac]                      ^\n    [javac]   symbol:   method escapeXML(StringWriter,String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     assertEquals(expected, StringEscapeUtils.escapeXML(input));\n    [javac]                                             ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     assertEquals(expected, StringEscapeUtils.escapeXML(input));\n    [javac]                                             ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128509;]> but was:<[\ud83d\udc4d]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128509;]> but was:<[\ud83d\udc4d]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#65536;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#65536;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     StringEscapeUtils.escapeXML(writer, input);\n    [javac]                      ^\n    [javac]   symbol:   method escapeXML(StringWriter,String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     StringEscapeUtils.escapeXML(writer, input);\n    [javac]                      ^\n    [javac]   symbol:   method escapeXML(StringWriter,String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#8288;&#8304;]> but was:<[??]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#8288;&#8304;]> but was:<[??]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_13": {
        "Lang_13_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:372: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:372: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_16": {
        "Time_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dtf.parseInto(instant, dt);\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: Instant,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dtf.parseInto(instant, dt);\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: Instant,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: incompatible types: DateTime cannot be converted to String\n    [javac]         dtf.parseDateTime(instant);\n    [javac]                           ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: incompatible types: DateTime cannot be converted to String\n    [javac]         dtf.parseDateTime(instant);\n    [javac]                           ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(now, now.getMillis());\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: DateTime,long\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(now, now.getMillis());\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: DateTime,long\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: incompatible types: long cannot be converted to String\n    [javac]         dtf.parseDateTime(instant.getMillis());\n    [javac]                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:914: error: cannot find symbol\n    [javac]     } catch (DateTimeParseException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeParseException\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: incompatible types: long cannot be converted to String\n    [javac]         dtf.parseDateTime(instant.getMillis());\n    [javac]                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:914: error: cannot find symbol\n    [javac]     } catch (DateTimeParseException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeParseException\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_16_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testIssue148AutoGen\njunit.framework.AssertionFailedError: expected:<2021> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testIssue148AutoGen\njunit.framework.AssertionFailedError: expected:<2021> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:911: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime dt = dtf.parseDateTime(\"02/29\", instant);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: String,Instant\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(123456789000L, dt.getInstant().getMillis());\n    [javac]                                   ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable dt of type DateTime\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:911: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime dt = dtf.parseDateTime(\"02/29\", instant);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: String,Instant\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(123456789000L, dt.getInstant().getMillis());\n    [javac]                                   ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable dt of type DateTime\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(\"02\", instant);\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: String,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(\"02\", instant);\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: String,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(\"02/29\", instant);\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: String,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(\"02/29\", instant);\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: String,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: incompatible types: DateTime cannot be converted to String\n    [javac]     DateTime parsed = dtf.parseDateTime(instant);\n    [javac]                                         ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: incompatible types: DateTime cannot be converted to String\n    [javac]     DateTime parsed = dtf.parseDateTime(instant);\n    [javac]                                         ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(instant, \"0229\");\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = dtf.parseDateTime(instant, \"0229\");\n    [javac]                          ^\n    [javac]   required: String\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Lang_31": {
        "Lang_31_n3.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n1.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n7.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n2.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n6.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n4.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n10.txt": "[error] JavaSyntaxError('')"
    },
    "Time_1": {
        "Time_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Year.ofCentury(), 1).with(Weekyear.of(1), 1);\n    [javac]                                               ^\n    [javac]   symbol:   variable Weekyear\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Year.ofCentury(), 1).with(Weekyear.of(1), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Year\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Year.ofCentury(), 1).with(Weekyear.of(1), 1);\n    [javac]                                               ^\n    [javac]   symbol:   variable Weekyear\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Year.ofCentury(), 1).with(Weekyear.of(1), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Year\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     Partial partial = new Partial(yearOfCentury(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method yearOfCentury()\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Time_18": {
        "Time_18_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_18/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_18/src/test/java/org/joda/time/TestIllegalFieldValueException.java:341: error: cannot find symbol\n    [javac]         gjdt = gjdt.toDateTimeUntilMillis();\n    [javac]                    ^\n    [javac]   symbol:   method toDateTimeUntilMillis()\n    [javac]   location: variable gjdt of type DateTime\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_18/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_18/src/test/java/org/joda/time/TestIllegalFieldValueException.java:341: error: cannot find symbol\n    [javac]         gjdt = gjdt.toDateTimeUntilMillis();\n    [javac]                    ^\n    [javac]   symbol:   method toDateTimeUntilMillis()\n    [javac]   location: variable gjdt of type DateTime\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_18_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen\njunit.framework.AssertionFailedError: expected:<1500-02-29T00:00:00.000Z> but was:<1500-02-29T00:00:00.000Z>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_18_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected org.joda.time.IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_18/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_18/src/test/java/org/joda/time/TestIllegalFieldValueException.java:341: error: cannot find symbol\n    [javac]         gjdt = GJChronology.getInstanceUTC().set(GJChronology.DATE, gjdt.getMillis());\n    [javac]                                                              ^\n    [javac]   symbol:   variable DATE\n    [javac]   location: class GJChronology\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_18/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_18/src/test/java/org/joda/time/TestIllegalFieldValueException.java:341: error: cannot find symbol\n    [javac]         gjdt = GJChronology.getInstanceUTC().set(GJChronology.DATE, gjdt.getMillis());\n    [javac]                                                              ^\n    [javac]   symbol:   variable DATE\n    [javac]   location: class GJChronology\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_18_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormat.testIssue130AutoGen(TestDateTimeFormat.java:1190)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_38": {
        "Lang_38_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen\njunit.framework.ComparisonFailure: expected:<[2009-10-16T16:42:16].000Z> but was:<[1970-01-01T00:00:00].000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen\njunit.framework.ComparisonFailure: expected:<[2009-10-16T16:42:16].000Z> but was:<[1970-01-01T00:00:00].000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.AssertionFailedError: Expected an exception\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testDateFormatUtilsCalendarTimeZoneIssueAutoGen(DateUtilsTest.java:1574)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatCalendarIsoMsZuluAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatCalendarIsoMsZuluAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16:42:16.000-0800]> but was:<2009-10-16T[08:42:16.000Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16:42:16.000-0800]> but was:<2009-10-16T[08:42:16.000Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_11": {
        "Lang_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(10, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(10, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(10, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(10, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1596: error: cannot find symbol\n    [javac]     RandomUtils random = new Random();\n    [javac]     ^\n    [javac]   symbol:   class RandomUtils\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1596: error: cannot find symbol\n    [javac]     RandomUtils random = new Random();\n    [javac]     ^\n    [javac]   symbol:   class RandomUtils\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(3, 5, 3);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(3, 5, 3);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: no suitable method found for random(int,int)\n    [javac]         RandomStringUtils.random(0, 1);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,String) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to String)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: no suitable method found for random(int,int)\n    [javac]         RandomStringUtils.random(0, 1);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,String) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to String)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 5, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_41": {
        "Lang_41_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameForArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameForArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]];> but was:<String[];>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[][;]> but was:<String[][]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsArrayHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsArrayHandlingAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]];> but was:<String[];>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[][;]> but was:<String[][]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_7": {
        "Lang_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashesAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLeadingDashesAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLeadingDashDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLeadingDoubleDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1288: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"--123\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1288: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"--123\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_7_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1288: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"--123\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1288: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"--123\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberLeadingDashDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for \"--123\"\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberLeadingDashDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1288: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"--123\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1288: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"--123\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLeadingDoubleDashAutoGen(NumberUtilsTest.java:1290)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDoubleDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashesAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLeadingDashesAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_4": {
        "Time_4_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:661: error: cannot find symbol\n    [javac]     Partial partial = new Partial(clockHourOfDay(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:663: error: cannot find symbol\n    [javac]         partial.with(hourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]     partial = new Partial(hourOfDay(), 1);\n    [javac]                           ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:669: error: cannot find symbol\n    [javac]         partial.with(clockHourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:674: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1}).isEqual(new Partial(hourOfDay(), 1));\n    [javac]                                                                                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:674: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1}).isEqual(new Partial(hourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:674: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1}).isEqual(new Partial(hourOfDay(), 1));\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:679: error: cannot find symbol\n    [javac]         new Partial(hourOfDay(), 1).isEqual(new Partial(clockHourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:679: error: cannot find symbol\n    [javac]         new Partial(hourOfDay(), 1).isEqual(new Partial(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 11 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:661: error: cannot find symbol\n    [javac]     Partial partial = new Partial(clockHourOfDay(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:663: error: cannot find symbol\n    [javac]         partial.with(hourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]     partial = new Partial(hourOfDay(), 1);\n    [javac]                           ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:669: error: cannot find symbol\n    [javac]         partial.with(clockHourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:674: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1}).isEqual(new Partial(hourOfDay(), 1));\n    [javac]                                                                                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:674: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1}).isEqual(new Partial(hourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:674: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1}).isEqual(new Partial(hourOfDay(), 1));\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:679: error: cannot find symbol\n    [javac]         new Partial(hourOfDay(), 1).isEqual(new Partial(clockHourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:679: error: cannot find symbol\n    [javac]         new Partial(hourOfDay(), 1).isEqual(new Partial(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 11 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:661: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockHourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                           ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:661: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockHourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                           ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:466: error: cannot find symbol\n    [javac]         a.with(hourOfDay(), 1);\n    [javac]                ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]     a = new Partial(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:474: error: cannot find symbol\n    [javac]         a.with(clockhourOfDay(), 1);\n    [javac]                ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:466: error: cannot find symbol\n    [javac]         a.with(hourOfDay(), 1);\n    [javac]                ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]     a = new Partial(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:474: error: cannot find symbol\n    [javac]         a.with(clockhourOfDay(), 1);\n    [javac]                ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:463: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:463: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:463: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:463: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:468: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    }
}