{
    "Lang_12": {
        "Lang_12_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]     String result = RandomStringUtils.random(1, 0, 0, false, false, universe, random);\n    [javac]                                      ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]     String result = RandomStringUtils.random(1, 0, 0, false, false, universe, random);\n    [javac]                                      ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(3, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(3, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomOutOfBoundsExceptionAutoGen\njava.lang.ArrayIndexOutOfBoundsException: Index 457843847 out of bounds for length 0\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:247)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsRandomOutOfBoundsExceptionAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomOutOfBoundsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsRandomOutOfBoundsExceptionAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen\njava.lang.ArrayIndexOutOfBoundsException: Index 1987834100 out of bounds for length 0\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:247)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.ArrayIndexOutOfBoundsException: Index 1673928038 out of bounds for length 0\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:247)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(1, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(1, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAlwaysThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAlwaysThrowsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAlwaysThrowsExceptionAutoGen(RandomStringUtilsTest.java:326)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(1, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(1, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:838: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(1, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:838: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ArrayIndexOutOfBoundsException.class, () -> RandomStringUtils.random(1, 0, 0, false, false, universe, random));\n    [javac]                                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_4": {
        "Lang_4_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceFailureAutoGen\njunit.framework.AssertionFailedError: expected:<1 [<] 2> but was:<1 [&lt;] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorCharSequenceFailureAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [<] 2> but was:<1 [&lt;] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorCharSequenceAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n3.txt": "[error] JavaSyntaxError('')",
        "Lang_4_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceFailureAutoGen\njunit.framework.AssertionFailedError: expected:<1 [<] 2> but was:<1 [&lt;] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorCharSequenceFailureAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [<] 2> but was:<1 [&lt;] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorCharSequenceAutoGen(StringUtilsTest.java:2324)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [<] 2> but was:<1 [&lt;] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorCharSequenceAutoGen(StringUtilsTest.java:2324)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceFailureAutoGen\njunit.framework.AssertionFailedError: expected:<1 [<] 2> but was:<1 [&lt;] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorCharSequenceFailureAutoGen(StringUtilsTest.java:2324)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharBufferAutoGen(StringUtilsTest.java:2322)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testCharSequenceLookupAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testCharSequenceLookupAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testCharSequenceLookupAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorCharSequenceAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_8": {
        "Lang_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00am ES]T> but was:<[6:34AM PD]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00am ES]T> but was:<[6:35AM ED]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: The formatted time should respect the calendar's timezone expected:<[12:00PM E]T> but was:<[6:34AM PD]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:267)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: The formatted time should respect the calendar's timezone expected:<[12:00PM E]T> but was:<[6:35AM ED]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:267)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[8:30 AM E]DT> but was:<[6:34AM P]DT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:266)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[8:30 ]AM EDT> but was:<[6:35]AM EDT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:266)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[3:30PM E]DT> but was:<[6:34AM P]DT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:266)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[3:30P]M EDT> but was:<[6:36A]M EDT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:266)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTzBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTzBugAutoGen\njunit.framework.AssertionFailedError: expected:<[8:00 AM E]DT> but was:<[6:34AM P]DT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTzBugAutoGen(FastDatePrinterTest.java:266)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTzBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTzBugAutoGen\njunit.framework.AssertionFailedError: expected:<[8:00 ]AM EDT> but was:<[6:36]AM EDT>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTzBugAutoGen(FastDatePrinterTest.java:266)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00am ES]T> but was:<[6:35AM PD]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00am ES]T> but was:<[6:36AM ED]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneBugAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_15": {
        "Time_15_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.field.TestFieldUtils.testFieldUtilsSafeMultiplyOverflowAutoGen(TestFieldUtils.java:240)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestBuilder::testFieldUtilsSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestBuilder::testFieldUtilsSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.tz.TestBuilder.testFieldUtilsSafeMultiplyOverflowAutoGen(TestBuilder.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.tz.TestBuilder.testSafeMultiplyOverflowAutoGen(TestBuilder.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: expected:<9223372036854775807> but was:<-9223372036854775808>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.chrono.TestISOChronology.testSafeMultiplyOverflowAutoGen(TestISOChronology.java:427)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.tz.TestBuilder.testSafeMultiplyOverflowAutoGen(TestBuilder.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.field.TestFieldUtils.testFieldUtilsSafeMultiplyOverflowAutoGen(TestFieldUtils.java:240)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.tz.TestBuilder.testSafeMultiplyOverflowAutoGen(TestBuilder.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.tz.TestBuilder.testSafeMultiplyOverflowAutoGen(TestBuilder.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.tz.TestBuilder.testSafeMultiplyOverflowAutoGen(TestBuilder.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestBuilder::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.tz.TestBuilder.testSafeMultiplyOverflowAutoGen(TestBuilder.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_6": {
        "Time_6_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]   Chronology chronology = GJChronology.getInstance();\n    [javac]                           ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]   assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                         ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]   assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                  ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]   Chronology chronology = GJChronology.getInstance();\n    [javac]                           ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]   assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                         ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]   assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                  ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(not(equalTo(expectedEnd))));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(not(equalTo(expectedEnd))));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(not(equalTo(expectedEnd))));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(not(equalTo(expectedEnd))));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chrono = GJChronology.getInstance();\n    [javac]                         ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(bcExpectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(bcExpectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chrono = GJChronology.getInstance();\n    [javac]                         ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(bcExpectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(bcExpectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_15": {
        "Lang_15_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: TypeVariable<Class<TypeUtilsTest.Other>> cannot be converted to Class<?>\n    [javac]     List<Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(thisInstance.getClass(), Other.class.getTypeParameters()[0]);\n    [javac]                                                                                                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: TypeVariable<Class<TypeUtilsTest.Other>> cannot be converted to Class<?>\n    [javac]     List<Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(thisInstance.getClass(), Other.class.getTypeParameters()[0]);\n    [javac]                                                                                                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:680: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<Class<?>>\n    [javac]     List<Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:682: error: incompatible types: TypeVariable<Class<This>> cannot be converted to int\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:683: error: incompatible types: TypeVariable<Class<This>> cannot be converted to int\n    [javac]     assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                                                                                       ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:680: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<Class<?>>\n    [javac]     List<Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:682: error: incompatible types: TypeVariable<Class<This>> cannot be converted to int\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:683: error: incompatible types: TypeVariable<Class<This>> cannot be converted to int\n    [javac]     assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                                                                                       ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> { }\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: type argument This<?,?> is not within bounds of type-variable D\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                          ^\n    [javac]   where B,D are type-variables:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac]     D extends GenericDeclaration declared in interface TypeVariable\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<TypeVariable<This<?,?>>,Class<?>>\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                                       ^\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> { }\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: type argument This<?,?> is not within bounds of type-variable D\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                          ^\n    [javac]   where B,D are type-variables:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac]     D extends GenericDeclaration declared in interface TypeVariable\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<TypeVariable<This<?,?>>,Class<?>>\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                                       ^\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: cannot find symbol\n    [javac]     assertEquals(2, typeVarAssigns.size());\n    [javac]                     ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                                      ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: cannot find symbol\n    [javac]     assertEquals(2, typeVarAssigns.size());\n    [javac]                     ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                                      ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: cannot find symbol\n    [javac]     typeVarAssigns = TypeUtils.getTypeArguments(Other.class, thisInstance.getClass());\n    [javac]     ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(2, typeVarAssigns.size());\n    [javac]                     ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:678: error: cannot find symbol\n    [javac]     assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                                      ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: cannot find symbol\n    [javac]     typeVarAssigns = TypeUtils.getTypeArguments(Other.class, thisInstance.getClass());\n    [javac]     ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: cannot find symbol\n    [javac]     assertEquals(2, typeVarAssigns.size());\n    [javac]                     ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n    [javac]                                ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:678: error: cannot find symbol\n    [javac]     assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    [javac]                                                      ^\n    [javac]   symbol:   variable typeVarAssigns\n    [javac]   location: class TypeUtilsTest<B>\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: interface expected here\n    [javac]     class Other<T> implements This<String, T> {}\n    [javac]                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: interface expected here\n    [javac]     class Other<T> implements This<String, T> {}\n    [javac]                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<TypeVariable<?>>\n    [javac]     List<TypeVariable<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                      ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: type argument This<?,?> is not within bounds of type-variable D\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                          ^\n    [javac]   where B,D are type-variables:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac]     D extends GenericDeclaration declared in interface TypeVariable\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<TypeVariable<This<?,?>>,Class<?>>\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                                       ^\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: interface not allowed here\n    [javac]     interface This<K, V> {}\n    [javac]     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: type argument This<?,?> is not within bounds of type-variable D\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                          ^\n    [javac]   where B,D are type-variables:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac]     D extends GenericDeclaration declared in interface TypeVariable\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<TypeVariable<This<?,?>>,Class<?>>\n    [javac]     Map<TypeVariable<This<?,?>>, Class<?>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                                                       ^\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_9": {
        "Chart_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         ts.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         ts.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries bar = foo.createCopy(new Day(1,12,2005),new Day(18,1,2006));\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries bar = foo.createCopy(new Day(1,12,2005),new Day(18,1,2006));\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:841: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         series.createCopy(new Day(1,12,2005), new Day(18,1,2006));\n    [javac]                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:841: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         series.createCopy(new Day(1,12,2005), new Day(18,1,2006));\n    [javac]                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n9.txt": "[error] StopIteration()",
        "Chart_9_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:847: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> ts.createCopy(new Day(1,12,2005), new Day(18,1,2006)));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:847: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> ts.createCopy(new Day(1,12,2005), new Day(18,1,2006)));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:847: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> series.createCopy(new Day(1,12,2005), new Day(18,1,2006)));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:847: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> series.createCopy(new Day(1,12,2005), new Day(18,1,2006)));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         ts.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         ts.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> {\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> {\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> ts.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006)));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> ts.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006)));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n7.txt": "[error] StopIteration()"
    },
    "Time_7": {
        "Time_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYear_2_2_bugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYear_2_2_bugAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYear_2_2_bugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYear_2_2_bugAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:614)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:614)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:614)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_5": {
        "Chart_5_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(0), 0.0); // Expect 3.0, not 2.0\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(0), 0.0); // Expect 3.0, not 2.0\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(3.0, series.getY(1), 0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(3.0, series.getY(1), 0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(1), 0.0); // should not have overwritten the first y value\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(1), 0.0); // should not have overwritten the first y value\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(0), 0.0); // expected 3.0 but gets 2.0 due to bug\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(0), 0.0); // expected 3.0 but gets 2.0 due to bug\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(3.0, series.getY(0), 0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(3.0, series.getY(0), 0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.0, series.getY(0), 0.0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.0, series.getY(0), 0.0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(2.0, series.getY(0), 0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(2.0, series.getY(0), 0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(1), 0.0); // ensures that the second addOrUpdate overwrote the first\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(1), 0.0); // ensures that the second addOrUpdate overwrote the first\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(2.0, series.getY(0), 0.0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(1), 0.0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(2.0, series.getY(0), 0.0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(3.0, series.getY(1), 0.0);\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(3.0, series.getY(1), 0); // check if addOrUpdate added instead of updating\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(3.0, series.getY(1), 0); // check if addOrUpdate added instead of updating\n    [javac]     ^\n    [javac]     method TestCase.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method TestCase.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method TestCase.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method TestCase.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_9": {
        "Lang_9_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:507: error: incompatible types: ParsePosition cannot be converted to Throwable\n    [javac]     } catch (ParsePosition exception) {\n    [javac]              ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:507: error: incompatible types: ParsePosition cannot be converted to Throwable\n    [javac]     } catch (ParsePosition exception) {\n    [javac]              ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"d'd'\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:506: error: package ParsePosition does not exist\n    [javac]     } catch (ParsePosition.BeyondEndOfStringException e) {\n    [javac]                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"d'd'\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:506: error: package ParsePosition does not exist\n    [javac]     } catch (ParsePosition.BeyondEndOfStringException e) {\n    [javac]                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: Date cannot be converted to boolean\n    [javac]     assertFalse(parser.parse(\"d3\", pos));\n    [javac]                             ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: Date cannot be converted to boolean\n    [javac]     assertFalse(parser.parse(\"d3\", pos));\n    [javac]                             ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n9.txt": "[error] JavaSyntaxError('')",
        "Lang_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser(format);\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:508: error: package ParsePosition does not exist\n    [javac]     } catch (ParsePosition.BeyondEndException e) {\n    [javac]                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser(format);\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:508: error: package ParsePosition does not exist\n    [javac]     } catch (ParsePosition.BeyondEndException e) {\n    [javac]                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:506: error: cannot find symbol\n    [javac]     } catch (ParsePositionException e) {\n    [javac]              ^\n    [javac]   symbol:   class ParsePositionException\n    [javac]   location: class FastDateParserTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:506: error: cannot find symbol\n    [javac]     } catch (ParsePositionException e) {\n    [javac]              ^\n    [javac]   symbol:   class ParsePositionException\n    [javac]   location: class FastDateParserTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(format);\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(format);\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"d'd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"d'd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser(\"d'd'\");\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         parser.setLenient(false);\n    [javac]               ^\n    [javac]   symbol:   method setLenient(boolean)\n    [javac]   location: variable parser of type FastDateParser\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser(\"d'd'\");\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         parser.setLenient(false);\n    [javac]               ^\n    [javac]   symbol:   method setLenient(boolean)\n    [javac]   location: variable parser of type FastDateParser\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_39": {
        "Lang_39_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testNullInReplacementListAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testNullInReplacementListAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testNullInReplacementListAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testNullInReplacementListAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testNullInReplacementListAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullPointerAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_39_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullPointerExceptionAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings[]!> but was:<Greetings[ World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_39_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testStringUtilsReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testStringUtilsReplaceEachNullPointerExceptionAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testStringUtilsReplaceEachNullPointerExceptionAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testStringUtilsReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testStringUtilsReplaceEachNullPointerExceptionAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_27": {
        "Lang_27_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithExponentIndicatorsAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberWithExponentIndicatorsAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithInvalidExponentAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithInvalidExponentAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberWithInvalidExponentAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithExponentIndicatorsAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberWithExponentIndicatorsAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_27_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentIndicatorsAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithExponentIndicatorsAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_27_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_27_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_27_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_27/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_27/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1222: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> NumberUtils.createNumber(\"1eE\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_27_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithEeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithEeAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithEeAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_13": {
        "Time_13_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisDisplayInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisDisplayInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestConverterManager::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestConverterManager::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisDisplayIncorrectlyInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisDisplayIncorrectlyInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_13/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_13/src/test/java/org/joda/time/convert/TestConverterManager.java:996: error: cannot find symbol\n    [javac]     assertEquals(-100, period.toMillis());\n    [javac]                              ^\n    [javac]   symbol:   method toMillis()\n    [javac]   location: variable period of type Period\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_13/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_13/src/test/java/org/joda/time/convert/TestConverterManager.java:996: error: cannot find symbol\n    [javac]     assertEquals(-100, period.toMillis());\n    [javac]                              ^\n    [javac]   symbol:   method toMillis()\n    [javac]   location: variable period of type Period\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Lang_34": {
        "Lang_34_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:227: error: unreported exception InterruptedException; must be caught or declared to be thrown\n    [javac]     Thread.sleep(100);\n    [javac]                 ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:227: error: unreported exception InterruptedException; must be caught or declared to be thrown\n    [javac]     Thread.sleep(100);\n    [javac]                 ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1014: error: lambda expressions are not supported in -source 6\n    [javac]     style1.appendSuper(m -> m.append(\"style1\", style2));\n    [javac]                          ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1014: error: lambda expressions are not supported in -source 6\n    [javac]     style1.appendSuper(m -> m.append(\"style1\", style2));\n    [javac]                          ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1015: error: cannot find symbol\n    [javac]     long initialMem = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                       ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1022: error: cannot find symbol\n    [javac]     long finalMem = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                     ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1015: error: cannot find symbol\n    [javac]     long initialMem = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                       ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1022: error: cannot find symbol\n    [javac]     long finalMem = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                     ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: cannot find symbol\n    [javac]     long memoryBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                         ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1014: error: method toString in class Object cannot be applied to given types;\n    [javac]         style.toString(new Object());\n    [javac]              ^\n    [javac]   required: no arguments\n    [javac]   found: Object\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: cannot find symbol\n    [javac]     long memoryAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                        ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: cannot find symbol\n    [javac]     long memoryBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                         ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1014: error: method toString in class Object cannot be applied to given types;\n    [javac]         style.toString(new Object());\n    [javac]              ^\n    [javac]   required: no arguments\n    [javac]   found: Object\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: cannot find symbol\n    [javac]     long memoryAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                        ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:132: error: method getShortClassName in class ToStringStyle cannot be applied to given types;\n    [javac]     style.getShortClassName();\n    [javac]          ^\n    [javac]   required: Class<?>\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:132: error: method getShortClassName in class ToStringStyle cannot be applied to given types;\n    [javac]     style.getShortClassName();\n    [javac]          ^\n    [javac]   required: Class<?>\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1015: error: cannot find symbol\n    [javac]     long initialMemory = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                          ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1020: error: cannot find symbol\n    [javac]     long afterFirstGc = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                         ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1024: error: cannot find symbol\n    [javac]     long afterSecondGc = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                          ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1015: error: cannot find symbol\n    [javac]     long initialMemory = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                          ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1020: error: cannot find symbol\n    [javac]     long afterFirstGc = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                         ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1024: error: cannot find symbol\n    [javac]     long afterSecondGc = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                          ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: method toString in class Object cannot be applied to given types;\n    [javac]     style.toString(new Object());\n    [javac]          ^\n    [javac]   required: no arguments\n    [javac]   found: Object\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: method toString in class Object cannot be applied to given types;\n    [javac]     style.toString(new Object());\n    [javac]          ^\n    [javac]   required: no arguments\n    [javac]   found: Object\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:131: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.NO_STYLE;\n    [javac]                                        ^\n    [javac]   symbol:   variable NO_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:132: error: cannot find symbol\n    [javac]     style.getShortPrefix();\n    [javac]          ^\n    [javac]   symbol:   method getShortPrefix()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:131: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.NO_STYLE;\n    [javac]                                        ^\n    [javac]   symbol:   variable NO_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:132: error: cannot find symbol\n    [javac]     style.getShortPrefix();\n    [javac]          ^\n    [javac]   symbol:   method getShortPrefix()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: cannot find symbol\n    [javac]     mockApplicationContext();\n    [javac]     ^\n    [javac]   symbol:   method mockApplicationContext()\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:226: error: cannot find symbol\n    [javac]     new MyObject();\n    [javac]         ^\n    [javac]   symbol:   class MyObject\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:229: error: cannot find symbol\n    [javac]     reloadWebApplication();\n    [javac]     ^\n    [javac]   symbol:   method reloadWebApplication()\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:232: error: cannot find symbol\n    [javac]     assertMemoryLeakDetected();\n    [javac]     ^\n    [javac]   symbol:   method assertMemoryLeakDetected()\n    [javac]   location: class StopWatchTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: cannot find symbol\n    [javac]     mockApplicationContext();\n    [javac]     ^\n    [javac]   symbol:   method mockApplicationContext()\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:226: error: cannot find symbol\n    [javac]     new MyObject();\n    [javac]         ^\n    [javac]   symbol:   class MyObject\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:229: error: cannot find symbol\n    [javac]     reloadWebApplication();\n    [javac]     ^\n    [javac]   symbol:   method reloadWebApplication()\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:232: error: cannot find symbol\n    [javac]     assertMemoryLeakDetected();\n    [javac]     ^\n    [javac]   symbol:   method assertMemoryLeakDetected()\n    [javac]   location: class StopWatchTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Chart_12": {
        "Chart_12_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: PieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:177: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getListenerList());\n    [javac]                                 ^\n    [javac]   symbol:   method getListenerList()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: PieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:177: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getListenerList());\n    [javac]                                 ^\n    [javac]   symbol:   method getListenerList()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n6.txt": "[error] JavaSyntaxError('')",
        "Chart_12_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1042: error: method createMultiplePieChart in class ChartFactory cannot be applied to given types;\n    [javac]     JFreeChart chart = ChartFactory.createMultiplePieChart(\"Title\", new DefaultPieDataset(), true, true, false);\n    [javac]                                    ^\n    [javac]   required: String,CategoryDataset,TableOrder,boolean,boolean,boolean\n    [javac]   found: String,DefaultPieDataset,boolean,boolean,boolean\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1043: error: cannot find symbol\n    [javac]     chart.getPlot().setDataset(new DefaultPieDataset());\n    [javac]                    ^\n    [javac]   symbol:   method setDataset(DefaultPieDataset)\n    [javac]   location: class Plot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: cannot find symbol\n    [javac]     assertFalse(chart.getPlot().getDataset().getListenerList().getListenerCount() > 0);\n    [javac]                                ^\n    [javac]   symbol:   method getDataset()\n    [javac]   location: class Plot\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1042: error: method createMultiplePieChart in class ChartFactory cannot be applied to given types;\n    [javac]     JFreeChart chart = ChartFactory.createMultiplePieChart(\"Title\", new DefaultPieDataset(), true, true, false);\n    [javac]                                    ^\n    [javac]   required: String,CategoryDataset,TableOrder,boolean,boolean,boolean\n    [javac]   found: String,DefaultPieDataset,boolean,boolean,boolean\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1043: error: cannot find symbol\n    [javac]     chart.getPlot().setDataset(new DefaultPieDataset());\n    [javac]                    ^\n    [javac]   symbol:   method setDataset(DefaultPieDataset)\n    [javac]   location: class Plot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: cannot find symbol\n    [javac]     assertFalse(chart.getPlot().getDataset().getListenerList().getListenerCount() > 0);\n    [javac]                                ^\n    [javac]   symbol:   method getDataset()\n    [javac]   location: class Plot\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getListeners().contains(plot.getDatasetObserver()));\n    [javac]                                                               ^\n    [javac]   symbol:   method getDatasetObserver()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getListeners().contains(plot.getDatasetObserver()));\n    [javac]                                  ^\n    [javac]   symbol:   method getListeners()\n    [javac]   location: interface CategoryDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getListeners().contains(plot.getDatasetObserver()));\n    [javac]                                                               ^\n    [javac]   symbol:   method getDatasetObserver()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getListeners().contains(plot.getDatasetObserver()));\n    [javac]                                  ^\n    [javac]   symbol:   method getListeners()\n    [javac]   location: interface CategoryDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: no suitable constructor found for JFreeChart(String,Font,PlotOrientation,boolean,boolean,boolean)\n    [javac]     JFreeChart chart = new JFreeChart(\"Test Chart\", JFreeChart.DEFAULT_TITLE_FONT, orient, true, true, false);\n    [javac]                        ^\n    [javac]     constructor JFreeChart.JFreeChart(Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Font,Plot,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1046: error: cannot find symbol\n    [javac]     chart.addSubplot(plot);\n    [javac]          ^\n    [javac]   symbol:   method addSubplot(PiePlot)\n    [javac]   location: variable chart of type JFreeChart\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1050: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getIndexCount() > 0);\n    [javac]                                  ^\n    [javac]   symbol:   method getIndexCount()\n    [javac]   location: interface PieDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: no suitable constructor found for JFreeChart(String,Font,PlotOrientation,boolean,boolean,boolean)\n    [javac]     JFreeChart chart = new JFreeChart(\"Test Chart\", JFreeChart.DEFAULT_TITLE_FONT, orient, true, true, false);\n    [javac]                        ^\n    [javac]     constructor JFreeChart.JFreeChart(Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Font,Plot,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1046: error: cannot find symbol\n    [javac]     chart.addSubplot(plot);\n    [javac]          ^\n    [javac]   symbol:   method addSubplot(PiePlot)\n    [javac]   location: variable chart of type JFreeChart\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1050: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getIndexCount() > 0);\n    [javac]                                  ^\n    [javac]   symbol:   method getIndexCount()\n    [javac]   location: interface PieDataset\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:236: error: cannot find symbol\n    [javac]     Dataset dataset = mock(Dataset.class);\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class XYStepRendererTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:236: error: cannot find symbol\n    [javac]     Dataset dataset = mock(Dataset.class);\n    [javac]                            ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class XYStepRendererTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:236: error: cannot find symbol\n    [javac]     Dataset dataset = mock(Dataset.class);\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class XYStepRendererTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYStepRendererTests.java:236: error: cannot find symbol\n    [javac]     Dataset dataset = mock(Dataset.class);\n    [javac]                            ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class XYStepRendererTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: PieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:177: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getUpdateListener());\n    [javac]                                 ^\n    [javac]   symbol:   method getUpdateListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: PieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:177: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getUpdateListener());\n    [javac]                                 ^\n    [javac]   symbol:   method getUpdateListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:559: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class BoxAndWhiskerRendererTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:561: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getIndexedPropertyChangePublishers().get(0));\n    [javac]                                 ^\n    [javac]   symbol:   method getIndexedPropertyChangePublishers()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:559: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class BoxAndWhiskerRendererTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:561: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getIndexedPropertyChangePublishers().get(0));\n    [javac]                                 ^\n    [javac]   symbol:   method getIndexedPropertyChangePublishers()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: cannot find symbol\n    [javac]     MultiplePiePlot mpp = new MultiplePiePlot(orientation, createLegend, drawLabels);\n    [javac]     ^\n    [javac]   symbol:   class MultiplePiePlot\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: cannot find symbol\n    [javac]     MultiplePiePlot mpp = new MultiplePiePlot(orientation, createLegend, drawLabels);\n    [javac]                               ^\n    [javac]   symbol:   class MultiplePiePlot\n    [javac]   location: class JFreeChartTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: cannot find symbol\n    [javac]     MultiplePiePlot mpp = new MultiplePiePlot(orientation, createLegend, drawLabels);\n    [javac]     ^\n    [javac]   symbol:   class MultiplePiePlot\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: cannot find symbol\n    [javac]     MultiplePiePlot mpp = new MultiplePiePlot(orientation, createLegend, drawLabels);\n    [javac]                               ^\n    [javac]   symbol:   class MultiplePiePlot\n    [javac]   location: class JFreeChartTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: cannot find symbol\n    [javac] private Dataset createDataset() {\n    [javac]         ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:592: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getListeners().iterator().next());\n    [javac]                                 ^\n    [javac]   symbol:   method getListeners()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: cannot find symbol\n    [javac] private Dataset createDataset() {\n    [javac]         ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:592: error: cannot find symbol\n    [javac]     assertNull(plot.getDataset().getListeners().iterator().next());\n    [javac]                                 ^\n    [javac]   symbol:   method getListeners()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_14": {
        "Time_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMonthDay_Basics::testISOLeapDatePlusDaysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMonthDay_Basics::testISOLeapDatePlusDaysAutoGen\njunit.framework.ComparisonFailure: expected:<-[]02-29> but was:<-[-]02-29>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMonthDay_Basics::testISOLeapDatePlusDaysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMonthDay_Basics::testISOLeapDatePlusDaysAutoGen\njunit.framework.ComparisonFailure: expected:<-[]02-29> but was:<-[-]02-29>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_14_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMonthDay_Basics::testIssue151AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMonthDay_Basics::testIssue151AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestMonthDay_Basics.testIssue151AutoGen(TestMonthDay_Basics.java:663)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMonthDay_Basics::testIssue151AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMonthDay_Basics::testIssue151AutoGen\norg.joda.time.IllegalFieldValueException: Value 31 for dayOfMonth must not be larger than 29\n\tat org.joda.time.chrono.BaseChronology.validate(BaseChronology.java:210)\n\tat org.joda.time.base.BasePartial.<init>(BasePartial.java:183)\n\tat org.joda.time.MonthDay.<init>(MonthDay.java:352)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMonthDay_Basics::testIssue151AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMonthDay_Basics::testIssue151AutoGen\norg.joda.time.IllegalFieldValueException: Value 31 for dayOfMonth must not be larger than 29\n\tat org.joda.time.chrono.BaseChronology.validate(BaseChronology.java:210)\n\tat org.joda.time.base.BasePartial.<init>(BasePartial.java:183)\n\tat org.joda.time.MonthDay.<init>(MonthDay.java:352)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_12": {
        "Time_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Constructors::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Constructors::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2020> but was:<2020>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Constructors::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Constructors::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2020> but was:<-2019>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Constructors::testCheckCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Constructors::testCheckCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<2020> but was:<-2019>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac]     LocalDate date = LocalDate.from(cal);\n    [javac]                               ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac]     assertEquals(1, date.getEra().getValue()); // should fail if ERA not set correctly\n    [javac]                                  ^\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac]     LocalDate date = LocalDate.from(cal);\n    [javac]                               ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac]     assertEquals(1, date.getEra().getValue()); // should fail if ERA not set correctly\n    [javac]                                  ^\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_12_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac]     LocalDate localDate = LocalDate.from(cal);\n    [javac]                                    ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac]     assertEquals(1, localDate.getEra().getValue());\n    [javac]                                       ^\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac]     LocalDate localDate = LocalDate.from(cal);\n    [javac]                                    ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac]     assertEquals(1, localDate.getEra().getValue());\n    [javac]                                       ^\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Constructors.java:550: error: cannot find symbol\n    [javac]     cal.set(Calendar.ERA, Calendar.BC);\n    [javac]                                   ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class Calendar\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Constructors.java:551: error: cannot find symbol\n    [javac]     LocalDate date = LocalDate.from(cal);\n    [javac]                               ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Constructors.java:550: error: cannot find symbol\n    [javac]     cal.set(Calendar.ERA, Calendar.BC);\n    [javac]                                   ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class Calendar\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Constructors.java:551: error: cannot find symbol\n    [javac]     LocalDate date = LocalDate.from(cal);\n    [javac]                               ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testCalendarEraAutoGen\njunit.framework.ComparisonFailure: expected:<[AD]> but was:<[2020-01-01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testCalendarEraAutoGen\njunit.framework.ComparisonFailure: expected:<[AD]> but was:<[2020-01-01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac] \t\tLocalDate date = LocalDate.from(cal);\n    [javac] \t\t                          ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac] \t\tassertEquals(1, date.getEra().getValue()); // Assuming Gregorian calendar in use\n    [javac] \t\t                             ^\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: cannot find symbol\n    [javac] \t\tLocalDate date = LocalDate.from(cal);\n    [javac] \t\t                          ^\n    [javac]   symbol:   method from(Calendar)\n    [javac]   location: class LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac] \t\tassertEquals(1, date.getEra().getValue()); // Assuming Gregorian calendar in use\n    [javac] \t\t                             ^\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac]     assertEquals(1, date.getEra().getValue());\n    [javac]                                  ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1131: error: int cannot be dereferenced\n    [javac]     assertEquals(1, date.getEra().getValue());\n    [javac]                                  ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_12_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1129: error: cannot find symbol\n    [javac]   cal.set(Calendar.ERA, Calendar.BC);\n    [javac]                                 ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class Calendar\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1129: error: cannot find symbol\n    [javac]   cal.set(Calendar.ERA, Calendar.BC);\n    [javac]                                 ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class Calendar\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Constructors.java:550: error: cannot find symbol\n    [javac]     cal.set(Calendar.ERA, Calendar.BC);\n    [javac]                                   ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class Calendar\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Constructors.java:550: error: cannot find symbol\n    [javac]     cal.set(Calendar.ERA, Calendar.BC);\n    [javac]                                   ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class Calendar\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Lang_21": {
        "Lang_21_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeFailureAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testIsSameLocalTimeBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_19": {
        "Time_19_n8.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:')",
        "Time_19_n3.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:00')",
        "Time_19_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n7.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:00')",
        "Time_19_n10.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:00')",
        "Time_19_n2.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:00')",
        "Time_19_n6.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:00')",
        "Time_19_n1.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:00')",
        "Time_19_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDSTAmbiguityAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDSTAmbiguityAutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n9.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 7: assertEquals(\"2011-10-30T03:59:00')"
    },
    "Lang_26": {
        "Lang_26_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(\"FastDateFormat and SimpleDateFormat should not have the same output\", fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(\"FastDateFormat and SimpleDateFormat should not have the same output\", fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(sdf.format(d), fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(sdf.format(d), fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(sdf.format(d), fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(sdf.format(d), fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(sdf.format(d), fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(sdf.format(d), fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:334: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:334: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:336: error: cannot find symbol\n    [javac]     assertNotEquals(fdf.format(d), sdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekLocaleAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [01]> but was:<fredag, week [53]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_11": {
        "Chart_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java:320: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YIntervalSeriesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java:321: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YIntervalSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java:320: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YIntervalSeriesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YIntervalSeriesTests.java:321: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YIntervalSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:138: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:138: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.chart.renderer.junit.AbstractRendererTests::testIssue868AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.chart.renderer.junit.AbstractRendererTests::testIssue868AutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.chart.renderer.junit.AbstractRendererTests::testIssue868AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.chart.renderer.junit.AbstractRendererTests::testIssue868AutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:208: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class MatrixSeriesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:213: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class MatrixSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:208: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class MatrixSeriesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:213: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class MatrixSeriesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:139: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:139: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:138: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:138: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:139: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:139: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:247: error: incompatible types: GeneralPath cannot be converted to int\n    [javac]     GeneralPath path2 = new GeneralPath(path1, true); // clone with same winding rule\n    [javac]                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:247: error: incompatible types: GeneralPath cannot be converted to int\n    [javac]     GeneralPath path2 = new GeneralPath(path1, true); // clone with same winding rule\n    [javac]                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:138: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:138: error: cannot find symbol\n    [javac]     path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]     path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                          ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:139: error: cannot find symbol\n    [javac]   path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                        ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]   path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                        ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:139: error: cannot find symbol\n    [javac]   path1.setWindingRule(Path2D.WIND_EVEN_ODD);\n    [javac]                        ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/YWithXIntervalTests.java:140: error: cannot find symbol\n    [javac]   path2.setWindingRule(Path2D.WIND_NON_ZERO);\n    [javac]                        ^\n    [javac]   symbol:   variable Path2D\n    [javac]   location: class YWithXIntervalTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_37": {
        "Lang_37_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:588)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_37/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_37/src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java:587: error: lambda expressions are not supported in -source 6\n    [javac]   assertThrows(IllegalArgumentException.class, () -> ArrayUtils.addAll(intArray, longArray));\n    [javac]                                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_37/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_37/src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java:587: error: lambda expressions are not supported in -source 6\n    [javac]   assertThrows(IllegalArgumentException.class, () -> ArrayUtils.addAll(intArray, longArray));\n    [javac]                                                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_37_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesAddAllAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesAddAllAutoGen(ArrayUtilsAddTest.java:587)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesAddAllAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesAddAllAutoGen(ArrayUtilsAddTest.java:587)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayUtilsAddAllAutoGen(ArrayUtilsAddTest.java:589)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayAddAllAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayAddAllAutoGen(ArrayUtilsAddTest.java:587)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayAddAllAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayAddAllAutoGen(ArrayUtilsAddTest.java:587)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedArrayTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedArrayTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedArrayTypesAutoGen(ArrayUtilsAddTest.java:587)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedArrayTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedArrayTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedArrayTypesAutoGen(ArrayUtilsAddTest.java:587)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayUtilsAddAllAutoGen(ArrayUtilsAddTest.java:585)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayUtilsAddAllAutoGen(ArrayUtilsAddTest.java:585)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayUtilsAddAllAutoGen(ArrayUtilsAddTest.java:587)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayUtilsAddAllAutoGen(ArrayUtilsAddTest.java:587)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayUtilsAddAllAutoGen(ArrayUtilsAddTest.java:587)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testMixedTypesArrayUtilsAddAllAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testMixedTypesArrayUtilsAddAllAutoGen(ArrayUtilsAddTest.java:587)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_22": {
        "Lang_22_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: method greatestCommonDivisor in class Fraction cannot be applied to given types;\n    [javac]     assertEquals(Integer.MIN_VALUE, f.greatestCommonDivisor(2));\n    [javac]                                      ^\n    [javac]   required: int,int\n    [javac]   found: int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: method greatestCommonDivisor in class Fraction cannot be applied to given types;\n    [javac]     assertEquals(Integer.MIN_VALUE, f.greatestCommonDivisor(2));\n    [javac]                                      ^\n    [javac]   required: int,int\n    [javac]   found: int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testIntegerMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testIntegerMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<1073741824>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testIntegerMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testIntegerMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-2147483648> but was:<-2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testMinValueGCDAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testMinValueGCDAutoGen\njunit.framework.AssertionFailedError: expected:<-2> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGCDOfMinValueAndPowerOfTwoAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGCDOfMinValueAndPowerOfTwoAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<1073741824>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGCDOfMinValueAndPowerOfTwoAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGCDOfMinValueAndPowerOfTwoAutoGen\njunit.framework.AssertionFailedError: expected:<-2147483648> but was:<-2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n7.txt": "[error] LexerError('Could not process token at \"`\", line 1: `public void testGCDofMIN_VALUE_and_2k() {')",
        "Lang_22_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1 << 30);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1 << 30);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testBug12345AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testBug12345AutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<1073741824>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testBug12345AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testBug12345AutoGen\njunit.framework.AssertionFailedError: expected:<-2147483648> but was:<-2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1 << 30);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1 << 30);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGetReducedFraction_Integer_MIN_VALUE_2kAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGetReducedFraction_Integer_MIN_VALUE_2kAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGetReducedFraction_Integer_MIN_VALUE_2kAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGetReducedFraction_Integer_MIN_VALUE_2kAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2097152>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: method greatestCommonDivisor in class Fraction cannot be applied to given types;\n    [javac]     int gcd = f.greatestCommonDivisor(2);\n    [javac]                ^\n    [javac]   required: int,int\n    [javac]   found: int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 1);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: method greatestCommonDivisor in class Fraction cannot be applied to given types;\n    [javac]     int gcd = f.greatestCommonDivisor(2);\n    [javac]                ^\n    [javac]   required: int,int\n    [javac]   found: int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_10": {
        "Lang_10_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]                  new FastDateParser().parse(\"2022-01-01 \"));\n    [javac]                  ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]                  new FastDateParser().parse(\"2022-01-01 \"));\n    [javac]                  ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:464: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:464: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ParseException.class, () -> parser.parse(dateString));\n    [javac]                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(ParseException.class, () -> parser.parse(dateString));\n    [javac]                                           ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:460: error: package ParsePosition does not exist\n    [javac]     } catch (ParsePosition.BeyondEndException e) {\n    [javac]                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:460: error: package ParsePosition does not exist\n    [javac]     } catch (ParsePosition.BeyondEndException e) {\n    [javac]                           ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:461: error: cannot find symbol\n    [javac]     } catch (ParsePositionException e) {\n    [javac]              ^\n    [javac]   symbol:   class ParsePositionException\n    [javac]   location: class FastDateParserTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:461: error: cannot find symbol\n    [javac]     } catch (ParsePositionException e) {\n    [javac]              ^\n    [javac]   symbol:   class ParsePositionException\n    [javac]   location: class FastDateParserTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java:128: error: cannot find symbol\n    [javac]     DateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormatter\n    [javac]   location: class TripleTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java:128: error: cannot find symbol\n    [javac]     DateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n    [javac]                                   ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class TripleTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java:128: error: cannot find symbol\n    [javac]     DateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormatter\n    [javac]   location: class TripleTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java:128: error: cannot find symbol\n    [javac]     DateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n    [javac]                                   ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class TripleTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:456: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_14": {
        "Lang_14_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: <anonymous org.apache.commons.lang3.ArrayUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name() {\n    [javac]                                                                              ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: <anonymous org.apache.commons.lang3.ArrayUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name() {\n    [javac]                                                                              ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]   Name name = factory.createSimpleName(\"test\");\n    [javac]   ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]   Name name = factory.createSimpleName(\"test\");\n    [javac]               ^\n    [javac]   symbol:   variable factory\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]   Name name = factory.createSimpleName(\"test\");\n    [javac]   ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]   Name name = factory.createSimpleName(\"test\");\n    [javac]               ^\n    [javac]   symbol:   variable factory\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2120: error: <anonymous org.apache.commons.lang3.StringUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name() {\n    [javac]                                                                              ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2120: error: <anonymous org.apache.commons.lang3.StringUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name() {\n    [javac]                                                                              ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2120: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = factory.createSimpleName(\"test\");\n    [javac]                                          ^\n    [javac]   symbol:   variable factory\n    [javac]   location: class StringUtilsTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2120: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = factory.createSimpleName(\"test\");\n    [javac]                                          ^\n    [javac]   symbol:   variable factory\n    [javac]   location: class StringUtilsTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new SimpleName(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new SimpleName(\"test\");\n    [javac]                     ^\n    [javac]   symbol:   class SimpleName\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new SimpleName(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new SimpleName(\"test\");\n    [javac]                     ^\n    [javac]   symbol:   class SimpleName\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = mock(Name.class);\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = mock(Name.class);\n    [javac]                      ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = mock(Name.class);\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = mock(Name.class);\n    [javac]                      ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: <anonymous org.apache.commons.lang3.ArrayUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name() {\n    [javac]                                                                              ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: <anonymous org.apache.commons.lang3.ArrayUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name() {\n    [javac]                                                                              ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = javax.lang.model.element.ElementUtils.nameOf(\"foo\");\n    [javac]                                                                  ^\n    [javac]   symbol:   class ElementUtils\n    [javac]   location: package javax.lang.model.element\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = javax.lang.model.element.ElementUtils.nameOf(\"foo\");\n    [javac]                                                                  ^\n    [javac]   symbol:   class ElementUtils\n    [javac]   location: package javax.lang.model.element\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name() {\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name() {\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:836: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name() {\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = new Name() {\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:836: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = factory.createName(\"test\");\n    [javac]                                          ^\n    [javac]   symbol:   variable factory\n    [javac]   location: class ArrayUtilsTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = factory.createName(\"test\");\n    [javac]                                          ^\n    [javac]   symbol:   variable factory\n    [javac]   location: class ArrayUtilsTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_36": {
        "Lang_36_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalPointAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError: NumberUtils.isNumber() should return true for valid number with trailing decimal\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_30": {
        "Lang_30_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_23": {
        "Lang_23_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.ExtendedMessageFormatTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.ExtendedMessageFormatTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError: expected:<java.text.MessageFormat@364492> but was:<org.apache.commons.lang3.text.ExtendedMessageFormat@364492>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.ExtendedMessageFormatTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.ExtendedMessageFormatTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError: expected:<java.text.MessageFormat@364492> but was:<org.apache.commons.lang3.text.ExtendedMessageFormat@cbedaca4>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:400: error: cannot find symbol\n    [javac]     assertNotEquals(mf1, mf2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(MessageFormat,MessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:400: error: cannot find symbol\n    [javac]     assertNotEquals(mf1, mf2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(MessageFormat,MessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrBuilderTest::testEqualsMethodOverrideAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrBuilderTest::testEqualsMethodOverrideAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrBuilderTest::testEqualsMethodOverrideAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrBuilderTest::testEqualsMethodOverrideAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:837: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class StrTokenizerTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:837: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class StrTokenizerTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_16": {
        "Lang_16_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for 0X1234\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for 0X1234\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen\njava.lang.NumberFormatException: For input string: \"0x1234\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:652)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:983)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexAutoGen\njava.lang.NumberFormatException: For input string: \"0x1234\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:652)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:983)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for upper case hex\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testUpperCaseHexHandlingAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for upper case hex\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testUpperCaseHexHandlingAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n6.txt": "[error] LexerError('Could not process token at \"`\", line 1: `public void testUpperCaseHex() {')",
        "Lang_16_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n2.txt": "[error] LexerError('Could not process token at \"`\", line 1: `public void testUpperCaseHexHandling() {')"
    },
    "Time_3": {
        "Time_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDays0ChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDays0ChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesDateAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:00:00.000+0[1]:00> but was:<...10-30T02:00:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesDateAutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroOnDSTTransitionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroOnDSTTransitionAutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen\njunit.framework.AssertionFailedError: expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDays0OnDSTTransitionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDays0OnDSTTransitionAutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_32": {
        "Lang_32_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java:143: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java:143: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:574: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:578: error: cannot find symbol\n    [javac]     long usedMemoryBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                             ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class DurationFormatUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:585: error: cannot find symbol\n    [javac]     long usedMemoryAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                            ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class DurationFormatUtilsTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:574: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:578: error: cannot find symbol\n    [javac]     long usedMemoryBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                             ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class DurationFormatUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:585: error: cannot find symbol\n    [javac]     long usedMemoryAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                            ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class DurationFormatUtilsTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1016: error: cannot find symbol\n    [javac]     assertEquals(0, ((ReferenceQueue<ToStringStyle>) ToStringStyle.class.getDeclaredField(\"styleQueue\").get(null)).poll(), \"ThreadLocal was not removed\");\n    [javac]                       ^\n    [javac]   symbol:   class ReferenceQueue\n    [javac]   location: class ToStringBuilderTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1016: error: cannot find symbol\n    [javac]     assertEquals(0, ((ReferenceQueue<ToStringStyle>) ToStringStyle.class.getDeclaredField(\"styleQueue\").get(null)).poll(), \"ThreadLocal was not removed\");\n    [javac]                       ^\n    [javac]   symbol:   class ReferenceQueue\n    [javac]   location: class ToStringBuilderTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:132: error: method getShortClassName in class ToStringStyle cannot be applied to given types;\n    [javac]     style.getShortClassName();\n    [javac]          ^\n    [javac]   required: Class<?>\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:132: error: method getShortClassName in class ToStringStyle cannot be applied to given types;\n    [javac]     style.getShortClassName();\n    [javac]          ^\n    [javac]   required: Class<?>\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: cannot find symbol\n    [javac]     long memoryBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                         ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: cannot find symbol\n    [javac]     long memoryAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                        ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: cannot find symbol\n    [javac]     long memoryBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                         ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: cannot find symbol\n    [javac]     long memoryAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                        ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:224: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:224: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: cannot find symbol\n    [javac]     long memBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                      ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: no suitable method found for append(String,<null>)\n    [javac]     style.append(\"test\", null);\n    [javac]          ^\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1013: error: cannot find symbol\n    [javac]     long memAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                     ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: cannot find symbol\n    [javac]     long memBefore = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                      ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: no suitable method found for append(String,<null>)\n    [javac]     style.append(\"test\", null);\n    [javac]          ^\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1013: error: cannot find symbol\n    [javac]     long memAfter = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n    [javac]                     ^\n    [javac]   symbol:   variable ManagementFactory\n    [javac]   location: class ToStringBuilderTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:148: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java:148: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_35": {
        "Lang_35_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen\njunit.framework.AssertionFailedError: Did not throw IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullArrayAddAutoGen(StrTokenizerTest.java:836)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen\njunit.framework.AssertionFailedError: Did not throw IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullArrayAddAutoGen(StrTokenizerTest.java:836)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullArrayAddAutoGen(StrTokenizerTest.java:835)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullArrayAddAutoGen(StrTokenizerTest.java:835)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNullArrayAndElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNullArrayAndElementAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNullArrayAndElementAutoGen(ClassUtilsTest.java:806)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullParametersAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullParametersAutoGen(StrTokenizerTest.java:835)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullParametersAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullParametersAutoGen(StrTokenizerTest.java:835)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testNullParametersAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.ArrayUtilsTest.testNullParametersAutoGen(ArrayUtilsTest.java:2607)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_35_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNullArrayNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNullArrayNullElementAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNullArrayNullElementAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddNullElementAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullArrayAddNullElementAutoGen(StrTokenizerTest.java:835)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testNullArrayAddNullElementAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.text.StrTokenizerTest.testNullArrayAddNullElementAutoGen(StrTokenizerTest.java:835)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testNullArrayNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testNullArrayNullElementAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testNullArrayNullElementAutoGen(DateUtilsTest.java:1568)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullParamsFailsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullParamsFailsAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddNullParamsFailsAutoGen(ClassUtilsTest.java:806)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddNullArrayAndNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddNullArrayAndNullElementAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddNullArrayAndNullElementAutoGen(ClassUtilsTest.java:806)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_9": {
        "Time_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: incompatible types: DateTime cannot be converted to long\n    [javac]     assertEquals(23, tz.getStandardOffset(new DateTime(2022, 11, 7, 23, 59, 59, 999, DateTimeZone.UTC)));\n    [javac]                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: incompatible types: DateTime cannot be converted to long\n    [javac]     assertEquals(23, tz.getStandardOffset(new DateTime(2022, 11, 7, 23, 59, 59, 999, DateTimeZone.UTC)));\n    [javac]                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestStringConverter::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestStringConverter::testMaxOffsetAutoGen\norg.joda.time.IllegalFieldValueException: Value 24 for hourOfDay must be in the range [0,23]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:172)\n\tat org.joda.time.chrono.GregorianChronology.getDateTimeMillis(GregorianChronology.java:45)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestStringConverter::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestStringConverter::testMaxOffsetAutoGen\norg.joda.time.IllegalFieldValueException: Value 24 for hourOfDay must be in the range [0,23]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:172)\n\tat org.joda.time.chrono.GregorianChronology.getDateTimeMillis(GregorianChronology.java:45)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testMaxOffsetAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'PST' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:223)\n\tat org.joda.time.TestLocalDate_Basics.testMaxOffsetAutoGen(TestLocalDate_Basics.java:1128)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testMaxOffsetAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'PST' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.TestLocalDate_Basics.testMaxOffsetAutoGen(TestLocalDate_Basics.java:1128)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:918: error: cannot find symbol\n    [javac]     assertEquals(23, zone.getMaximumOffset(2022, 7, 1).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:919: error: cannot find symbol\n    [javac]     assertEquals(23, zone.getMaximumOffset(2022, 7, 1, 23, 59, 59).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:920: error: cannot find symbol\n    [javac]     assertEquals(23, zone.getMaximumOffset(2022, 7, 1, 23, 59, 59, 999).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:921: error: cannot find symbol\n    [javac]     assertEquals(24, zone.getMaximumOffset(2022, 7, 1, 24).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:918: error: cannot find symbol\n    [javac]     assertEquals(23, zone.getMaximumOffset(2022, 7, 1).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:919: error: cannot find symbol\n    [javac]     assertEquals(23, zone.getMaximumOffset(2022, 7, 1, 23, 59, 59).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:920: error: cannot find symbol\n    [javac]     assertEquals(23, zone.getMaximumOffset(2022, 7, 1, 23, 59, 59, 999).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int,int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Basics.java:921: error: cannot find symbol\n    [javac]     assertEquals(24, zone.getMaximumOffset(2022, 7, 1, 24).getHours());\n    [javac]                          ^\n    [javac]   symbol:   method getMaximumOffset(int,int,int,int)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: int cannot be dereferenced\n    [javac]     assertEquals(23, zone.getStandardOffset(2000).getHours());\n    [javac]                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1343: error: int cannot be dereferenced\n    [javac]     assertEquals(59, zone.getStandardOffset(2000).getMinutesOfHour());\n    [javac]                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1344: error: int cannot be dereferenced\n    [javac]     assertEquals(59, zone.getStandardOffset(2000).getSecondsOfMinute());\n    [javac]                                                  ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: int cannot be dereferenced\n    [javac]     assertEquals(23, zone.getStandardOffset(2000).getHours());\n    [javac]                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1343: error: int cannot be dereferenced\n    [javac]     assertEquals(59, zone.getStandardOffset(2000).getMinutesOfHour());\n    [javac]                                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1344: error: int cannot be dereferenced\n    [javac]     assertEquals(59, zone.getStandardOffset(2000).getSecondsOfMinute());\n    [javac]                                                  ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n6.txt": "[error] LexerError('Could not process token at \"`\", line 1: `public void testMaxOffset() {')",
        "Time_9_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Basics::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Basics::testMaxOffsetAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'PST' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:223)\n\tat org.joda.time.TestTimeOfDay_Basics.testMaxOffsetAutoGen(TestTimeOfDay_Basics.java:917)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Basics::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Basics::testMaxOffsetAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'PST' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.TestTimeOfDay_Basics.testMaxOffsetAutoGen(TestTimeOfDay_Basics.java:917)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     ZoneRulesBuilder zrb = ZoneRulesBuilder.standardDateRules();\n    [javac]     ^\n    [javac]   symbol:   class ZoneRulesBuilder\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     ZoneRulesBuilder zrb = ZoneRulesBuilder.standardDateRules();\n    [javac]                            ^\n    [javac]   symbol:   variable ZoneRulesBuilder\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1052: error: cannot find symbol\n    [javac]     ZonedDateTimezdt = zrb.setFixedOffsetDateRule(12, 0, \"UTC+01:00\").toDateTime(Instant.ofEpochMilli(1631188399999L)).withZoneSameInstant(DateTimeZone.forID(\"UTC\"));\n    [javac]     ^\n    [javac]   symbol:   variable ZonedDateTimezdt\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1052: error: cannot find symbol\n    [javac]     ZonedDateTimezdt = zrb.setFixedOffsetDateRule(12, 0, \"UTC+01:00\").toDateTime(Instant.ofEpochMilli(1631188399999L)).withZoneSameInstant(DateTimeZone.forID(\"UTC\"));\n    [javac]                                                                                         ^\n    [javac]   symbol:   method ofEpochMilli(long)\n    [javac]   location: class Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]     assertEquals(12, zdt.getZone().getOffset(zdt).getTotalSeconds() / 3600);\n    [javac]                                              ^\n    [javac]   symbol:   variable zdt\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]     assertEquals(12, zdt.getZone().getOffset(zdt).getTotalSeconds() / 3600);\n    [javac]                      ^\n    [javac]   symbol:   variable zdt\n    [javac]   location: class TestDateTimeZone\n    [javac] 6 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     ZoneRulesBuilder zrb = ZoneRulesBuilder.standardDateRules();\n    [javac]     ^\n    [javac]   symbol:   class ZoneRulesBuilder\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     ZoneRulesBuilder zrb = ZoneRulesBuilder.standardDateRules();\n    [javac]                            ^\n    [javac]   symbol:   variable ZoneRulesBuilder\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1052: error: cannot find symbol\n    [javac]     ZonedDateTimezdt = zrb.setFixedOffsetDateRule(12, 0, \"UTC+01:00\").toDateTime(Instant.ofEpochMilli(1631188399999L)).withZoneSameInstant(DateTimeZone.forID(\"UTC\"));\n    [javac]     ^\n    [javac]   symbol:   variable ZonedDateTimezdt\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1052: error: cannot find symbol\n    [javac]     ZonedDateTimezdt = zrb.setFixedOffsetDateRule(12, 0, \"UTC+01:00\").toDateTime(Instant.ofEpochMilli(1631188399999L)).withZoneSameInstant(DateTimeZone.forID(\"UTC\"));\n    [javac]                                                                                         ^\n    [javac]   symbol:   method ofEpochMilli(long)\n    [javac]   location: class Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]     assertEquals(12, zdt.getZone().getOffset(zdt).getTotalSeconds() / 3600);\n    [javac]                                              ^\n    [javac]   symbol:   variable zdt\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]     assertEquals(12, zdt.getZone().getOffset(zdt).getTotalSeconds() / 3600);\n    [javac]                      ^\n    [javac]   symbol:   variable zdt\n    [javac]   location: class TestDateTimeZone\n    [javac] 6 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1343: error: cannot find symbol\n    [javac]     assertTrue(\"Max offset not applied\", dt.isMaxOffset());\n    [javac]                                            ^\n    [javac]   symbol:   method isMaxOffset()\n    [javac]   location: variable dt of type DateTime\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1343: error: cannot find symbol\n    [javac]     assertTrue(\"Max offset not applied\", dt.isMaxOffset());\n    [javac]                                            ^\n    [javac]   symbol:   method isMaxOffset()\n    [javac]   location: variable dt of type DateTime\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Properties.java:739: error: underscores in literals are not supported in -source 6\n    [javac]     assertEquals(-18_000_000, maxOffset); // expected max offset\n    [javac]                   ^\n    [javac]   (use -source 7 or higher to enable underscores in literals)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestTimeOfDay_Properties.java:739: error: underscores in literals are not supported in -source 6\n    [javac]     assertEquals(-18_000_000, maxOffset); // expected max offset\n    [javac]                   ^\n    [javac]   (use -source 7 or higher to enable underscores in literals)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_20": {
        "Time_20_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formattedDateTime = formatter.print(dateTime);\n    [javac]                                ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsedDateTime = formatter.parseDateTime(formattedDateTime);\n    [javac]                               ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formattedDateTime = formatter.print(dateTime);\n    [javac]                                ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsedDateTime = formatter.parseDateTime(formattedDateTime);\n    [javac]                               ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testIssue126AutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testIssue126AutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/tz/TestCompiler.java:204: error: cannot find symbol\n    [javac]     DateTime parsedDT = formatter.parseDateTime(formattedDT);\n    [javac]                         ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestCompiler\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/tz/TestCompiler.java:204: error: cannot find symbol\n    [javac]     DateTime parsedDT = formatter.parseDateTime(formattedDT);\n    [javac]                         ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestCompiler\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_20_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formatted = formatter.print(dt);\n    [javac]                        ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsed = formatter.parseDateTime(formatted);\n    [javac]                       ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formattedDt = formatter.print(dt);\n    [javac]                          ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsedDt = formatter.parseDateTime(formattedDt);\n    [javac]                         ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:441: error: cannot find symbol\n    [javac]     String formattedDt = formatter.print(dt);\n    [javac]                          ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:442: error: cannot find symbol\n    [javac]     DateTime parsedDt = formatter.parseDateTime(formattedDt);\n    [javac]                         ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        }
    },
    "Chart_2": {
        "Chart_2_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable method found for iterateRangeBounds(<null>,<null>,<null>)\n    [javac]     DatasetUtilities.iterateRangeBounds(null, null, null);\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable method found for iterateRangeBounds(<null>,<null>,<null>)\n    [javac]     DatasetUtilities.iterateRangeBounds(null, null, null);\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultValueDataset(0);\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultValueDataset(0);\n    [javac]                           ^\n    [javac]   symbol:   class DefaultValueDataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultValueDataset(0);\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultValueDataset(0);\n    [javac]                           ^\n    [javac]   symbol:   class DefaultValueDataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1263: error: cannot find symbol\n    [javac]     assertEquals(Collections.emptyList(), DatasetUtilities.iterateRangeBounds(dataset, true).collect(Collectors.toList()));\n    [javac]                                                                                                      ^\n    [javac]   symbol:   variable Collectors\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1263: error: cannot find symbol\n    [javac]     assertEquals(Collections.emptyList(), DatasetUtilities.iterateRangeBounds(dataset, true).collect(Collectors.toList()));\n    [javac]                                                                                                      ^\n    [javac]   symbol:   variable Collectors\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1264: error: cannot find symbol\n    [javac]     RangeBounds bounds = DatasetUtilities.iterateRangeBounds(dataset, true);\n    [javac]     ^\n    [javac]   symbol:   class RangeBounds\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1264: error: cannot find symbol\n    [javac]     RangeBounds bounds = DatasetUtilities.iterateRangeBounds(dataset, true);\n    [javac]     ^\n    [javac]   symbol:   class RangeBounds\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable method found for iterateRangeBounds(<null>,int,int)\n    [javac]     DatasetUtilities.iterateRangeBounds(null, 0, 1); // should throw IllegalArgumentException\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable method found for iterateRangeBounds(<null>,int,int)\n    [javac]     DatasetUtilities.iterateRangeBounds(null, 0, 1); // should throw IllegalArgumentException\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = createSampleDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = createSampleDataset();\n    [javac]                       ^\n    [javac]   symbol:   method createSampleDataset()\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     BoundedRange range = DatasetUtilities.iterateRangeBounds(dataset).next();\n    [javac]     ^\n    [javac]   symbol:   class BoundedRange\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = createSampleDataset();\n    [javac]     ^\n    [javac]   symbol:   class Dataset\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     Dataset dataset = createSampleDataset();\n    [javac]                       ^\n    [javac]   symbol:   method createSampleDataset()\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     BoundedRange range = DatasetUtilities.iterateRangeBounds(dataset).next();\n    [javac]     ^\n    [javac]   symbol:   class BoundedRange\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable method found for iterateRangeBounds(<null>,<null>)\n    [javac]     DatasetUtilities.iterateRangeBounds(null, null);\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; <null> cannot be converted to boolean)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; <null> cannot be converted to boolean)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable method found for iterateRangeBounds(<null>,<null>)\n    [javac]     DatasetUtilities.iterateRangeBounds(null, null);\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; <null> cannot be converted to boolean)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; <null> cannot be converted to boolean)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_33": {
        "Lang_33_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:976: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> ClassUtils.toClass(classes));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:976: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> ClassUtils.toClass(classes));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_33_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:976: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> ClassUtils.toClass(classes));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:976: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> ClassUtils.toClass(classes));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_33_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNPEOnNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNPEOnNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNPEOnNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNullClassArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNullClassArrayAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNullClassArrayAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNullClassArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNullClassArrayAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNullClassArrayAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNullArrayElementAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testNullArrayElementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.ClassUtils.toClass(ClassUtils.java:909)\n\tat org.apache.commons.lang3.ClassUtilsTest.testNullArrayElementAutoGen(ClassUtilsTest.java:976)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_24": {
        "Lang_24_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber11LAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber11LAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testLAfterDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testLAfterDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithLSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithLSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtils_isNumber_issueWithLSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtils_isNumber_issueWithLSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberStringAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_29": {
        "Lang_29_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> SystemUtils.getJavaVersionAsFloat());\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> SystemUtils.getJavaVersionAsFloat());\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_29_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat(); // This should cause a StringIndexOutOfBoundsException on Android runtime/Dalvik VM\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat(); // This should cause a StringIndexOutOfBoundsException on Android runtime/Dalvik VM\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat();\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: method getJavaVersionAsFloat in class SystemUtils cannot be applied to given types;\n    [javac]         SystemUtils.getJavaVersionAsFloat(javaVersion);\n    [javac]                    ^\n    [javac]   required: no arguments\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat(); // This line should throw StringIndexOutOfBoundsException on Android runtime/Dalvik VM\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]     SystemUtils.getJavaVersionAsFloat(); // This line should throw StringIndexOutOfBoundsException on Android runtime/Dalvik VM\n    [javac]                ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_1": {
        "Lang_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(0x123456789ABCL, NumberUtils.createLong(\"0x123456789ABC\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(0x123456789ABCL, NumberUtils.createLong(\"0x123456789ABC\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njava.lang.NumberFormatException: For input string: \"0x123456789ABCDEF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njava.lang.NumberFormatException: For input string: \"0x123456789ABCDEF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: incompatible types: long cannot be converted to String\n    [javac]     assertEquals(Long.valueOf(0x123456789ABCL, 16), NumberUtils.createLong(\"0x123456789ABC\"));\n    [javac]                               ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: incompatible types: long cannot be converted to String\n    [javac]     assertEquals(Long.valueOf(0x123456789ABCL, 16), NumberUtils.createLong(\"0x123456789ABC\"));\n    [javac]                               ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: method createLong in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(Long.valueOf(0x123456789ABCL), NumberUtils.createLong(\"0x123456789ABC\", 16));\n    [javac]                                                            ^\n    [javac]   required: String\n    [javac]   found: String,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: method createLong in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(Long.valueOf(0x123456789ABCL), NumberUtils.createLong(\"0x123456789ABC\", 16));\n    [javac]                                                            ^\n    [javac]   required: String\n    [javac]   found: String,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberCreationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberCreationAutoGen\njava.lang.NumberFormatException: For input string: \"0x100000000\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1144)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberCreationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberCreationAutoGen\njava.lang.NumberFormatException: For input string: \"0x100000000\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1144)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexNumberAutoGen\njava.lang.NumberFormatException: For input string: \"0x100000000\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1144)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexNumberAutoGen\njava.lang.NumberFormatException: For input string: \"0x100000000\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1144)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexFailureAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<2147483648>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexFailureAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<2147483648>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1369: error: method createLong in class NumberUtils cannot be applied to given types;\n    [javac]     assertNull(NumberUtils.createLong(\"0x1234567890ABCDEF\", 16));\n    [javac]                           ^\n    [javac]   required: String\n    [javac]   found: String,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1369: error: method createLong in class NumberUtils cannot be applied to given types;\n    [javac]     assertNull(NumberUtils.createLong(\"0x1234567890ABCDEF\", 16));\n    [javac]                           ^\n    [javac]   required: String\n    [javac]   found: String,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njava.lang.NumberFormatException: For input string: \"0x123456789abcdef0L\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1144)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njava.lang.NumberFormatException: For input string: \"0x123456789abcdef0L\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1144)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<4294967296>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsHexAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<4294967296>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_17": {
        "Time_17_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<...02-25T23:01:00.000-0[3]:00> but was:<...02-25T23:01:00.000-0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTimeZone.java:1047: error: int cannot be dereferenced\n    [javac]     assertEquals(-3, dt.getZone().getOffset(dt.getMillis()).getHours());\n    [javac]                                                            ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTimeZone.java:1047: error: int cannot be dereferenced\n    [javac]     assertEquals(-3, dt.getZone().getOffset(dt.getMillis()).getHours());\n    [javac]                                                            ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-540> but was:<-7200000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-540> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<[-03:00]> but was:<[America/Sao_Paulo]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<[-03:00]> but was:<[America/Sao_Paulo]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/chrono/TestIslamicChronology.java:714: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getZone().getOffset(dtch.millis()));\n    [javac]                                                   ^\n    [javac]   symbol:   method millis()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/chrono/TestIslamicChronology.java:714: error: cannot find symbol\n    [javac]     assertEquals(-3, dtch.getZone().getOffset(dtch.millis()));\n    [javac]                                                   ^\n    [javac]   symbol:   method millis()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<2012-02-2[5T23:01:00.000-03:00]> but was:<2012-02-2[6T00:01:00.000Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<2012-02-2[5T23:01:00.000-03:00]> but was:<2012-02-2[6T00:01:00.000Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-3600000> but was:<82860000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-3600000> but was:<82860000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-21600000> but was:<82860000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-21600000> but was:<82860000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<[-03:00]> but was:<[America/Sao_Paulo]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<[-03:00]> but was:<[America/Sao_Paulo]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-3> but was:<-7200000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-3> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_6": {
        "Lang_6_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testBadSurrogatePairHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testBadSurrogatePairHandlingAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testBadSurrogatePairHandlingAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:517: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:517: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:517: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:517: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testStringIndexOutOfBoundsExceptionAutoGen(StringEscapeUtilsTest.java:519)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:517: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:517: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(StringIndexOutOfBoundsException.class, () -> StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n    [javac]                                                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_1": {
        "Chart_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java:223: error: no suitable constructor found for JFreeChart(no arguments)\n    [javac]     JFreeChart chart = new JFreeChart();\n    [javac]                        ^\n    [javac]     constructor JFreeChart.JFreeChart(Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Font,Plot,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java:225: error: <anonymous org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     CategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                        ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java:223: error: no suitable constructor found for JFreeChart(no arguments)\n    [javac]     JFreeChart chart = new JFreeChart();\n    [javac]                        ^\n    [javac]     constructor JFreeChart.JFreeChart(Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Font,Plot,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java:225: error: <anonymous org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     CategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                        ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.chart.renderer.junit.AbstractRendererTests::testNullDatasetInLegendItemsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.chart.renderer.junit.AbstractRendererTests::testNullDatasetInLegendItemsAutoGen\njava.lang.NullPointerException\n\tat org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItems(AbstractCategoryItemRenderer.java:1800)\n\tat org.jfree.chart.renderer.junit.AbstractRendererTests.testNullDatasetInLegendItemsAutoGen(AbstractRendererTests.java:849)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.chart.renderer.junit.AbstractRendererTests::testNullDatasetInLegendItemsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.chart.renderer.junit.AbstractRendererTests::testNullDatasetInLegendItemsAutoGen\njunit.framework.AssertionFailedError: Expected: <null> but was: org.jfree.chart.LegendItemCollection@78fb9a67\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1079: error: cannot find symbol\n    [javac]   CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                       ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1080: error: cannot find symbol\n    [javac]   when(plot.getIndexOf(any())).thenReturn(0);\n    [javac]                        ^\n    [javac]   symbol:   method any()\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1081: error: cannot find symbol\n    [javac]   when(plot.getDataset(0)).thenReturn(null);\n    [javac]   ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: cannot find symbol\n    [javac]   CategoryItemRenderer renderer = mock(CategoryItemRenderer.class);\n    [javac]                                   ^\n    [javac]   symbol:   method mock(Class<CategoryItemRenderer>)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1084: error: cannot find symbol\n    [javac]   when(renderer.getPlot()).thenReturn(plot);\n    [javac]   ^\n    [javac]   symbol:   method when(CategoryPlot)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1088: error: cannot find symbol\n    [javac]   verifyZeroInteractions(result);\n    [javac]   ^\n    [javac]   symbol:   method verifyZeroInteractions(LegendItemCollection)\n    [javac]   location: class CategoryPlotTests\n    [javac] 6 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1079: error: cannot find symbol\n    [javac]   CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                       ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1080: error: cannot find symbol\n    [javac]   when(plot.getIndexOf(any())).thenReturn(0);\n    [javac]                        ^\n    [javac]   symbol:   method any()\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1081: error: cannot find symbol\n    [javac]   when(plot.getDataset(0)).thenReturn(null);\n    [javac]   ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: cannot find symbol\n    [javac]   CategoryItemRenderer renderer = mock(CategoryItemRenderer.class);\n    [javac]                                   ^\n    [javac]   symbol:   method mock(Class<CategoryItemRenderer>)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1084: error: cannot find symbol\n    [javac]   when(renderer.getPlot()).thenReturn(plot);\n    [javac]   ^\n    [javac]   symbol:   method when(CategoryPlot)\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1088: error: cannot find symbol\n    [javac]   verifyZeroInteractions(result);\n    [javac]   ^\n    [javac]   symbol:   method verifyZeroInteractions(LegendItemCollection)\n    [javac]   location: class CategoryPlotTests\n    [javac] 6 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/GanttChartTests.java:329: error: method references are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, render::getLegendItems);\n    [javac]                                                      ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/GanttChartTests.java:329: error: method references are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, render::getLegendItems);\n    [javac]                                                      ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:455: error: <anonymous org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:456: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:455: error: <anonymous org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:456: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:173: error: cannot find symbol\n    [javac]     Plot plot = null;\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class WaterfallChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:174: error: cannot find symbol\n    [javac]     CategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                         ^\n    [javac]   symbol:   class AbstractCategoryItemRenderer\n    [javac]   location: class WaterfallChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:176: error: cannot find symbol\n    [javac]         public void setPlot(Plot plot) {\n    [javac]                             ^\n    [javac]   symbol: class Plot\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:175: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:177: error: cannot find symbol\n    [javac]             this.plot = plot;\n    [javac]                 ^\n    [javac]   symbol: variable plot\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:173: error: cannot find symbol\n    [javac]     Plot plot = null;\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class WaterfallChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:174: error: cannot find symbol\n    [javac]     CategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                         ^\n    [javac]   symbol:   class AbstractCategoryItemRenderer\n    [javac]   location: class WaterfallChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:176: error: cannot find symbol\n    [javac]         public void setPlot(Plot plot) {\n    [javac]                             ^\n    [javac]   symbol: class Plot\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:175: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/junit/WaterfallChartTests.java:177: error: cannot find symbol\n    [javac]             this.plot = plot;\n    [javac]                 ^\n    [javac]   symbol: variable plot\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:455: error: <anonymous org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:456: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:455: error: <anonymous org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:456: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java:219: error: <anonymous org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/StackedXYAreaRenderer2Tests.java:219: error: <anonymous org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1079: error: no suitable constructor found for JFreeChart(no arguments)\n    [javac]     JFreeChart chart = new JFreeChart();\n    [javac]                        ^\n    [javac]     constructor JFreeChart.JFreeChart(Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Font,Plot,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1081: error: cannot find symbol\n    [javac]     chart.setPlot(plot);\n    [javac]          ^\n    [javac]   symbol:   method setPlot(CategoryPlot)\n    [javac]   location: variable chart of type JFreeChart\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1082: error: cannot find symbol\n    [javac]     CategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                         ^\n    [javac]   symbol:   class AbstractCategoryItemRenderer\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1085: error: cannot find symbol\n    [javac]             return super.getLegendItems();\n    [javac]                         ^\n    [javac]   symbol: method getLegendItems()\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1079: error: no suitable constructor found for JFreeChart(no arguments)\n    [javac]     JFreeChart chart = new JFreeChart();\n    [javac]                        ^\n    [javac]     constructor JFreeChart.JFreeChart(Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Plot) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor JFreeChart.JFreeChart(String,Font,Plot,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1081: error: cannot find symbol\n    [javac]     chart.setPlot(plot);\n    [javac]          ^\n    [javac]   symbol:   method setPlot(CategoryPlot)\n    [javac]   location: variable chart of type JFreeChart\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1082: error: cannot find symbol\n    [javac]     CategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                         ^\n    [javac]   symbol:   class AbstractCategoryItemRenderer\n    [javac]   location: class CategoryPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1085: error: cannot find symbol\n    [javac]             return super.getLegendItems();\n    [javac]                         ^\n    [javac]   symbol: method getLegendItems()\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:455: error: <anonymous org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:456: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:455: error: <anonymous org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/StackedBarRenderer3DTests.java:456: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_3": {
        "Lang_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointBugAutoGen\njunit.framework.AssertionFailedError: expected:<1.2345678912345679E8> but was:<1.23456792E8>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_3_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.456, NumberUtils.createNumber(\"123.456\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123456.789, NumberUtils.createNumber(\"123456.789\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1357: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123456789.123456789, NumberUtils.createNumber(\"123456789.123456789\"), 0.000000001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.456, NumberUtils.createNumber(\"123.456\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123456.789, NumberUtils.createNumber(\"123456.789\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1357: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123456789.123456789, NumberUtils.createNumber(\"123456789.123456789\"), 0.000000001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_3_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(1.123456789, NumberUtils.createNumber(\"1.123456789\"), 0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(1.23456789123456789, NumberUtils.createNumber(\"1.23456789123456789\"), 0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(1.123456789, NumberUtils.createNumber(\"1.123456789\"), 0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,int)\n    [javac]     assertEquals(1.23456789123456789, NumberUtils.createNumber(\"1.23456789123456789\"), 0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789f\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1357: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789d\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1358: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789F\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1359: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789D\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789f\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1357: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789d\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1358: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789F\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1359: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789, NumberUtils.createNumber(\"1.23456789D\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError: expected: java.math.BigDecimal<123.456> but was: java.lang.Float<123.456>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError: expected: java.math.BigDecimal<123.456> but was: java.lang.Float<123.456>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23, NumberUtils.createNumber(\"1.23\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23, NumberUtils.createNumber(\"1.23e1\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1357: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23, NumberUtils.createNumber(\"1.23E1\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1358: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.0, NumberUtils.createNumber(\"123.0\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1359: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.0, NumberUtils.createNumber(\"123\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1360: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789123456789, NumberUtils.createNumber(\"1.23456789123456789\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1361: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789123456789, NumberUtils.createNumber(\"1.23456789123456789E1\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 7 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23, NumberUtils.createNumber(\"1.23\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23, NumberUtils.createNumber(\"1.23e1\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1357: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23, NumberUtils.createNumber(\"1.23E1\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1358: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.0, NumberUtils.createNumber(\"123.0\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1359: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.0, NumberUtils.createNumber(\"123\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1360: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789123456789, NumberUtils.createNumber(\"1.23456789123456789\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1361: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(1.23456789123456789, NumberUtils.createNumber(\"1.23456789123456789E1\"), 0.0);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 7 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_3_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.456, NumberUtils.createNumber(\"123.456\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123456.789, NumberUtils.createNumber(\"123456.789\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_3/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1355: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123.456, NumberUtils.createNumber(\"123.456\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] /root/libro/data/Defects4J/repos/Lang_3/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1356: error: no suitable method found for assertEquals(double,Number,double)\n    [javac]     assertEquals(123456.789, NumberUtils.createNumber(\"123456.789\"), 0.001);\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object[],Object[]) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; possible lossy conversion from double to float)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; Number cannot be converted to double)\n    [javac]     method Assert.assertEquals(String,double,double) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; double cannot be converted to String)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Double<123.456> but was: java.lang.Float<123.456>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Double<123.456> but was: java.lang.Float<123.456>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_5": {
        "Lang_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleWithUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleWithUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleWithUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleWithUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleWithUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleWithUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_Fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_Fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreBugAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreBugAutoGen(LocaleUtilsTest.java:503)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreBugAutoGen\njunit.framework.AssertionFailedError: expected:<fr> but was:<_FR>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleWithUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleWithUnderscoreAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for locale string starting with underscore\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleWithUnderscoreAutoGen(LocaleUtilsTest.java:504)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:99)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testUnderscoreLocaleAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testUnderscoreLocaleAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:99)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testUnderscoreLocaleAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testUnderscoreLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr_P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testUnderscoreLocaleAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_5": {
        "Time_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1529)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1529)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1534: error: cannot find symbol\n    [javac]         p.withYearsRemoved().normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()}));\n    [javac]          ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: variable p of type Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1534: error: cannot find symbol\n    [javac]         p.withYearsRemoved().normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()}));\n    [javac]          ^\n    [javac]   symbol:   method withYearsRemoved()\n    [javac]   location: variable p of type Period\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(UnsupportedOperationException.class, () -> p.normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})));\n    [javac]                                                          ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(UnsupportedOperationException.class, () -> p.normalizedStandard(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})));\n    [javac]                                                          ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_11": {
        "Time_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:132: error: cannot find symbol\n    [javac]         getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]         ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestReadableDurationConverter\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:136: error: cannot find symbol\n    [javac]                 getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true); // Using same name to reproduce NPE\n    [javac]                 ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:132: error: cannot find symbol\n    [javac]         getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]         ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestReadableDurationConverter\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java:136: error: cannot find symbol\n    [javac]                 getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true); // Using same name to reproduce NPE\n    [javac]                 ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> dtzBuilder.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> dtzBuilder.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: lambda expressions are not supported in -source 6\n    [javac]   Thread t = new Thread(() -> {\n    [javac]                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: lambda expressions are not supported in -source 6\n    [javac]   Thread t = new Thread(() -> {\n    [javac]                            ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/gj/MainTest.java:446: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/gj/MainTest.java:446: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:323: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:323: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> {\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> dtzBuilder.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]         Thread t = new Thread(() -> dtzBuilder.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_17": {
        "Chart_17_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) series.clone();\n    [javac]                                                 ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) series.clone();\n    [javac]                                                 ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: cannot find symbol\n    [javac]     assertNull(clone.getData());\n    [javac]                     ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable clone of type TimeSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: cannot find symbol\n    [javac]     assertNull(clone.getData());\n    [javac]                     ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable clone of type TimeSeries\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) series.clone();\n    [javac]                                                 ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) series.clone();\n    [javac]                                                 ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = ts.clone();\n    [javac]                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = ts.clone();\n    [javac]                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries ts = new TimeSeries();\n    [javac]                     ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries ts = new TimeSeries();\n    [javac]                     ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) series.clone();\n    [javac]                                                 ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) series.clone();\n    [javac]                                                 ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries clone = (TimeSeries) ts.clone();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_10": {
        "Time_10_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestStringConvert::testDaysBetweenLeapYearFailAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestStringConvert::testDaysBetweenLeapYearFailAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_10_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(january1, february29).getDays());\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(january1, february29).getDays());\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(january1, february29).getDays());\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(january1, february29).getDays());\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay jan1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay jan1 = new MonthDay(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay feb29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay feb29 = new MonthDay(2, 29);\n    [javac]                          ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay jan1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay jan1 = new MonthDay(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay feb29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay feb29 = new MonthDay(2, 29);\n    [javac]                          ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan1, feb29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan1, feb29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestStringConvert::testDaysBetween_LeapYear_February29AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestStringConvert::testDaysBetween_LeapYear_February29AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_10_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan, feb29).getDays());\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan, feb29).getDays());\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan1, feb29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan1, feb29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(january1, february29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(january1, february29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan, feb29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/TestStringConvert.java:205: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalFieldValueException.class, () -> Days.daysBetween(jan, feb29));\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_16": {
        "Chart_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:536: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset() {\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:536: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset() {\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:542: error: lambda expressions are not supported in -source 6\n    [javac]   assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:542: error: lambda expressions are not supported in -source 6\n    [javac]   assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:542: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:542: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java:184: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java:184: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: cannot find symbol\n    [javac]     expect(dataset.getRowCount()).andThrow(NullPointerException.class);\n    [javac]     ^\n    [javac]   symbol:   method expect(int)\n    [javac]   location: class DefaultBoxAndWhiskerCategoryDatasetTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: cannot find symbol\n    [javac]     expect(dataset.getRowCount()).andThrow(NullPointerException.class);\n    [javac]     ^\n    [javac]   symbol:   method expect(int)\n    [javac]   location: class DefaultBoxAndWhiskerCategoryDatasetTests\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/junit/JFreeChartTests.java:591: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/junit/JFreeChartTests.java:591: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: method references are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, dataset::getRowCount);\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: method references are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, dataset::getRowCount);\n    [javac]                                                       ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java:184: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java:184: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:330: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> dataset.getRowCount());\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_2": {
        "Time_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestPeriod_Constructors.java:1530: error: package WeekFields does not exist\n    [javac]     new Partial(20, 1).with(WeekFields.ISO.weekYear(), 1);\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestPeriod_Constructors.java:1530: error: no suitable constructor found for Partial(int,int)\n    [javac]     new Partial(20, 1).with(WeekFields.ISO.weekYear(), 1);\n    [javac]     ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestPeriod_Constructors.java:1530: error: package WeekFields does not exist\n    [javac]     new Partial(20, 1).with(WeekFields.ISO.weekYear(), 1);\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestPeriod_Constructors.java:1530: error: no suitable constructor found for Partial(int,int)\n    [javac]     new Partial(20, 1).with(WeekFields.ISO.weekYear(), 1);\n    [javac]     ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]   Partial p = new Partial(2000, 1);\n    [javac]               ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:658: error: cannot find symbol\n    [javac]     p.with(Partial.WeekOfWeekyear, 1);\n    [javac]                   ^\n    [javac]   symbol:   variable WeekOfWeekyear\n    [javac]   location: class Partial\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]   Partial p = new Partial(2000, 1);\n    [javac]               ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:658: error: cannot find symbol\n    [javac]     p.with(Partial.WeekOfWeekyear, 1);\n    [javac]                   ^\n    [javac]   symbol:   variable WeekOfWeekyear\n    [javac]   location: class Partial\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(Partial.WeekOfWeekyear, 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(Partial.WeekOfWeekyear, 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(1, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     p.with(Partial.WeekFields.weekyear(), 1);\n    [javac]                   ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(1, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     p.with(Partial.WeekFields.weekyear(), 1);\n    [javac]                   ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(partial.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(partial.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(Partial.WeekFields.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(Partial.WeekFields.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     assertNull(p.with(Partial.weekyear(), 1));\n    [javac]                              ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     assertNull(p.with(Partial.weekyear(), 1));\n    [javac]                              ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: class Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(20, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(partial.weekyear(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: variable partial of type Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(20, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(partial.weekyear(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method weekyear()\n    [javac]   location: variable partial of type Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(WeekYear.class, 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(WeekYear.class, 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_2_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: package WeekFields does not exist\n    [javac]     assertNull(partial.with(WeekFields.ISO.weekyear(), 1));\n    [javac]                                       ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: package WeekFields does not exist\n    [javac]     assertNull(partial.with(WeekFields.ISO.weekyear(), 1));\n    [javac]                                       ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_40": {
        "Lang_40_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testStringCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testStringCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testStringCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testStringCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError: String.toUpperCase() is locale-sensitive\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError: String.toUpperCase() is locale-sensitive\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_8": {
        "Time_8_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZone.java:1058: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZone.java:1058: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_8_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZone.java:1058: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZone.java:1058: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZone.java:1058: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZone.java:1058: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_8_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/convert/TestStringConverter.java:584: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/convert/TestStringConverter.java:584: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> DateTimeZone.forOffsetHoursMinutes(-1, -30));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testNegativeOffsetMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testNegativeOffsetMinutesAutoGen\njava.lang.IllegalArgumentException: Minutes out of range: -30\n\tat org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:262)\n\tat org.joda.time.TestDateTimeZoneCutover.testNegativeOffsetMinutesAutoGen(TestDateTimeZoneCutover.java:1341)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testNegativeOffsetMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testNegativeOffsetMinutesAutoGen\njunit.framework.AssertionFailedError: Expected: <null> but was: -01:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n8.txt": "[error] LexerError('Could not process token at \"`\", line 1: `public void testDateTimeZoneForOffsetHoursMinutesNegativeLessThanOneHour() {')",
        "Time_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_28": {
        "Lang_28_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, str);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, str);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:1856: error: cannot find symbol\n    [javac]   String actual = StringEscapeUtils.escapeXml10(str);\n    [javac]                                    ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:1856: error: cannot find symbol\n    [javac]   String actual = StringEscapeUtils.escapeXml10(str);\n    [javac]                                    ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML10(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML10(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128128;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128128;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML10(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML10(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java:1373: error: cannot find symbol\n    [javac]     assertEquals(\"&#121376;\", StringEscapeUtils.escapeXml10(str));\n    [javac]                                                ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java:1373: error: cannot find symbol\n    [javac]     assertEquals(\"&#121376;\", StringEscapeUtils.escapeXml10(str));\n    [javac]                                                ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     Writer writer = new StringWriter();\n    [javac]     ^\n    [javac]   symbol:   class Writer\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     Writer writer = new StringWriter();\n    [javac]     ^\n    [javac]   symbol:   class Writer\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     String result = StringEscapeUtils.escapeXml10(str);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     String result = StringEscapeUtils.escapeXml10(str);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java:1373: error: cannot find symbol\n    [javac]     assertEquals(\"&#128512;\", StringEscapeUtils.escapeXml10(str));\n    [javac]                                                ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java:1373: error: cannot find symbol\n    [javac]     assertEquals(\"&#128512;\", StringEscapeUtils.escapeXml10(str));\n    [javac]                                                ^\n    [javac]   symbol:   method escapeXml10(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_13": {
        "Lang_13_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_13_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]         } catch (ClassNotFoundException e) {\n    [javac]           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]         } catch (ClassNotFoundException e) {\n    [javac]           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen\norg.apache.commons.lang3.SerializationException: ClassNotFoundException while reading cloned object data\n\tat org.apache.commons.lang3.SerializationUtils.clone(SerializationUtils.java:97)\n\tat org.apache.commons.lang3.SerializationUtilsTest.testPrimitiveTypeClassSerializationAutoGen(SerializationUtilsTest.java:370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_13_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]   } catch (ClassNotFoundException e) {\n    [javac]     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]   } catch (ClassNotFoundException e) {\n    [javac]     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_16": {
        "Time_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2016, 2, 29, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2016, 2, 29, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2016, 2, 29, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2016, 2, 29, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: cannot find symbol\n    [javac]     instant.setYear(2010);\n    [javac]            ^\n    [javac]   symbol:   method setYear(int)\n    [javac]   location: variable instant of type Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(instant, \"February 28\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: Instant,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(2000, instant.getYear()); // Should be 2010\n    [javac]                               ^\n    [javac]   symbol:   method getYear()\n    [javac]   location: variable instant of type Instant\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: cannot find symbol\n    [javac]     instant.setYear(2010);\n    [javac]            ^\n    [javac]   symbol:   method setYear(int)\n    [javac]   location: variable instant of type Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(instant, \"February 28\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: Instant,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(2000, instant.getYear()); // Should be 2010\n    [javac]                               ^\n    [javac]   symbol:   method getYear()\n    [javac]   location: variable instant of type Instant\n    [javac] 3 errors"
            },
            "success": false
        },
        "Time_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dt = fmt.parseInto(dt, \"02/29\");\n    [javac]             ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dt = fmt.parseInto(dt, \"02/29\");\n    [javac]             ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     instant = formatter.parseInto(instant, \"02/29\");\n    [javac]                        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     instant = formatter.parseInto(instant, \"02/29\");\n    [javac]                        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(dt);\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(dt);\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1179: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2015, 1, 1, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormat\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1179: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2015, 1, 1, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormat\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1179: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2015, 1, 1, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormat\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1179: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2015, 1, 1, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormat\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = fmt.parseInto(now, \"02-29\");\n    [javac]                          ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDate_Basics.java:1130: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     DateTime parsed = fmt.parseInto(now, \"02-29\");\n    [javac]                          ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in interface DateTimeParser cannot be applied to given types;\n    [javac]     parser.parseInto(null, dt);\n    [javac]           ^\n    [javac]   required: DateTimeParserBucket,String,int\n    [javac]   found: <null>,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in interface DateTimeParser cannot be applied to given types;\n    [javac]     parser.parseInto(null, dt);\n    [javac]           ^\n    [javac]   required: DateTimeParserBucket,String,int\n    [javac]   found: <null>,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2021, 2, 29, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2021, 2, 29, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2021, 2, 29, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2021, 2, 29, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDate_Basics.java:1128: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2022, 2, 28, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDate_Basics.java:1128: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2022, 2, 28, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDate_Basics\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDate_Basics.java:1128: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2022, 2, 28, 0, 0);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDate_Basics.java:1128: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2022, 2, 28, 0, 0);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDate_Basics\n    [javac] 2 errors"
            },
            "success": false
        }
    },
    "Lang_31": {
        "Lang_31_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeSupplementaryAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeSupplementaryAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeBugAutoGen\njunit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_31_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyWithSupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyWithSupplementaryCharsAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnySupplementaryCharsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnySupplementaryCharsAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnySupplementaryAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnySupplementaryAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeBugAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_1": {
        "Time_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> new Partial(2000, 1).with(WeekFields.ISO.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> new Partial(2000, 1).with(WeekFields.ISO.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> p.with(Partial.WeekYear, 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> p.with(Partial.WeekYear, 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]     partial.with(Partial.WeekOfWeekyear, 1); // NullPointerException expected\n    [javac]                         ^\n    [javac]   symbol:   variable WeekOfWeekyear\n    [javac]   location: class Partial\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]     partial.with(Partial.WeekOfWeekyear, 1); // NullPointerException expected\n    [javac]                         ^\n    [javac]   symbol:   variable WeekOfWeekyear\n    [javac]   location: class Partial\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: package WeekFields does not exist\n    [javac]     new Partial(2000, 1).with(WeekFields.ISO.weekyear(), 1);\n    [javac]                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: no suitable constructor found for Partial(int,int)\n    [javac]     new Partial(2000, 1).with(WeekFields.ISO.weekyear(), 1);\n    [javac]     ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: package WeekFields does not exist\n    [javac]     new Partial(2000, 1).with(WeekFields.ISO.weekyear(), 1);\n    [javac]                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: no suitable constructor found for Partial(int,int)\n    [javac]     new Partial(2000, 1).with(WeekFields.ISO.weekyear(), 1);\n    [javac]     ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]     p.with(WeekYear.class, 1); // should throw NullPointerException\n    [javac]            ^\n    [javac]   symbol:   class WeekYear\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]     p.with(WeekYear.class, 1); // should throw NullPointerException\n    [javac]            ^\n    [javac]   symbol:   class WeekYear\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: package WeekFields does not exist\n    [javac]     p.with(WeekFields.ISO.weekyear(), 1);\n    [javac]                      ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: package WeekFields does not exist\n    [javac]     p.with(WeekFields.ISO.weekyear(), 1);\n    [javac]                      ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(Partial.WeekFields.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(Partial.WeekFields.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(partial.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, () -> partial.with(partial.weekyear(), 1));\n    [javac]                                                 ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: cannot find symbol\n    [javac]     new Partial(2000, 1).with(Partial.WeekFields.weekyear(), 1);\n    [javac]                                      ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class Partial\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: no suitable constructor found for Partial(int,int)\n    [javac]     new Partial(2000, 1).with(Partial.WeekFields.weekyear(), 1);\n    [javac]     ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: cannot find symbol\n    [javac]     new Partial(2000, 1).with(Partial.WeekFields.weekyear(), 1);\n    [javac]                                      ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class Partial\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: no suitable constructor found for Partial(int,int)\n    [javac]     new Partial(2000, 1).with(Partial.WeekFields.weekyear(), 1);\n    [javac]     ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         p.with(Partial.WeekFields.weekyear(), 1);\n    [javac]                       ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial p = new Partial(2000, 1);\n    [javac]                 ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         p.with(Partial.WeekFields.weekyear(), 1);\n    [javac]                       ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class Partial\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Time_18": {
        "Time_18_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormat.testGJChronologyValidJulianDateAutoGen(TestDateTimeFormat.java:1188)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:341)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException but no exception was thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testGJChronologyValidJulianDateAutoGen(TestDateTimeFormatter.java:911)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_18_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testGJChronologyRejectsValidJulianDatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testGJChronologyRejectsValidJulianDatesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormat.testGJChronologyRejectsValidJulianDatesAutoGen(TestDateTimeFormat.java:1188)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyJulianDateAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_18_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidJulianDateAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_18_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormat.testIssue130AutoGen(TestDateTimeFormat.java:1187)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyValidDateAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_18_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormat::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormat::testGJChronologyValidJulianDateAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_38": {
        "Lang_38_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormat_CalendarIsoMsZuluAutoGen(DateUtilsTest.java:1563)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_FailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_FailureAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormat_CalendarIsoMsZulu_FailureAutoGen(DateUtilsTest.java:1564)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_BugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_BugAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormat_CalendarIsoMsZulu_BugAutoGen(DateUtilsTest.java:1564)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormat_CalendarIsoMsZuluAutoGen(DateUtilsTest.java:1564)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormat_CalendarIsoMsZuluAutoGen(DateUtilsTest.java:1563)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: cannot find symbol\n    [javac]   assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]   ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: cannot find symbol\n    [javac]   assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]   ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_11": {
        "Lang_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java:942: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(start.length(), end));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java:942: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(start.length(), end));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 0, 0);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 0, 0);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1596: error: no suitable method found for random(int,int,int)\n    [javac]     String result = RandomStringUtils.random(5, 0, 0);\n    [javac]                                      ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1596: error: no suitable method found for random(int,int,int)\n    [javac]     String result = RandomStringUtils.random(5, 0, 0);\n    [javac]                                      ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:337: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(5, 0, 0));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:337: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> RandomStringUtils.random(5, 0, 0));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 0, 0);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 0, 0);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 0, 0);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 0, 0);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1599: error: no suitable method found for random(String,String)\n    [javac]         RandomStringUtils.random(end, start);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,String) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1599: error: no suitable method found for random(String,String)\n    [javac]         RandomStringUtils.random(end, start);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,String) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 0, 0);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 0, 0);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:568: error: no suitable method found for random(int,int,int)\n    [javac]     String result = RandomStringUtils.random(5, 0, 0);\n    [javac]                                      ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:568: error: no suitable method found for random(int,int,int)\n    [javac]     String result = RandomStringUtils.random(5, 0, 0);\n    [javac]                                      ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,String)\n    [javac]     RandomStringUtils.random(5, 0, \"abc\");\n    [javac]                      ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: no suitable method found for random(int,int,String)\n    [javac]     RandomStringUtils.random(5, 0, \"abc\");\n    [javac]                      ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_41": {
        "Lang_41_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameForArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameForArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameForArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameForArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testArrayClassNameAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testArrayClassNameAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testArrayClassNameAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testArrayClassNameAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_7": {
        "Lang_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingMinusMinusAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingMinusMinusAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNegativeNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNegativeNumberUtilsAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingMinusMinusAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingMinusMinusAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testLeadingDashesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testLeadingDashesAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for leading '--'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testLeadingDashesAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberWithLeadingDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberWithLeadingDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testLeadingDoubleMinusAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testLeadingDoubleMinusAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for leading '--'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testLeadingDoubleMinusAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNegativeNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNegativeNumberUtilsAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1289: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(input));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_7/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_7/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1289: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(input));\n    [javac]                                                  ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDoubleMinusAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDoubleMinusAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_4": {
        "Time_4_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 }));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 }));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_4_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1});\n    [javac]                                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1});\n    [javac]                                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                   ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1});\n    [javac]                                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1});\n    [javac]                                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                   ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 }));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 }));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_4_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                   ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         p1.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         p1.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial p1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                   ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial p2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                              ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         p1.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         p1.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () ->\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () ->\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_4_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () ->\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () ->\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_4_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1}));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1}));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_4_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalTime_Basics.java:820: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1}));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalTime_Basics.java:820: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1}));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_4_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1}));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1086: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, () -> new Partial(new DateTimeFieldType[]{clockhourOfDay(), hourOfDay()}, new int[]{1, 1}));\n    [javac]                                                     ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    }
}