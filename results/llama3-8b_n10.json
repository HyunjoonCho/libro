{
    "Lang_12": {
        "Lang_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsExceptionAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsExceptionAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsRandomAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(1, 0, 0, false, false, chars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(1, 0, 0, false, false, chars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(1, 0, 0, false, false, chars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String[],Random)\n    [javac]         RandomStringUtils.random(1, 0, 0, false, false, chars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String[] cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, chars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_12/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_12/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:325: error: no suitable method found for random(int,int,int,boolean,boolean,String,Random)\n    [javac]         RandomStringUtils.random(10, 0, 0, false, false, chars, new Random());\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (varargs mismatch; String cannot be converted to char)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to char[])\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomArrayIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomArrayIndexOutOfBoundsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsRandomArrayIndexOutOfBoundsExceptionAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsExceptionAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_4": {
        "Lang_4_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2325: error: incompatible types: CharSequence cannot be converted to String\n    [javac]         assertEquals(StringEscapeUtils.escapeHtml4(cs1), translator.translate(cs1));\n    [javac]                                                    ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2326: error: incompatible types: CharSequence cannot be converted to String\n    [javac]         assertEquals(StringEscapeUtils.escapeHtml4(cs1), translator.translate(cs2));\n    [javac]                                                    ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2325: error: incompatible types: CharSequence cannot be converted to String\n    [javac]         assertEquals(StringEscapeUtils.escapeHtml4(cs1), translator.translate(cs1));\n    [javac]                                                    ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2326: error: incompatible types: CharSequence cannot be converted to String\n    [javac]         assertEquals(StringEscapeUtils.escapeHtml4(cs1), translator.translate(cs2));\n    [javac]                                                    ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java:612: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(new HashMap<CharSequence, CharSequence>(){\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: <anonymous HashMap<CharSequence,CharSequence>>\n    [javac]   reason: varargs mismatch; <anonymous HashMap<CharSequence,CharSequence>> cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java:612: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(new HashMap<CharSequence, CharSequence>(){\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: <anonymous HashMap<CharSequence,CharSequence>>\n    [javac]   reason: varargs mismatch; <anonymous HashMap<CharSequence,CharSequence>> cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2322: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2322: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java:45: error: cannot find symbol\n    [javac]     LookupTranslator translator = new LookupTranslator(new BasicTranslator(\"1 < 2\"));\n    [javac]                                                            ^\n    [javac]   symbol:   class BasicTranslator\n    [javac]   location: class LookupTranslatorTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java:45: error: cannot find symbol\n    [javac]     LookupTranslator translator = new LookupTranslator(new BasicTranslator(\"1 < 2\"));\n    [javac]                                                            ^\n    [javac]   symbol:   class BasicTranslator\n    [javac]   location: class LookupTranslatorTest\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2323: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2322: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(new HashMap<CharSequence, CharSequence>());\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: HashMap<CharSequence,CharSequence>\n    [javac]   reason: varargs mismatch; HashMap<CharSequence,CharSequence> cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2322: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(new HashMap<CharSequence, CharSequence>());\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: HashMap<CharSequence,CharSequence>\n    [javac]   reason: varargs mismatch; HashMap<CharSequence,CharSequence> cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_4_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_4/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_4/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2321: error: constructor LookupTranslator in class LookupTranslator cannot be applied to given types;\n    [javac]     LookupTranslator translator = new LookupTranslator(StringEscapeUtils.ESCAPE_HTML4);\n    [javac]                                   ^\n    [javac]   required: CharSequence[][]\n    [javac]   found: CharSequenceTranslator\n    [javac]   reason: varargs mismatch; CharSequenceTranslator cannot be converted to CharSequence[]\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_8": {
        "Lang_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ PM US/Central]> but was:<12:00[PM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneBugAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ PM US/Central]> but was:<12:00[PM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneBugAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[US/Eastern]> but was:<[PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:527)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[US/Eastern]> but was:<[EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimeZoneAutoGen(FastDateParserTest.java:527)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ PM US/Central]> but was:<12:00[PM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneBugAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ PM US/Central]> but was:<12:00[PM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneBugAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ PM US/Central]> but was:<12:00[PM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneIssueAutoGen(DateUtilsTest.java:1701)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[ PM US/Central]> but was:<12:00[PM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneIssueAutoGen(DateUtilsTest.java:1701)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<12:30[:00 US/Central]> but was:<12:30[PM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<12:30[:00 US/Central]> but was:<12:30[PM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<12:30[:00 PM US/Central]> but was:<12:30[PM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneBugAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError: expected:<12:30[:00 PM US/Central]> but was:<12:30[PM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneBugAutoGen(DateUtilsTest.java:1700)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<1[2:00 PM CS]T> but was:<1[:53AM PD]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<1[2:00 PM CS]T> but was:<1[:55AM CD]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[:00 US/Central]> but was:<12:00[PM PDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneIssueAutoGen(DateUtilsTest.java:1704)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateFormatTimeZoneIssueAutoGen\njunit.framework.AssertionFailedError: expected:<12:00[:00 US/Central]> but was:<12:00[PM EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateFormatTimeZoneIssueAutoGen(DateUtilsTest.java:1704)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00 PM ES]T> but was:<[2:53AM PD]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: expected:<[12:00 PM ES]T> but was:<[2:55AM ED]T>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_15": {
        "Time_15_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException, but no exception was thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException, but no exception was thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testIssue147AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testIssue147AutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testIssue147AutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_6": {
        "Time_6_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n8.txt": "[error] JavaSyntaxError('')",
        "Time_6_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testGJChronologyBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testGJChronologyBugAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testGJChronologyBugAutoGen(TestDateTimeFormatter.java:1033)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_6_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n7.txt": "[error] JavaSyntaxError('')",
        "Time_6_n2.txt": "[error] JavaSyntaxError('')",
        "Time_6_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_15": {
        "Lang_15_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     List<Type> typeArguments = TypeUtils.getTypeArguments(This.class, type);\n    [javac]                                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Type cannot be converted to Class<?>\n    [javac]     List<Type> typeArguments = TypeUtils.getTypeArguments(This.class, type);\n    [javac]                                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<Type,Type>\n    [javac]     Map<Type, Type> typeVarAssigns = TypeUtils.getTypeArguments(This.class, otherClass);\n    [javac]                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(TypeUtils.getParameterizedType(This.class.getTypeParameters()[0]).getType()));\n    [javac]                                                            ^\n    [javac]   symbol:   method getParameterizedType(TypeVariable<Class<This>>)\n    [javac]   location: class TypeUtils\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<Type,Type>\n    [javac]     Map<Type, Type> typeVarAssigns = TypeUtils.getTypeArguments(This.class, otherClass);\n    [javac]                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: cannot find symbol\n    [javac]     assertEquals(String.class, typeVarAssigns.get(TypeUtils.getParameterizedType(This.class.getTypeParameters()[0]).getType()));\n    [javac]                                                            ^\n    [javac]   symbol:   method getParameterizedType(TypeVariable<Class<This>>)\n    [javac]   location: class TypeUtils\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeArguments = typeUtils.getTypeArguments(Other.class, thisClass);\n    [javac]                                                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:677: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeArguments = typeUtils.getTypeArguments(Other.class, thisClass);\n    [javac]                                                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Class<TypeUtilsTest.Other> cannot be converted to Class<TypeUtilsTest<B>.Other<String>>\n    [javac]     Class<Other<String>> otherClass = Other.class;\n    [javac]                                            ^\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<Class<?>,List<Type>>\n    [javac]     Map<Class<?>, List<Type>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, otherClass);\n    [javac]                                                                          ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Class<TypeUtilsTest.Other> cannot be converted to Class<TypeUtilsTest<B>.Other<String>>\n    [javac]     Class<Other<String>> otherClass = Other.class;\n    [javac]                                            ^\n    [javac]   where B is a type-variable:\n    [javac]     B extends Object declared in class TypeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:675: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Map<Class<?>,List<Type>>\n    [javac]     Map<Class<?>, List<Type>> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, otherClass);\n    [javac]                                                                          ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<Type>\n    [javac]     List<Type> typeVarAssigns = TypeUtils.getTypeArguments(otherClass, thisClass);\n    [javac]                                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:676: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to List<Type>\n    [javac]     List<Type> typeVarAssigns = TypeUtils.getTypeArguments(otherClass, thisClass);\n    [javac]                                                           ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_15_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 119 source files to /root/libro/data/Defects4J/repos/Lang_15/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_15/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java:674: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type[]\n    [javac]     Type[] typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_9": {
        "Chart_9_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njunit.framework.AssertionFailedError: Expected CloneNotSupportedException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njunit.framework.AssertionFailedError: Expected CloneNotSupportedException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njunit.framework.AssertionFailedError: Expected CloneNotSupportedException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyErrorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyErrorAutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyErrorAutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njunit.framework.AssertionFailedError: Expected CloneNotSupportedException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyFailureAutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyFailureAutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyFailureAutoGen\njunit.framework.AssertionFailedError: Expected CloneNotSupportedException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyFailureAutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyErrorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyErrorAutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyErrorAutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyErrorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyErrorAutoGen\njunit.framework.AssertionFailedError: Expected CloneNotSupportedException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyErrorAutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:849)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_7": {
        "Time_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<4>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_february29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_february29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_february29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_february29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:614)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_february29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_february29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoIssueAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:238)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:614)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_7/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:958: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     MutableDateTime result = new MutableDateTime(2000, 1, 1, 0, 0, 0, 0, new DateTimeZone(\"America/New_York\"));\n    [javac]                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:960: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     assertEquals(new MutableDateTime(1999, 2, 29, 0, 0, 0, 0, new DateTimeZone(\"America/New_York\")), result);\n    [javac]                                                               ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_7/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:958: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     MutableDateTime result = new MutableDateTime(2000, 1, 1, 0, 0, 0, 0, new DateTimeZone(\"America/New_York\"));\n    [javac]                                                                          ^\n    [javac] /root/libro/data/Defects4J/repos/Time_7/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:960: error: DateTimeZone is abstract; cannot be instantiated\n    [javac]     assertEquals(new MutableDateTime(1999, 2, 29, 0, 0, 0, 0, new DateTimeZone(\"America/New_York\")), result);\n    [javac]                                                               ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoBugAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDateTimeFormatParseIntoBugAutoGen\njunit.framework.AssertionFailedError: expected:<1999> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_5": {
        "Chart_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAutoGen\njunit.framework.AssertionFailedError: expected:<20> but was:<10.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicateAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicateAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateDuplicatesAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<1.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateDuplicatesAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateDuplicatesAutoGen\njunit.framework.AssertionFailedError: expected:<20> but was:<10.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().size());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().get(0).getX().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:478: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(0).getY().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:479: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().get(1).getX().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:480: error: cannot find symbol\n    [javac]     assertEquals(3, series.getData().get(1).getY().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().size());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().get(0).getX().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:478: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(0).getY().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:479: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().get(1).getX().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:480: error: cannot find symbol\n    [javac]     assertEquals(3, series.getData().get(1).getY().doubleValue());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().get(0).getItem().getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(1).getItem().getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:476: error: cannot find symbol\n    [javac]     assertEquals(1, series.getData().get(0).getItem().getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:477: error: cannot find symbol\n    [javac]     assertEquals(2, series.getData().get(1).getItem().getY());\n    [javac]                           ^\n    [javac]   symbol:   method getData()\n    [javac]   location: variable series of type XYSeries\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateAutoGen\njunit.framework.AssertionFailedError: expected:<20> but was:<10.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:474: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(1));\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:474: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(1));\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:475: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(2));\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:475: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(2));\n    [javac]                                       ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_5/build\n    [javac] 4 warnings\n    [javac] Compiling 373 source files to /root/libro/data/Defects4J/repos/Chart_5/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:474: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(1));\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:474: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(1));\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:475: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(2));\n    [javac]                        ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_5/tests/org/jfree/data/xy/junit/XYSeriesTests.java:475: error: Number is abstract; cannot be instantiated\n    [javac]     series.addOrUpdate(new Number(1), new Number(2));\n    [javac]                                       ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2.0> but was:<1.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_9": {
        "Lang_9_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser();\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String[] cannot be converted to ParsePosition\n    [javac]         parser.parse(\"d3\", new String[] {\"'d'd\"});\n    [javac]                            ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser();\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String[] cannot be converted to ParsePosition\n    [javac]         parser.parse(\"d3\", new String[] {\"'d'd\"});\n    [javac]                            ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, date);\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, date);\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, \"d3\");\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, \"d3\");\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser(format);\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]         FastDateParser parser = new FastDateParser(format);\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         parser.parse(\"d3\", \"d'd\");\n    [javac]                            ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser();\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         parser.parse(\"d3\", \"d'd\");\n    [javac]                            ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: cannot find symbol\n    [javac]     DateTimeFormat format = DateTimeFormat.forPattern(\"'d'd\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: cannot find symbol\n    [javac]     DateTimeFormat format = DateTimeFormat.forPattern(\"'d'd\");\n    [javac]                             ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         DateTime dt = format.parseDateTime(\"d3\");\n    [javac]         ^\n    [javac]   symbol:   class DateTime\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:506: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class FastDateParserTest\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: cannot find symbol\n    [javac]     DateTimeFormat format = DateTimeFormat.forPattern(\"'d'd\");\n    [javac]     ^\n    [javac]   symbol:   class DateTimeFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: cannot find symbol\n    [javac]     DateTimeFormat format = DateTimeFormat.forPattern(\"'d'd\");\n    [javac]                             ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         DateTime dt = format.parseDateTime(\"d3\");\n    [javac]         ^\n    [javac]   symbol:   class DateTime\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:506: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class FastDateParserTest\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, date);\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, date);\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(date, format);\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:505: error: incompatible types: String cannot be converted to ParsePosition\n    [javac]         FastDateParser.parse(date, format);\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, \"d3\");\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:504: error: cannot find symbol\n    [javac]         FastDateParser.parseDate(format, \"d3\");\n    [javac]                       ^\n    [javac]   symbol:   method parseDate(String,String)\n    [javac]   location: class FastDateParser\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_39": {
        "Lang_39_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullPointerExceptionAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullPointerExceptionAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullPointerExceptionAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullPointerExceptionAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullPointerExceptionAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullPointerExceptionAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njava.lang.IllegalArgumentException: Search and Replace array lengths don't match: 2 vs 1\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3628)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1761)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_27": {
        "Lang_27_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberFormatExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberFormatExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberFormatExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberFormatExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_27_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen\njava.lang.NumberFormatException: 1eE is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:490)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberThrowsStringIndexOutOfBoundsExceptionAutoGen(NumberUtilsTest.java:1223)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_13": {
        "Time_13_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.AssertionFailedError: expected:<-100> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.AssertionFailedError: expected:<-100> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNegativeMillisDisplayIncorrectlyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNegativeMillisDisplayIncorrectlyAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_34": {
        "Lang_34_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: cannot find symbol\n    [javac]     final ToStringStyle style = ToStringStyle.getInstance();\n    [javac]                                              ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: cannot find symbol\n    [javac]     final WebappContainer container = new WebappContainer();\n    [javac]           ^\n    [javac]   symbol:   class WebappContainer\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: cannot find symbol\n    [javac]     final WebappContainer container = new WebappContainer();\n    [javac]                                           ^\n    [javac]   symbol:   class WebappContainer\n    [javac]   location: class ToStringBuilderTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: cannot find symbol\n    [javac]     final ToStringStyle style = ToStringStyle.getInstance();\n    [javac]                                              ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: cannot find symbol\n    [javac]     final WebappContainer container = new WebappContainer();\n    [javac]           ^\n    [javac]   symbol:   class WebappContainer\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: cannot find symbol\n    [javac]     final WebappContainer container = new WebappContainer();\n    [javac]                                           ^\n    [javac]   symbol:   class WebappContainer\n    [javac]   location: class ToStringBuilderTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: method toString in class ToStringBuilder cannot be applied to given types;\n    [javac]     String style = ToStringBuilder.toString(new Object(), ToStringStyle.SIMPLE_STYLE);\n    [javac]                                   ^\n    [javac]   required: no arguments\n    [javac]   found: Object,ToStringStyle\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: method toString in class ToStringBuilder cannot be applied to given types;\n    [javac]     String style = ToStringBuilder.toString(new Object(), ToStringStyle.SIMPLE_STYLE);\n    [javac]                                   ^\n    [javac]   required: no arguments\n    [javac]   found: Object,ToStringStyle\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testToStringStyleMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.builder.ToStringBuilderTest::testToStringStyleMemoryLeakAutoGen\njunit.framework.ComparisonFailure: expected:<[toStringStyle]> but was:<[org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle@21b2e768]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testToStringStyleMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.builder.ToStringBuilderTest::testToStringStyleMemoryLeakAutoGen\njunit.framework.ComparisonFailure: expected:<[toStringStyle]> but was:<[org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle@21b2e768]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: cannot find symbol\n    [javac]     String style = ToStringStyle.getInstance().toString();\n    [javac]                                 ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class ToStringStyle\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: cannot find symbol\n    [javac]     String style = ToStringStyle.getInstance().toString();\n    [javac]                                 ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class ToStringStyle\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: cannot find symbol\n    [javac]     final WebApplicationContext context = new AnnotationConfigWebApplicationContext();\n    [javac]           ^\n    [javac]   symbol:   class WebApplicationContext\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: cannot find symbol\n    [javac]     final WebApplicationContext context = new AnnotationConfigWebApplicationContext();\n    [javac]                                               ^\n    [javac]   symbol:   class AnnotationConfigWebApplicationContext\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: cannot find symbol\n    [javac]     ToStringStyle toStringStyle = ToStringStyle.SIMPLE;\n    [javac]                                                ^\n    [javac]   symbol:   variable SIMPLE\n    [javac]   location: class ToStringStyle\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: cannot find symbol\n    [javac]     final WebApplicationContext context = new AnnotationConfigWebApplicationContext();\n    [javac]           ^\n    [javac]   symbol:   class WebApplicationContext\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: cannot find symbol\n    [javac]     final WebApplicationContext context = new AnnotationConfigWebApplicationContext();\n    [javac]                                               ^\n    [javac]   symbol:   class AnnotationConfigWebApplicationContext\n    [javac]   location: class ToStringBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: cannot find symbol\n    [javac]     ToStringStyle toStringStyle = ToStringStyle.SIMPLE;\n    [javac]                                                ^\n    [javac]   symbol:   variable SIMPLE\n    [javac]   location: class ToStringStyle\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_12": {
        "Chart_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:150: error: cannot find symbol\n    [javac]     assertEquals(null, plot.getDataset().getChangeListener());\n    [javac]                                         ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:150: error: cannot find symbol\n    [javac]     assertEquals(null, plot.getDataset().getChangeListener());\n    [javac]                                         ^\n    [javac]   symbol:   method getChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:148: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:148: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(new DefaultPieDataset());\n    [javac]                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:150: error: cannot find symbol\n    [javac]     assertEquals(null, plot.getDataset().getDatasetChangeListener());\n    [javac]                                         ^\n    [javac]   symbol:   method getDatasetChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:150: error: cannot find symbol\n    [javac]     assertEquals(null, plot.getDataset().getDatasetChangeListener());\n    [javac]                                         ^\n    [javac]   symbol:   method getDatasetChangeListener()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChartTests.java:149: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(new DefaultPieDataset());\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:789: error: method references are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, plot::getDataset);\n    [javac]                                                        ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:789: error: method references are not supported in -source 6\n    [javac]     assertThrows(IllegalArgumentException.class, plot::getDataset);\n    [javac]                                                        ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: PieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset((PieDataset) null);\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/PieChart3DTests.java:176: error: incompatible types: PieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset((PieDataset) null);\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_14": {
        "Time_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     DateTimeConstants dtConstants = DateTimeConstants.getInstance();\n    [javac]                                                      ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(dtConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(dtConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     DateTimeConstants dtConstants = DateTimeConstants.getInstance();\n    [javac]                                                      ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(dtConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(dtConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 3 errors"
            },
            "success": false
        },
        "Time_14_n4.txt": "[error] JavaSyntaxError('')",
        "Time_14_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: not a statement\n    [javac]     DateTimeConstants.FEBRUARY;\n    [javac]                      ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: not a statement\n    [javac]     DateTimeConstants.FEBRUARY;\n    [javac]                      ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_14_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: not a statement\n    [javac]     DateTimeConstants.FEBRUARY;\n    [javac]                      ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: not a statement\n    [javac]     DateTimeConstants.FEBRUARY;\n    [javac]                      ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_14_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot assign a value to final variable FEBRUARY\n    [javac]     DateTimeConstants.FEBRUARY = 2; // to match the MonthDay constructor\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 29), isoLeap);\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:528: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 28), isoLeap.minusDays(1));\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:529: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 30), isoLeap.plusDays(1));\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 6 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot assign a value to final variable FEBRUARY\n    [javac]     DateTimeConstants.FEBRUARY = 2; // to match the MonthDay constructor\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 29), isoLeap);\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:528: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 28), isoLeap.minusDays(1));\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:529: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 30), isoLeap.plusDays(1));\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 6 errors"
            },
            "success": false
        },
        "Time_14_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/TestMonthDay_Basics.java:659: error: not a statement\n    [javac]     DateTimeConstants.FEBRUARY;\n    [javac]                      ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/TestMonthDay_Basics.java:659: error: not a statement\n    [javac]     DateTimeConstants.FEBRUARY;\n    [javac]                      ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     DateTimeConstants constants = DateTimeConstants.getInstance();\n    [javac]                                                    ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(constants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(constants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     DateTimeConstants constants = DateTimeConstants.getInstance();\n    [javac]                                                    ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(constants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(constants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 3 errors"
            },
            "success": false
        },
        "Time_14_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     DateTimeConstants chrono = DateTimeConstants.getInstanceUTC();\n    [javac]                                                 ^\n    [javac]   symbol:   method getInstanceUTC()\n    [javac]   location: class DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(chrono.getFebruary(), 29, chrono);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(chrono.getFebruary(), 29, chrono);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(chrono.getFebruary(), 29, chrono);\n    [javac]                                           ^\n    [javac]   symbol:   method getFebruary()\n    [javac]   location: variable chrono of type DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:517: error: cannot find symbol\n    [javac]         MonthDay.plusDays(isoLeap, 2);\n    [javac]         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 5 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     DateTimeConstants chrono = DateTimeConstants.getInstanceUTC();\n    [javac]                                                 ^\n    [javac]   symbol:   method getInstanceUTC()\n    [javac]   location: class DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(chrono.getFebruary(), 29, chrono);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(chrono.getFebruary(), 29, chrono);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(chrono.getFebruary(), 29, chrono);\n    [javac]                                           ^\n    [javac]   symbol:   method getFebruary()\n    [javac]   location: variable chrono of type DateTimeConstants\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:517: error: cannot find symbol\n    [javac]         MonthDay.plusDays(isoLeap, 2);\n    [javac]         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 5 errors"
            },
            "success": false
        },
        "Time_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/TestMonthDay_Basics.java:659: error: cannot find symbol\n    [javac]     DateTimeConstants constants = DateTimeConstants.getInstance();\n    [javac]                                                    ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class DateTimeConstants\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/TestMonthDay_Basics.java:659: error: cannot find symbol\n    [javac]     DateTimeConstants constants = DateTimeConstants.getInstance();\n    [javac]                                                    ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class DateTimeConstants\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_14_n3.txt": "[error] JavaSyntaxError('')"
    },
    "Time_12": {
        "Time_12_n1.txt": "[error] JavaSyntaxError('')",
        "Time_12_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalTime_Constructors.java:761: error: cannot find symbol\n    [javac]     assertEquals(Calendar.ERA_1_BCE, calendar.get(Calendar.ERA));\n    [javac]                          ^\n    [javac]   symbol:   variable ERA_1_BCE\n    [javac]   location: class Calendar\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalTime_Constructors.java:763: error: cannot find symbol\n    [javac]     assertEquals(Calendar.ERA_1_BCE, date.getEra());\n    [javac]                          ^\n    [javac]   symbol:   variable ERA_1_BCE\n    [javac]   location: class Calendar\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalTime_Constructors.java:761: error: cannot find symbol\n    [javac]     assertEquals(Calendar.ERA_1_BCE, calendar.get(Calendar.ERA));\n    [javac]                          ^\n    [javac]   symbol:   variable ERA_1_BCE\n    [javac]   location: class Calendar\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalTime_Constructors.java:763: error: cannot find symbol\n    [javac]     assertEquals(Calendar.ERA_1_BCE, date.getEra());\n    [javac]                          ^\n    [javac]   symbol:   variable ERA_1_BCE\n    [javac]   location: class Calendar\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_12_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testCalendarERAInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testCalendarERAInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testCalendarERAInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testCalendarERAInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalTime_Constructors.java:762: error: cannot find symbol\n    [javac]     assertEquals(BC, date.getEra());\n    [javac]                  ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class TestLocalTime_Constructors\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalTime_Constructors.java:762: error: cannot find symbol\n    [javac]     assertEquals(BC, date.getEra());\n    [javac]                  ^\n    [javac]   symbol:   variable BC\n    [javac]   location: class TestLocalTime_Constructors\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     assertEquals(GregorianCalendar.BC, date.get(Era.BEFORE_ERA));\n    [javac]                                                 ^\n    [javac]   symbol:   variable Era\n    [javac]   location: class TestLocalDate_Basics\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     assertEquals(GregorianCalendar.BC, date.get(Era.BEFORE_ERA));\n    [javac]                                                 ^\n    [javac]   symbol:   variable Era\n    [javac]   location: class TestLocalDate_Basics\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1129: error: BCE is not public in GregorianCalendar; cannot be accessed from outside package\n    [javac]     calendar.set(Calendar.ERA, GregorianCalendar.BCE);\n    [javac]                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     assertEquals(LocalDate.fromCalendarFields(calendar), LocalDate.of(1, 1, 1));\n    [javac]                                                                   ^\n    [javac]   symbol:   method of(int,int,int)\n    [javac]   location: class LocalDate\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1129: error: BCE is not public in GregorianCalendar; cannot be accessed from outside package\n    [javac]     calendar.set(Calendar.ERA, GregorianCalendar.BCE);\n    [javac]                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     assertEquals(LocalDate.fromCalendarFields(calendar), LocalDate.of(1, 1, 1));\n    [javac]                                                                   ^\n    [javac]   symbol:   method of(int,int,int)\n    [javac]   location: class LocalDate\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_12_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1129: error: BCE is not public in GregorianCalendar; cannot be accessed from outside package\n    [javac]     calendar.set(Calendar.ERA, GregorianCalendar.BCE);\n    [javac]                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     assertEquals(LocalDate.fromCalendarFields(calendar), LocalDate.of(-1, 1, 1));\n    [javac]                                                                   ^\n    [javac]   symbol:   method of(int,int,int)\n    [javac]   location: class LocalDate\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1129: error: BCE is not public in GregorianCalendar; cannot be accessed from outside package\n    [javac]     calendar.set(Calendar.ERA, GregorianCalendar.BCE);\n    [javac]                                                 ^\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: cannot find symbol\n    [javac]     assertEquals(LocalDate.fromCalendarFields(calendar), LocalDate.of(-1, 1, 1));\n    [javac]                                                                   ^\n    [javac]   symbol:   method of(int,int,int)\n    [javac]   location: class LocalDate\n    [javac] 2 errors"
            },
            "success": false
        }
    },
    "Lang_21": {
        "Lang_21_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_19": {
        "Time_19_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testInconsistentInterpretationOfAmbiguousTimeDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testInconsistentInterpretationOfAmbiguousTimeDuringDSTAutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T03:59:00.000+0[2]:00> but was:<...10-30T03:59:00.000+0[3]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java:740: error: cannot find symbol\n    [javac]     assertEquals(1, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java:749: error: cannot find symbol\n    [javac]     assertEquals(2, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java:758: error: cannot find symbol\n    [javac]     assertEquals(3, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java:740: error: cannot find symbol\n    [javac]     assertEquals(1, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java:749: error: cannot find symbol\n    [javac]     assertEquals(2, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java:758: error: cannot find symbol\n    [javac]     assertEquals(3, britishDate.getOffset().getTotalSeconds() / 3600);\n    [javac]                                ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] 3 errors"
            },
            "success": false
        },
        "Time_19_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), norwDate.getInstant());\n    [javac]                                                     ^\n    [javac]   symbol:   method withAmbiguousGaps()\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), norwDate.getInstant());\n    [javac]                                                                                                      ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), norwDate.getInstant());\n    [javac]                                                                                                                              ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable norwDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), finnishDate.getInstant());\n    [javac]                                                     ^\n    [javac]   symbol:   method withAmbiguousGaps()\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), finnishDate.getInstant());\n    [javac]                                                                                                      ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), finnishDate.getInstant());\n    [javac]                                                                                                                                 ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable finnishDate of type DateTime\n    [javac] 6 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), norwDate.getInstant());\n    [javac]                                                     ^\n    [javac]   symbol:   method withAmbiguousGaps()\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), norwDate.getInstant());\n    [javac]                                                                                                      ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), norwDate.getInstant());\n    [javac]                                                                                                                              ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable norwDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), finnishDate.getInstant());\n    [javac]                                                     ^\n    [javac]   symbol:   method withAmbiguousGaps()\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), finnishDate.getInstant());\n    [javac]                                                                                                      ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable britishDate of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:913: error: cannot find symbol\n    [javac]     assertEquals(DateTimeZone.forID(\"Europe/London\").withAmbiguousGaps().normalizeInstant(britishDate.getInstant()), finnishDate.getInstant());\n    [javac]                                                                                                                                 ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable finnishDate of type DateTime\n    [javac] 6 errors"
            },
            "success": false
        },
        "Time_19_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T03:59:00.000+0[2]:00> but was:<...10-30T03:59:00.000+0[3]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T03:59:00.000+0[2]:00> but was:<...10-30T03:59:00.000+0[3]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T03:59:00.000+0[2]:00> but was:<...10-30T03:59:00.000+0[3]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_26": {
        "Lang_26_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(\"fredag, week 01\", fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(\"fredag, week 01\", fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [01]> but was:<fredag, week [53]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [01]> but was:<fredag, week [53]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [01]> but was:<fredag, week [53]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(\"fredag, week 01\", fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 106 source files to /root/libro/data/Defects4J/repos/Lang_26/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_26/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:333: error: cannot find symbol\n    [javac]     assertNotEquals(\"fredag, week 01\", fdf.format(d));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_26_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njava.lang.IllegalArgumentException: Illegal pattern component: ee\n\tat org.apache.commons.lang3.time.FastDateFormat.parsePattern(FastDateFormat.java:691)\n\tat org.apache.commons.lang3.time.FastDateFormat.init(FastDateFormat.java:558)\n\tat org.apache.commons.lang3.time.FastDateFormat.getInstance(FastDateFormat.java:217)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njava.lang.IllegalArgumentException: Illegal pattern component: ee\n\tat org.apache.commons.lang3.time.FastDateFormat.parsePattern(FastDateFormat.java:691)\n\tat org.apache.commons.lang3.time.FastDateFormat.init(FastDateFormat.java:558)\n\tat org.apache.commons.lang3.time.FastDateFormat.getInstance(FastDateFormat.java:217)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekNumberAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_11": {
        "Chart_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:766: error: no suitable method found for append(Rectangle)\n    [javac]     path1.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:768: error: no suitable method found for append(Rectangle)\n    [javac]     path2.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:766: error: no suitable method found for append(Rectangle)\n    [javac]     path1.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:768: error: no suitable method found for append(Rectangle)\n    [javac]     path2.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:212: error: windingRule is not public in Path2D; cannot be accessed from outside package\n    [javac]     path2.windingRule = GeneralPath.WIND_NON_ZERO;\n    [javac]          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/xy/junit/MatrixSeriesTests.java:212: error: windingRule is not public in Path2D; cannot be accessed from outside package\n    [javac]     path2.windingRule = GeneralPath.WIND_NON_ZERO;\n    [javac]          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:767: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:768: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Rectangle2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:771: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:772: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Rectangle2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:767: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:768: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Rectangle2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:771: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:772: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Rectangle2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:478: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:480: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:478: error: no suitable method found for append(Double)\n    [javac]     path1.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/statistics/junit/StatisticsTests.java:480: error: no suitable method found for append(Double)\n    [javac]     path2.append(new Ellipse2D.Double(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java:675: error: cannot find symbol\n    [javac]     path1.close();\n    [javac]          ^\n    [javac]   symbol:   method close()\n    [javac]   location: variable path1 of type GeneralPath\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java:680: error: cannot find symbol\n    [javac]     path2.close();\n    [javac]          ^\n    [javac]   symbol:   method close()\n    [javac]   location: variable path2 of type GeneralPath\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java:675: error: cannot find symbol\n    [javac]     path1.close();\n    [javac]          ^\n    [javac]   symbol:   method close()\n    [javac]   location: variable path1 of type GeneralPath\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/data/gantt/junit/TaskSeriesCollectionTests.java:680: error: cannot find symbol\n    [javac]     path2.close();\n    [javac]          ^\n    [javac]   symbol:   method close()\n    [javac]   location: variable path2 of type GeneralPath\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:766: error: no suitable method found for append(Rectangle)\n    [javac]     path1.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:769: error: no suitable method found for append(Rectangle)\n    [javac]     path2.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:772: error: no suitable method found for append(Rectangle)\n    [javac]     path3.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_11/build\n    [javac] 4 warnings\n    [javac] Compiling 356 source files to /root/libro/data/Defects4J/repos/Chart_11/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:766: error: no suitable method found for append(Rectangle)\n    [javac]     path1.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:769: error: no suitable method found for append(Rectangle)\n    [javac]     path2.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_11/tests/org/jfree/chart/renderer/junit/AbstractRendererTests.java:772: error: no suitable method found for append(Rectangle)\n    [javac]     path3.append(new Rectangle(0, 0, 10, 10));\n    [javac]          ^\n    [javac]     method Path2D.append(Shape,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(float,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(double,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method Float.append(PathIterator,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_37": {
        "Lang_37_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsTest.testAddAllMixedTypesAutoGen(ArrayUtilsTest.java:2564)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:588)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsTest.java:2564)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:585)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_22": {
        "Lang_22_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 4);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     assertEquals(2, f.getGreatestCommonDivisor());\n    [javac]                      ^\n    [javac]   symbol:   method getGreatestCommonDivisor()\n    [javac]   location: variable f of type Fraction\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 4);\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     assertEquals(2, f.getGreatestCommonDivisor());\n    [javac]                      ^\n    [javac]   symbol:   method getGreatestCommonDivisor()\n    [javac]   location: variable f of type Fraction\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     result = f.reduce();\n    [javac]     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     assertEquals(Integer.MIN_VALUE, result.getNumerator());\n    [javac]                                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(2, result.getDenominator());\n    [javac]                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     result = f.reduce();\n    [javac]     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     assertEquals(Integer.MIN_VALUE, result.getNumerator());\n    [javac]                                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(2, result.getDenominator());\n    [javac]                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction f = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGCDFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGCDFailureAutoGen\njunit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGCDFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGCDFailureAutoGen\njunit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_22_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     result = f.reduce();\n    [javac]     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     assertEquals(Integer.MIN_VALUE, result.getNumerator());\n    [javac]                                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(2, result.getDenominator());\n    [javac]                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     result = f.reduce();\n    [javac]     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     assertEquals(Integer.MIN_VALUE, result.getNumerator());\n    [javac]                                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(2, result.getDenominator());\n    [javac]                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     result = f.reduce();\n    [javac]     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     assertEquals(Integer.MIN_VALUE, result.getNumerator());\n    [javac]                                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(2, result.getDenominator());\n    [javac]                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1340: error: cannot find symbol\n    [javac]     result = f.reduce();\n    [javac]     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: cannot find symbol\n    [javac]     assertEquals(Integer.MIN_VALUE, result.getNumerator());\n    [javac]                                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: cannot find symbol\n    [javac]     assertEquals(2, result.getDenominator());\n    [javac]                     ^\n    [javac]   symbol:   variable result\n    [javac]   location: class FractionTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testFractionReducingIntegerMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testFractionReducingIntegerMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-2147483648> but was:<-1073741824>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_10": {
        "Lang_10_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhitespaceAutoGen(FastDateFormatTest.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhitespaceAutoGen(FastDateFormatTest.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen\njunit.framework.AssertionFailedError: Expected a ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpaceAutoGen(FastDateFormatTest.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen\njunit.framework.AssertionFailedError: Expected a ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpaceAutoGen(FastDateFormatTest.java:318)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpacesAutoGen(FastDateFormatTest.java:319)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpacesAutoGen(FastDateFormatTest.java:319)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: SimpleDateFormat\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: SimpleDateFormat\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpacesAutoGen(FastDateFormatTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpacesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpacesAutoGen(FastDateFormatTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpaceAutoGen(FastDateFormatTest.java:319)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpaceAutoGen(FastDateFormatTest.java:319)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser();\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: no arguments\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: SimpleDateFormat\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(sdf);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: SimpleDateFormat\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_14": {
        "Lang_14_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"Hello\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"Hello\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"hello\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2920: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"hello\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: Name is abstract; cannot be instantiated\n    [javac]     javax.lang.model.element.Name name = new javax.lang.model.element.Name(\"test\");\n    [javac]                                          ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1777: error: cannot find symbol\n    [javac]     Name name = new Name(\"Hello\");\n    [javac]                     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                                                       ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     javax.lang.model.element.Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                                                       ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2119: error: cannot find symbol\n    [javac]     Name name = javax.lang.model.element.Name.of(\"test\");\n    [javac]                                              ^\n    [javac]   symbol:   method of(String)\n    [javac]   location: interface Name\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_36": {
        "Lang_36_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_36_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalPointAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_30": {
        "Lang_30_n10.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n2.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n7.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n6.txt": "[error] JavaSyntaxError('')",
        "Lang_30_n4.txt": "[error] JavaSyntaxError('')"
    },
    "Lang_23": {
        "Lang_23_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:343: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,MessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:343: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,MessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"pattern\");\n    [javac]                                     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:346: error: cannot find symbol\n    [javac]     assertNotEquals(format1, new Object());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,Object)\n    [javac]   location: class FastDateFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"pattern\");\n    [javac]                                     ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:346: error: cannot find symbol\n    [javac]     assertNotEquals(format1, new Object());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,Object)\n    [javac]   location: class FastDateFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:401: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:403: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:401: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java:403: error: cannot find symbol\n    [javac]     assertNotEquals(fmt1, fmt3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrTokenizerTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:344: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,MessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:344: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format3);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,MessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:344: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:344: error: cannot find symbol\n    [javac]     assertNotEquals(format1, format2);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(ExtendedMessageFormat,ExtendedMessageFormat)\n    [javac]   location: class FastDateFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_23_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new java.text.MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_23/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_23/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java:342: error: incompatible types: MessageFormat cannot be converted to ExtendedMessageFormat\n    [javac]     ExtendedMessageFormat format3 = new java.text.MessageFormat(\"test\");\n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_16": {
        "Lang_16_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for 0X1234\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for 0X1234\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for upper-case hex\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for upper-case hex\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexUpperAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexUpperAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexUpperAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_3": {
        "Time_3_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1028: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1030: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1028: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1030: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_3_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:00:00.000+0[1]:00> but was:<...10-30T02:00:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen\njunit.framework.ComparisonFailure: expected:<2011-10-30T0[2]:00:00.000+01:00> but was:<2011-10-30T0[3]:00:00.000+01:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDays0AutoGen\njunit.framework.ComparisonFailure: expected:<2011-10-30T0[2]:00:00.000+01:00> but was:<2011-10-30T0[3]:00:00.000+01:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysAutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1034: error: cannot find symbol\n    [javac]     assertNotEquals(\"2011-10-30T02:00:00.000+01:00\", mdt.toString());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1034: error: cannot find symbol\n    [javac]     assertNotEquals(\"2011-10-30T02:00:00.000+01:00\", mdt.toString());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_3_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1028: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1030: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1028: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1030: error: integer number too large\n    [javac]     assertEquals(1319940000000, mdt.toInstant().getMillis());\n    [javac]                  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_3_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:00:00.000+0[2]:00> but was:<...10-30T02:00:00.000+0[1]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1035: error: cannot find symbol\n    [javac]     assertEquals(mdt.getInstant().getMillis(), mdt.toInstant().getMillis());\n    [javac]                     ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable mdt of type MutableDateTime\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:1035: error: cannot find symbol\n    [javac]     assertEquals(mdt.getInstant().getMillis(), mdt.toInstant().getMillis());\n    [javac]                     ^\n    [javac]   symbol:   method getInstant()\n    [javac]   location: variable mdt of type MutableDateTime\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_32": {
        "Lang_32_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.EMPTY_STYLE;\n    [javac]                                        ^\n    [javac]   symbol:   variable EMPTY_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.EMPTY_STYLE;\n    [javac]                                        ^\n    [javac]   symbol:   variable EMPTY_STYLE\n    [javac]   location: class ToStringStyle\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1008: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     new ToStringStyle();\n    [javac]     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1008: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     new ToStringStyle();\n    [javac]     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:222: error: cannot find symbol\n    [javac]     WebApplicationContext context = new XmlWebApplicationContext();\n    [javac]     ^\n    [javac]   symbol:   class WebApplicationContext\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:222: error: cannot find symbol\n    [javac]     WebApplicationContext context = new XmlWebApplicationContext();\n    [javac]                                         ^\n    [javac]   symbol:   class XmlWebApplicationContext\n    [javac]   location: class StopWatchTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:222: error: cannot find symbol\n    [javac]     WebApplicationContext context = new XmlWebApplicationContext();\n    [javac]     ^\n    [javac]   symbol:   class WebApplicationContext\n    [javac]   location: class StopWatchTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:222: error: cannot find symbol\n    [javac]     WebApplicationContext context = new XmlWebApplicationContext();\n    [javac]                                         ^\n    [javac]   symbol:   class XmlWebApplicationContext\n    [javac]   location: class StopWatchTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:573: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:573: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.getInstance();\n    [javac]                                        ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: cannot find symbol\n    [javac]     assertNotEquals(0, Runtime.getRuntime().freeMemory());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(int,long)\n    [javac]   location: class ToStringBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: cannot find symbol\n    [javac]     ToStringStyle style = ToStringStyle.getInstance();\n    [javac]                                        ^\n    [javac]   symbol:   method getInstance()\n    [javac]   location: class ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: cannot find symbol\n    [javac]     assertNotEquals(0, Runtime.getRuntime().freeMemory());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(int,long)\n    [javac]   location: class ToStringBuilderTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:227: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:227: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: lambda expressions are not supported in -source 6\n    [javac]         new Thread(() -> {\n    [javac]                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: lambda expressions are not supported in -source 6\n    [javac]         new Thread(() -> {\n    [javac]                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:573: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:573: error: diamond operator is not supported in -source 6\n    [javac]     ThreadLocal<ToStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                              ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java:223: error: lambda expressions are not supported in -source 6\n    [javac]     new Thread(() -> {\n    [javac]                   ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_35": {
        "Lang_35_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: expected same:<class java.lang.String> was not:<class [Ljava.lang.String;>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: expected same:<class java.lang.String> was not:<class [Ljava.lang.String;>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     assertArrayEquals(new Class<?>[]{String.class}, result.getClass().getGenericInterfaces());\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(Class<?>[],Type[])\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     assertArrayEquals(new Class<?>[]{String.class}, result.getClass().getGenericInterfaces());\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(Class<?>[],Type[])\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_35_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected ArrayUtils.add() to throw an exception\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:595)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAutoGen(ArrayUtilsAddTest.java:592)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithBothNullParamsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithBothNullParamsAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithBothNullParamsAutoGen(ClassUtilsTest.java:806)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     assertArrayInstanceOf(String.class, result);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayInstanceOf(Class<String>,Object[])\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     assertArrayInstanceOf(String.class, result);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayInstanceOf(Class<String>,Object[])\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_35_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: expected same:<class java.lang.Object> was not:<class [Ljava.lang.String;>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: expected same:<class java.lang.Object> was not:<class [Ljava.lang.String;>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithNullsAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithNullsAutoGen(ClassUtilsTest.java:807)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: expected same:<class java.lang.Object> was not:<class [Ljava.lang.String;>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njunit.framework.AssertionFailedError: expected same:<class java.lang.Object> was not:<class [Ljava.lang.String;>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_9": {
        "Time_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT+23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT+23:60:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:610: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT-23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:612: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:617: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT-23:60:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:619: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 8 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT+23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT+23:60:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:610: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT-23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:612: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:617: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"GMT-23:60:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:619: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 8 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseZoneId(\"Etc/GMT+23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseZoneId(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseZoneId(\"Etc/GMT-24:00:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseZoneId(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseZoneId(\"Etc/GMT+23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseZoneId(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseZoneId(\"Etc/GMT-24:00:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseZoneId(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:60:00\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:599: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"24:00:00\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:609: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:60\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:611: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:615: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:60.000\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:617: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:621: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:59.999\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:623: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 10 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:60:00\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:599: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"24:00:00\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:609: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:60\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:611: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:615: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:60.000\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:617: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:621: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:59.999\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:623: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 10 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTZID(\"UTC+24:00:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTZID(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseTZID(\"UTC-24:00:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTZID(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTZID(\"UTC+24:00:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTZID(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseTZID(\"UTC-24:00:00.000\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTZID(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC+23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC-23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:610: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC+23:59:60\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:612: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:617: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC-23:59:60\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:619: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:624: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC+23:59:59.999\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:626: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 10 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC+23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC-23:60:00\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:610: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC+23:59:60\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:612: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:617: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC-23:59:60\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:619: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:624: error: cannot find symbol\n    [javac]         DateTimeZone.parseTimeZone(\"UTC+23:59:59.999\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTimeZone(String)\n    [javac]   location: class DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:626: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 10 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTZOffset(\"23:59:59.999\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTZOffset(String)\n    [javac]   location: class DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:596: error: cannot find symbol\n    [javac]         DateTimeZone.parseTZOffset(\"23:59:59.999\");\n    [javac]                     ^\n    [javac]   symbol:   method parseTZOffset(String)\n    [javac]   location: class DateTimeZone\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:60.000\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:599: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:60:00.000\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:59:60.000\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:599: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         zone.parseDateTime(\"23:60:00.000\");\n    [javac]             ^\n    [javac]   symbol:   method parseDateTime(String)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]         tz.setRawOffset(24 * 60 * 60 * 1000);\n    [javac]           ^\n    [javac]   symbol:   method setRawOffset(int)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1061: error: cannot find symbol\n    [javac]         tz.setRawOffset(-24 * 60 * 60 * 1000);\n    [javac]           ^\n    [javac]   symbol:   method setRawOffset(int)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: cannot find symbol\n    [javac]         tz.setRawOffset(24 * 60 * 60 * 1000);\n    [javac]           ^\n    [javac]   symbol:   method setRawOffset(int)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1061: error: cannot find symbol\n    [javac]         tz.setRawOffset(-24 * 60 * 60 * 1000);\n    [javac]           ^\n    [javac]   symbol:   method setRawOffset(int)\n    [javac]   location: variable tz of type DateTimeZone\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: method toTimeZone in class DateTimeZone cannot be applied to given types;\n    [javac]         dtz.toTimeZone(new DateTime(2015, 1, 1, 24, 0, 0, 0).getMillis());\n    [javac]            ^\n    [javac]   required: no arguments\n    [javac]   found: long\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1055: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1059: error: method toTimeZone in class DateTimeZone cannot be applied to given types;\n    [javac]         dtz.toTimeZone(new DateTime(2015, 1, 1, 0, 0, 0, 999000000).getMillis());\n    [javac]            ^\n    [javac]   required: no arguments\n    [javac]   found: long\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1061: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeZone\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1053: error: method toTimeZone in class DateTimeZone cannot be applied to given types;\n    [javac]         dtz.toTimeZone(new DateTime(2015, 1, 1, 24, 0, 0, 0).getMillis());\n    [javac]            ^\n    [javac]   required: no arguments\n    [javac]   found: long\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1055: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1059: error: method toTimeZone in class DateTimeZone cannot be applied to given types;\n    [javac]         dtz.toTimeZone(new DateTime(2015, 1, 1, 0, 0, 0, 999000000).getMillis());\n    [javac]            ^\n    [javac]   required: no arguments\n    [javac]   found: long\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1061: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeZone\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         zone.toMillis(999999999999999999L);\n    [javac]             ^\n    [javac]   symbol:   method toMillis(long)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:599: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         zone.toMillis(-999999999999999999L);\n    [javac]             ^\n    [javac]   symbol:   method toMillis(long)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:597: error: cannot find symbol\n    [javac]         zone.toMillis(999999999999999999L);\n    [javac]             ^\n    [javac]   symbol:   method toMillis(long)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:599: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:603: error: cannot find symbol\n    [javac]         zone.toMillis(-999999999999999999L);\n    [javac]             ^\n    [javac]   symbol:   method toMillis(long)\n    [javac]   location: variable zone of type DateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:605: error: cannot find symbol\n    [javac]     } catch (DateTimeException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_20": {
        "Time_20_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testDateTimeZoneFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testDateTimeZoneFailureAutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testDateTimeZoneFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testDateTimeZoneFailureAutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testDateTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testDateTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testDateTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testDateTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1046: error: cannot find symbol\n    [javac]         DateTime parsedDateTime = parseStringToDateTime(convertDateTimeToFormattedString(dateTime.withZone(zone)));\n    [javac]                                                         ^\n    [javac]   symbol:   method convertDateTimeToFormattedString(DateTime)\n    [javac]   location: class TestDateTimeZone\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1046: error: cannot find symbol\n    [javac]         DateTime parsedDateTime = parseStringToDateTime(convertDateTimeToFormattedString(dateTime.withZone(zone)));\n    [javac]                                                         ^\n    [javac]   symbol:   method convertDateTimeToFormattedString(DateTime)\n    [javac]   location: class TestDateTimeZone\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_20_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1050: error: cannot find symbol\n    [javac]     String formattedDateTime = DateTimeFormat.forPattern(\"MM/dd/yyyy HH:mm:ss.SSS ZZZ\").print(dateTime);\n    [javac]                                ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     DateTime parsedDateTime = DateTimeFormat.forPattern(\"MM/dd/yyyy HH:mm:ss.SSS ZZZ\").parseDateTime(formattedDateTime);\n    [javac]                               ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class TestDateTimeZone\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1050: error: cannot find symbol\n    [javac]     String formattedDateTime = DateTimeFormat.forPattern(\"MM/dd/yyyy HH:mm:ss.SSS ZZZ\").print(dateTime);\n    [javac]                                ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     DateTime parsedDateTime = DateTimeFormat.forPattern(\"MM/dd/yyyy HH:mm:ss.SSS ZZZ\").parseDateTime(formattedDateTime);\n    [javac]                               ^\n    [javac]   symbol:   variable DateTimeFormat\n    [javac]   location: class TestDateTimeZone\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<Africa/Asm[e]ra> but was:<Africa/Asm[a]ra>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<Africa/Asm[e]ra> but was:<Africa/Asm[a]ra>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     String formattedDateTime = formatter.print(dt);\n    [javac]                                ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:444: error: cannot find symbol\n    [javac]     DateTime parsedDateTime = formatter.parseDateTime(formattedDateTime);\n    [javac]                               ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:443: error: cannot find symbol\n    [javac]     String formattedDateTime = formatter.print(dt);\n    [javac]                                ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:444: error: cannot find symbol\n    [javac]     DateTime parsedDateTime = formatter.parseDateTime(formattedDateTime);\n    [javac]                               ^\n    [javac]   symbol:   variable formatter\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_20_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testDateTimeZoneIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testDateTimeZoneIssue126AutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testDateTimeZoneIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testDateTimeZoneIssue126AutoGen\njunit.framework.ComparisonFailure: expected:<America/A[tka]> but was:<America/A[dak]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestStringConverter::testJodaDateTimeZoneIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestStringConverter::testJodaDateTimeZoneIssue126AutoGen\njunit.framework.AssertionFailedError: expected not same\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failSame(Assert.java:320)\n\tat junit.framework.Assert.assertNotSame(Assert.java:306)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestStringConverter::testJodaDateTimeZoneIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestStringConverter::testJodaDateTimeZoneIssue126AutoGen\njunit.framework.AssertionFailedError: expected not same\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failSame(Assert.java:320)\n\tat junit.framework.Assert.assertNotSame(Assert.java:306)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneAutoGen\njunit.framework.AssertionFailedError: Time zone Africa/Asmera failed to construct into the proper date time zone - constructed time zone = Africa/Asmara\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneAutoGen(TestDateTimeZone.java:1047)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneAutoGen\njunit.framework.AssertionFailedError: Time zone Africa/Asmera failed to construct into the proper date time zone - constructed time zone = Africa/Asmara\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneAutoGen(TestDateTimeZone.java:1047)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: incompatible types: Set<String> cannot be converted to String[]\n    [javac]     String[] timeZones = DateTimeZone.getAvailableIDs();\n    [javac]                                                      ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: incompatible types: Set<String> cannot be converted to String[]\n    [javac]     String[] timeZones = DateTimeZone.getAvailableIDs();\n    [javac]                                                      ^\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Chart_2": {
        "Chart_2_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/junit/StackedBarChartTests.java:225: error: no suitable method found for iterateRangeBounds(int[],Integer[])\n    [javac]     DatasetUtilities.iterateRangeBounds(range, new Integer[]{});\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int[] cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int[] cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/chart/junit/StackedBarChartTests.java:225: error: no suitable method found for iterateRangeBounds(int[],Integer[])\n    [javac]     DatasetUtilities.iterateRangeBounds(range, new Integer[]{});\n    [javac]                     ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int[] cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int[] cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     DefaultTableModel model = new DefaultTableModel(new String[][]{new String[]{\"1\", \"2\"}, new String[]{\"3\", \"4\"}}, columns);\n    [javac]     ^\n    [javac]   symbol:   class DefaultTableModel\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     DefaultTableModel model = new DefaultTableModel(new String[][]{new String[]{\"1\", \"2\"}, new String[]{\"3\", \"4\"}}, columns);\n    [javac]                                   ^\n    [javac]   symbol:   class DefaultTableModel\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     DefaultTableModel model = new DefaultTableModel(new String[][]{new String[]{\"1\", \"2\"}, new String[]{\"3\", \"4\"}}, columns);\n    [javac]     ^\n    [javac]   symbol:   class DefaultTableModel\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: cannot find symbol\n    [javac]     DefaultTableModel model = new DefaultTableModel(new String[][]{new String[]{\"1\", \"2\"}, new String[]{\"3\", \"4\"}}, columns);\n    [javac]                                   ^\n    [javac]   symbol:   class DefaultTableModel\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1263: error: no suitable method found for iterateRangeBounds(double[],double,double)\n    [javac]     double[] result = DatasetUtilities.iterateRangeBounds(bounds, 0.5, 0.5);\n    [javac]                                       ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1264: error: cannot find symbol\n    [javac]     assertArrayEquals(expected, result);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(double[],double[])\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1263: error: no suitable method found for iterateRangeBounds(double[],double,double)\n    [javac]     double[] result = DatasetUtilities.iterateRangeBounds(bounds, 0.5, 0.5);\n    [javac]                                       ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1264: error: cannot find symbol\n    [javac]     assertArrayEquals(expected, result);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(double[],double[])\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities util = new DatasetUtilities();\n    [javac]                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1264: error: no suitable method found for iterateRangeBounds(double[],double[],double[],double[],String[])\n    [javac]     util.iterateRangeBounds(new double[] {1.0, 5.0}, new double[] {1.0, 5.0}, new double[] {1.0, 5.0}, values, strings);\n    [javac]         ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities util = new DatasetUtilities();\n    [javac]                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1264: error: no suitable method found for iterateRangeBounds(double[],double[],double[],double[],String[])\n    [javac]     util.iterateRangeBounds(new double[] {1.0, 5.0}, new double[] {1.0, 5.0}, new double[] {1.0, 5.0}, values, strings);\n    [javac]         ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:250: error: cannot find symbol\n    [javac]     IntervalIterator it = new IntervalIterator(1, 10, 2);\n    [javac]     ^\n    [javac]   symbol:   class IntervalIterator\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:250: error: cannot find symbol\n    [javac]     IntervalIterator it = new IntervalIterator(1, 10, 2);\n    [javac]                               ^\n    [javac]   symbol:   class IntervalIterator\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:269: error: cannot find symbol\n    [javac]     } catch (NoSuchElementException e) {\n    [javac]              ^\n    [javac]   symbol:   class NoSuchElementException\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:250: error: cannot find symbol\n    [javac]     IntervalIterator it = new IntervalIterator(1, 10, 2);\n    [javac]     ^\n    [javac]   symbol:   class IntervalIterator\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:250: error: cannot find symbol\n    [javac]     IntervalIterator it = new IntervalIterator(1, 10, 2);\n    [javac]                               ^\n    [javac]   symbol:   class IntervalIterator\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:269: error: cannot find symbol\n    [javac]     } catch (NoSuchElementException e) {\n    [javac]              ^\n    [javac]   symbol:   class NoSuchElementException\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1269: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     Number[] bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 0, 1);\n    [javac]                                       ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1273: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 1, 2);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1277: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 2, 3);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1281: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 3, 4);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1285: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 4, 5);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1269: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     Number[] bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 0, 1);\n    [javac]                                       ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1273: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 1, 2);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1277: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 2, 3);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1281: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 3, 4);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1285: error: no suitable method found for iterateRangeBounds(DefaultCategoryDataset,String,String,int,int)\n    [javac]     bounds = DatasetUtilities.iterateRangeBounds(dataset, \"Series\", \"Category1\", 4, 5);\n    [javac]                              ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/XYSeriesTests.java:783: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities dataset = new DatasetUtilities();\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/XYSeriesTests.java:784: error: no suitable method found for iterateRangeBounds(int,int)\n    [javac]     int[] ranges = dataset.iterateRangeBounds(0, 5);\n    [javac]                           ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to XYDataset)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/XYSeriesTests.java:783: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities dataset = new DatasetUtilities();\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/XYSeriesTests.java:784: error: no suitable method found for iterateRangeBounds(int,int)\n    [javac]     int[] ranges = dataset.iterateRangeBounds(0, 5);\n    [javac]                           ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to XYDataset)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     IntervalType intervalType = IntervalType.CENTER;\n    [javac]     ^\n    [javac]   symbol:   class IntervalType\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     IntervalType intervalType = IntervalType.CENTER;\n    [javac]                                 ^\n    [javac]   symbol:   variable IntervalType\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     IntervalType intervalType = IntervalType.CENTER;\n    [javac]     ^\n    [javac]   symbol:   class IntervalType\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: cannot find symbol\n    [javac]     IntervalType intervalType = IntervalType.CENTER;\n    [javac]                                 ^\n    [javac]   symbol:   variable IntervalType\n    [javac]   location: class DatasetUtilitiesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:475: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities dataset = new DatasetUtilities();\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:476: error: no suitable method found for iterateRangeBounds(int,int)\n    [javac]     int[] values = dataset.iterateRangeBounds(10, 5);\n    [javac]                           ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to XYDataset)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:477: error: cannot find symbol\n    [javac]     assertArrayEquals(new int[]{5, 15}, values);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(int[],int[])\n    [javac]   location: class StatisticsTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:475: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities dataset = new DatasetUtilities();\n    [javac]                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:476: error: no suitable method found for iterateRangeBounds(int,int)\n    [javac]     int[] values = dataset.iterateRangeBounds(10, 5);\n    [javac]                           ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to XYDataset)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/statistics/junit/StatisticsTests.java:477: error: cannot find symbol\n    [javac]     assertArrayEquals(new int[]{5, 15}, values);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(int[],int[])\n    [javac]   location: class StatisticsTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:251: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities iter = new DatasetUtilities();\n    [javac]                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:254: error: no suitable method found for iterateRangeBounds(int,int,int[])\n    [javac]     iter.iterateRangeBounds(1, 10, actual);\n    [javac]         ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:255: error: cannot find symbol\n    [javac]     assertArrayEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(int[],int[])\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:251: error: DatasetUtilities() has private access in DatasetUtilities\n    [javac]     DatasetUtilities iter = new DatasetUtilities();\n    [javac]                             ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:254: error: no suitable method found for iterateRangeBounds(int,int,int[])\n    [javac]     iter.iterateRangeBounds(1, 10, actual);\n    [javac]         ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/xy/junit/DefaultWindDatasetTests.java:255: error: cannot find symbol\n    [javac]     assertArrayEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertArrayEquals(int[],int[])\n    [javac]   location: class DefaultWindDatasetTests\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_33": {
        "Lang_33_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsToClassNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(args);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(args);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(objects);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> result = ClassUtils.toClass(args);\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> result = ClassUtils.toClass(args);\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_33_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_33/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_33/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:977: error: incompatible types: Class<?>[] cannot be converted to Class<?>\n    [javac]         Class<?> clazz = ClassUtils.toClass(array);\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_24": {
        "Lang_24_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIssueAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIssueAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIssueAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIssueNumberUtilsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_29": {
        "Lang_29_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_1": {
        "Lang_1_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: Expected Long.parseLong() to handle hex numbers with more than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongHexAutoGen\njunit.framework.AssertionFailedError: Expected Long.parseLong() to handle hex numbers with more than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongHexAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex number with more than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateLongAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex number with more than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateLongAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njunit.framework.AssertionFailedError: Expected Long.parseLong to handle hex number 0x1234567890abcdef\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLongHexAutoGen(NumberUtilsTest.java:1372)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njunit.framework.AssertionFailedError: Expected Long.parseLong to handle hex number 0x1234567890abcdef\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLongHexAutoGen(NumberUtilsTest.java:1372)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1374: error: integer number too large\n    [javac]     assertEquals(0x12345678901234567890L, NumberUtils.createLong(\"0x12345678901234567890\"));\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1374: error: integer number too large\n    [javac]     assertEquals(0x12345678901234567890L, NumberUtils.createLong(\"0x12345678901234567890\"));\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njunit.framework.AssertionFailedError: Expected Long.parseLong() to parse a long hex number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLongHexAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLongHexAutoGen\njunit.framework.AssertionFailedError: Expected Long.parseLong() to parse a long hex number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLongHexAutoGen(NumberUtilsTest.java:1371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_17": {
        "Time_17_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-25T23:01:00.000-03:00> but was:<2012-02-25T23:01:00.000-02:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapFailureAutoGen\njunit.framework.ComparisonFailure: expected:<...02-25T23:01:00.000-0[3]:00> but was:<...02-25T23:01:00.000-0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<...02-25T23:01:00.000-0[3]:00> but was:<...02-25T23:01:00.000-0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.ComparisonFailure: expected:<...02-25T23:01:00.000-0[3]:00> but was:<...02-25T23:01:00.000-0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.ComparisonFailure: expected:<...02-25T23:59:59.999-0[3]:00> but was:<...02-25T23:59:59.999-0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.ComparisonFailure: expected:<...02-25T23:59:59.999-0[3]:00> but was:<...02-25T23:59:59.999-0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: incompatible types: DateTimeZone cannot be converted to TimeZone\n    [javac]     TimeZone.setDefault(dtz);\n    [javac]                         ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: incompatible types: DateTimeZone cannot be converted to TimeZone\n    [javac]     TimeZone.setDefault(dtz);\n    [javac]                         ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1234: error: cannot find symbol\n    [javac]     assertEquals(dtch.getOffset(), -2 * 60 * 60 * 1000);\n    [javac]                      ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: cannot find symbol\n    [javac]     assertEquals(dtch.getOffset(), -3 * 60 * 60 * 1000);\n    [javac]                      ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1234: error: cannot find symbol\n    [javac]     assertEquals(dtch.getOffset(), -2 * 60 * 60 * 1000);\n    [javac]                      ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: cannot find symbol\n    [javac]     assertEquals(dtch.getOffset(), -3 * 60 * 60 * 1000);\n    [javac]                      ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_17_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.ComparisonFailure: expected:<...02-25T23:01:00.000-0[2]:00> but was:<...02-25T23:01:00.000-0[3]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n8.txt": "[error] JavaSyntaxError('')",
        "Time_17_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-25T23:01:00.000-02:00> but was:<2012-02-25T23:01:00.000-03:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTimeZone.java:1047: error: cannot find symbol\n    [javac]     assertEquals(dtch.getOffset(), -3 * 60 * 60 * 1000);\n    [javac]                      ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTimeZone.java:1047: error: cannot find symbol\n    [javac]     assertEquals(dtch.getOffset(), -3 * 60 * 60 * 1000);\n    [javac]                      ^\n    [javac]   symbol:   method getOffset()\n    [javac]   location: variable dtch of type DateTime\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Lang_6": {
        "Lang_6_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testCharSequenceTranslatorFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testCharSequenceTranslatorFailureAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:885: error: <anonymous org.apache.commons.lang3.text.StrTokenizerTest$4> is not abstract and does not override abstract method translate(CharSequence,int,Writer) in CharSequenceTranslator\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator() {\n    [javac]                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:886: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:885: error: <anonymous org.apache.commons.lang3.text.StrTokenizerTest$4> is not abstract and does not override abstract method translate(CharSequence,int,Writer) in CharSequenceTranslator\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator() {\n    [javac]                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:886: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1862: error: <anonymous org.apache.commons.lang3.text.StrBuilderTest$2> is not abstract and does not override abstract method translate(CharSequence,int,Writer) in CharSequenceTranslator\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator() {\n    [javac]                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1870: error: cannot find symbol\n    [javac]     translator.translate(\"\\uD83D\\uDE30\".toCharArray(), 0, 2, new StringWriter());\n    [javac]                                                                  ^\n    [javac]   symbol:   class StringWriter\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1862: error: <anonymous org.apache.commons.lang3.text.StrBuilderTest$2> is not abstract and does not override abstract method translate(CharSequence,int,Writer) in CharSequenceTranslator\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator() {\n    [javac]                                                                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java:1870: error: cannot find symbol\n    [javac]     translator.translate(\"\\uD83D\\uDE30\".toCharArray(), 0, 2, new StringWriter());\n    [javac]                                                                  ^\n    [javac]   symbol:   class StringWriter\n    [javac]   location: class StrBuilderTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testStringIndexOutOfBoundsExceptionAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testCharSequenceTranslatorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testCharSequenceTranslatorAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testCharSequenceTranslatorAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_1": {
        "Chart_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/data/junit/DefaultKeyedValuesTests.java:524: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class DefaultKeyedValuesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/data/junit/DefaultKeyedValuesTests.java:524: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class DefaultKeyedValuesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/data/junit/DefaultKeyedValuesTests.java:524: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class DefaultKeyedValuesTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/data/junit/DefaultKeyedValuesTests.java:524: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class DefaultKeyedValuesTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender renderer = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender renderer = new AbstractCategoryItemRender();\n    [javac]                                               ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender renderer = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender renderer = new AbstractCategoryItemRender();\n    [javac]                                               ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:252: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender();\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYAreaRenderer2Tests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]     ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1266: error: cannot find symbol\n    [javac]     AbstractCategoryItemRender render = new AbstractCategoryItemRender() {\n    [javac]                                             ^\n    [javac]   symbol:   class AbstractCategoryItemRender\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1267: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/data/time/junit/YearTests.java:444: error: method references are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, render::getLegendItems);\n    [javac]                                                      ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/data/time/junit/YearTests.java:444: error: method references are not supported in -source 6\n    [javac]     assertThrows(NullPointerException.class, render::getLegendItems);\n    [javac]                                                      ^\n    [javac]   (use -source 8 or higher to enable method references)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_3": {
        "Lang_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatTruncationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatTruncationAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatTruncationAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatTruncationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatTruncationAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatTruncationAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberUtils.createNumber to throw exception for double value, but got class java.lang.Float\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberUtils.createNumber to throw exception for double value, but got class java.lang.Float\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: expected:<1.0> but was:<1.0001>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatAutoGen\njunit.framework.AssertionFailedError: expected:<1.0> but was:<1.0001>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatAutoGen(NumberUtilsTest.java:1359)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatAutoGen(NumberUtilsTest.java:1359)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatOnlyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatOnlyAutoGen\njunit.framework.AssertionFailedError: Expected a NumberFormatException for a too large float value\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatOnlyAutoGen(NumberUtilsTest.java:1364)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatOnlyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatOnlyAutoGen\njunit.framework.AssertionFailedError: Expected a NumberFormatException for a too large float value\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatOnlyAutoGen(NumberUtilsTest.java:1364)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen\njunit.framework.AssertionFailedError: Expected a Double or BigDecimal, but got Float\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatingPointAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberFloatingPointAutoGen\njunit.framework.AssertionFailedError: Expected a Double or BigDecimal, but got Float\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFloatingPointAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsFloatAutoGen(NumberUtilsTest.java:1358)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for non-Float number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberForFloatsAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for non-Float number\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberForFloatsAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Double<1.0> but was: java.lang.Float<1.0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatPrecisionAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Double<1.0> but was: java.lang.Float<1.0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatIssueAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Double<1.2345> but was: java.lang.Float<1.2345>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsFloatIssueAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Double<1.2345> but was: java.lang.Float<1.2345>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_5": {
        "Lang_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_5/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_5/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:530: error: exception ParseException is never thrown in body of corresponding try statement\n    [javac]     } catch (ParseException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_5/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_5/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:530: error: exception ParseException is never thrown in body of corresponding try statement\n    [javac]     } catch (ParseException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected LocaleUtils.toLocale to throw an exception for locale fr__P\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected LocaleUtils.toLocale to throw an exception for locale fr__P\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected LocaleUtils.toLocale to throw an exception for locale 'fr__P'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected LocaleUtils.toLocale to throw an exception for locale 'fr__P'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected LocaleUtils.toLocale to throw an exception for locale 'fr'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Expected LocaleUtils.toLocale to throw an exception for locale 'fr'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_5": {
        "Time_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestLocalDateTime_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestLocalDateTime_Basics.java:1090)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestLocalDateTime_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestLocalDateTime_Basics.java:1090)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testIssueAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testIssueAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testIssueAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testIssueAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testIssueAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testIssueAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_11": {
        "Time_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> dtzb1.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> dtzb1.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder1 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:430: error: cannot find symbol\n    [javac]             DateTimeZoneBuilder builder2 = getTestDataTimeZoneBuilder();\n    [javac]                                            ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder1 = getTestDataTimeZoneBuilder();\n    [javac]                                    ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:430: error: cannot find symbol\n    [javac]             DateTimeZoneBuilder builder2 = getTestDataTimeZoneBuilder();\n    [javac]                                            ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder = getTestDataTimeZoneBuilder();\n    [javac]                                   ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestISOChronology\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder = getTestDataTimeZoneBuilder();\n    [javac]                                   ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestISOChronology\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder = getTestDataTimeZoneBuilder();\n    [javac]                                   ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder builder = getTestDataTimeZoneBuilder();\n    [javac]                                   ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:320: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:320: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1347: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1347: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:745: error: cannot find symbol\n    [javac]     getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]     ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:749: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:755: error: cannot find symbol\n    [javac]         getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ3\", true);\n    [javac]         ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:745: error: cannot find symbol\n    [javac]     getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]     ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:749: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:755: error: cannot find symbol\n    [javac]         getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ3\", true);\n    [javac]         ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:745: error: cannot find symbol\n    [javac]     getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]     ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:749: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:745: error: cannot find symbol\n    [javac]     getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n    [javac]     ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestMonthDay_Basics.java:749: error: cannot find symbol\n    [javac]             getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n    [javac]             ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder dtzb1 = getTestDataTimeZoneBuilder();\n    [javac]                                 ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:320: error: cannot find symbol\n    [javac]             DateTimeZoneBuilder dtzb2 = getTestDataTimeZoneBuilder();\n    [javac]                                         ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:315: error: cannot find symbol\n    [javac]     DateTimeZoneBuilder dtzb1 = getTestDataTimeZoneBuilder();\n    [javac]                                 ^\n    [javac]   symbol:   method getTestDataTimeZoneBuilder()\n    [javac]   location: class TestBuilder\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:320: error: cannot find symbol\n    [javac]             DateTimeZoneBuilder dtzb2 = getTestDataTimeZoneBuilder();\n    [javac]                                         ^\n    [javac]   symbol: method getTestDataTimeZoneBuilder()\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_17": {
        "Chart_17_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries ts = new TimeSeries();\n    [javac]                     ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries ts = new TimeSeries();\n    [javac]                     ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = series.clone();\n    [javac]                                    ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries timeSeries = new TimeSeries();\n    [javac]                             ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = timeSeries.clone();\n    [javac]                                        ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries timeSeries = new TimeSeries();\n    [javac]                             ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:775: error: incompatible types: Object cannot be converted to TimeSeries\n    [javac]     TimeSeries clone = timeSeries.clone();\n    [javac]                                        ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries ts = new TimeSeries();\n    [javac]                     ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries ts = new TimeSeries();\n    [javac]                     ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_10": {
        "Time_10_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]                           ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]                           ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]                           ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]                           ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:962: error: cannot find symbol\n    [javac]         assertEquals(59, Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays());\n    [javac]                                                   ^\n    [javac]   symbol:   method of(int,int)\n    [javac]   location: class MonthDay\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:962: error: cannot find symbol\n    [javac]         assertEquals(59, Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays());\n    [javac]                                                                      ^\n    [javac]   symbol:   method of(int,int)\n    [javac]   location: class MonthDay\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:962: error: cannot find symbol\n    [javac]         assertEquals(59, Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays());\n    [javac]                                                   ^\n    [javac]   symbol:   method of(int,int)\n    [javac]   location: class MonthDay\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:962: error: cannot find symbol\n    [javac]         assertEquals(59, Days.daysBetween(MonthDay.of(1, 1), MonthDay.of(2, 29)).getDays());\n    [javac]                                                                      ^\n    [javac]   symbol:   method of(int,int)\n    [javac]   location: class MonthDay\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]                           ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = MonthDay.of(1, 1);\n    [javac]                         ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = MonthDay.of(2, 29);\n    [javac]                           ^\n    [javac]   symbol:   variable MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_16": {
        "Chart_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java:296: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java:296: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java:296: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultMultiValueCategoryDatasetTests.java:296: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_2": {
        "Time_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Weekfields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Weekfields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Weekfields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Weekfields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1970, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1970, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Weekfields.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Weekfields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Weekfields.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Weekfields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2011, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(WeekdateProperties.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable WeekdateProperties\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2011, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(WeekdateProperties.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable WeekdateProperties\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]     partial.with(Fields.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]     partial.with(Fields.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_40": {
        "Lang_40_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: cannot find symbol\n    [javac]     assertNotEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: cannot find symbol\n    [javac]     assertNotEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1762: error: cannot find symbol\n    [javac]     assertNotEquals(lower, upper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1763: error: cannot find symbol\n    [javac]     assertNotEquals(lower, title);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1764: error: cannot find symbol\n    [javac]     assertNotEquals(upper, title);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1762: error: cannot find symbol\n    [javac]     assertNotEquals(lower, upper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1763: error: cannot find symbol\n    [javac]     assertNotEquals(lower, title);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1764: error: cannot find symbol\n    [javac]     assertNotEquals(upper, title);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1761: error: cannot find symbol\n    [javac]     assertNotEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1761: error: cannot find symbol\n    [javac]     assertNotEquals(expected, actual);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.ExtendedMessageFormatTest::testStringToCaseInsensitiveAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.ExtendedMessageFormatTest::testStringToCaseInsensitiveAutoGen\njunit.framework.ComparisonFailure: expected:<[hello]> but was:<[HELLO]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.ExtendedMessageFormatTest::testStringToCaseInsensitiveAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.ExtendedMessageFormatTest::testStringToCaseInsensitiveAutoGen\njunit.framework.ComparisonFailure: expected:<[hello]> but was:<[HELLO]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:417: error: incompatible types: String cannot be converted to Locale\n    [javac]     String upper = String.toUpperCase(original);\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:418: error: incompatible types: String cannot be converted to Locale\n    [javac]     String lower = String.toLowerCase(original);\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: cannot find symbol\n    [javac]     assertNotEquals(original, upper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:420: error: cannot find symbol\n    [javac]     assertNotEquals(original, lower);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:417: error: incompatible types: String cannot be converted to Locale\n    [javac]     String upper = String.toUpperCase(original);\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:418: error: incompatible types: String cannot be converted to Locale\n    [javac]     String lower = String.toLowerCase(original);\n    [javac]                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: cannot find symbol\n    [javac]     assertNotEquals(original, upper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:420: error: cannot find symbol\n    [javac]     assertNotEquals(original, lower);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: incompatible types: String cannot be converted to Locale\n    [javac]     assertEquals(upper, String.toUpperCase(original));\n    [javac]                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:420: error: incompatible types: String cannot be converted to Locale\n    [javac]     assertEquals(lower, String.toLowerCase(original));\n    [javac]                                            ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:419: error: incompatible types: String cannot be converted to Locale\n    [javac]     assertEquals(upper, String.toUpperCase(original));\n    [javac]                                            ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:420: error: incompatible types: String cannot be converted to Locale\n    [javac]     assertEquals(lower, String.toLowerCase(original));\n    [javac]                                            ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsTest::testStringToCaseAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsTest::testStringToCaseAutoGen\njunit.framework.ComparisonFailure: expected:<[H]ello> but was:<[h]ello>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsTest::testStringToCaseAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsTest::testStringToCaseAutoGen\njunit.framework.ComparisonFailure: expected:<[H]ello> but was:<[h]ello>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:420: error: cannot find symbol\n    [javac]     assertNotEquals(original, lower);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:421: error: cannot find symbol\n    [javac]     assertNotEquals(original, upper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:420: error: cannot find symbol\n    [javac]     assertNotEquals(original, lower);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java:421: error: cannot find symbol\n    [javac]     assertNotEquals(original, upper);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class ExtendedMessageFormatTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Time_8": {
        "Time_8_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeZoneTransitionException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeZoneTransitionException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeZoneTransitionException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeZoneTransitionException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_8_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected DateTimeZone.forOffsetHoursMinutes to throw an exception for -0:30 offset\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected exception for offset -1:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected exception for offset -1:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected DateTimeZone.forOffsetHoursMinutes(-1, 30) to throw an exception\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected DateTimeZone.forOffsetHoursMinutes(-1, 30) to throw an exception\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeZoneTransitionException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeZoneTransitionException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java:598: error: cannot find symbol\n    [javac]     } catch (DateTimeZoneTransitionException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeZoneTransitionException\n    [javac]   location: class TestDateTimeFormatterBuilder\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected exception for offset -0:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1344: error: cannot find symbol\n    [javac]     } catch (DateTimeZoneTransitionException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeZoneTransitionException\n    [javac]   location: class TestDateTimeZoneCutover\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_8/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_8/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1344: error: cannot find symbol\n    [javac]     } catch (DateTimeZoneTransitionException e) {\n    [javac]              ^\n    [javac]   symbol:   class DateTimeZoneTransitionException\n    [javac]   location: class TestDateTimeZoneCutover\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected exception for offset -1:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected exception for offset -1:30\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected DateTimeZone.forOffsetHoursMinutes to throw an exception for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected exception for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected exception for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_28": {
        "Lang_28_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#65536;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#65536;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#65536;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#65536;]> but was:<[\ud800\udc00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:431: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:431: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(str);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     String actual = StringEscapeUtils.escapeXML(input);\n    [javac]                                      ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:428: error: cannot find symbol\n    [javac]     String xml = StringEscapeUtils.escapeXML(\"\\uD800\\uDC00\");\n    [javac]                                   ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:428: error: cannot find symbol\n    [javac]     String xml = StringEscapeUtils.escapeXML(\"\\uD800\\uDC00\");\n    [javac]                                   ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(input);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     assertNotEquals(input, escaped);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:429: error: cannot find symbol\n    [javac]     String escaped = StringEscapeUtils.escapeXML(input);\n    [javac]                                       ^\n    [javac]   symbol:   method escapeXML(String)\n    [javac]   location: class StringEscapeUtils\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: cannot find symbol\n    [javac]     assertNotEquals(input, escaped);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_13": {
        "Lang_13_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:372: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:372: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_16": {
        "Time_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     formatter.parseInto(buffer, instant);\n    [javac]              ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: StringBuilder,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     formatter.parseInto(buffer, instant);\n    [javac]              ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: StringBuilder,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(new DateTime(2011, 2, 28, 0, 0, 0, 0));\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(new DateTime(2011, 2, 28, 0, 0, 0, 0));\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(parsed, \"02/29\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(new DateTime(2011, 2, 28, 0, 0, 0, 0));\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:908: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(new DateTime(2011, 2, 28, 0, 0, 0, 0));\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(parsed, \"02/29\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 3 errors"
            },
            "success": false
        },
        "Time_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dtf.parseDateTime(\"02/29\", instant, parts);\n    [javac]        ^\n    [javac]   required: String\n    [javac]   found: String,DateTime,String[]\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseDateTime in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dtf.parseDateTime(\"02/29\", instant, parts);\n    [javac]        ^\n    [javac]   required: String\n    [javac]   found: String,DateTime,String[]\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTime(2001, 2, 28, 0, 0, 0, 0, zone).toInstant();\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTime_Basics\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTime(2001, 2, 28, 0, 0, 0, 0, zone).toInstant();\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTime_Basics\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(parsed, \"02\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(parsed, \"02\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: DateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1006: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     formatter.parseInto(buffer, instant);\n    [javac]              ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: StringBuilder,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1006: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     formatter.parseInto(buffer, instant);\n    [javac]              ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: StringBuilder,DateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:909: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTime(2011, 2, 28, 0, 0, 0, 0, zone);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:909: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTime(2011, 2, 28, 0, 0, 0, 0, zone);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1232: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dtf.parseInto(parsed, \"02/29\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: MutableDateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1232: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     dtf.parseInto(parsed, \"02/29\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: MutableDateTime,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1002: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2004, 2, 29, 0, 0, 0, 0, zone);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1002: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2004, 2, 29, 0, 0, 0, 0, zone);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1005: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(fields, \"20040229\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: String[],String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1002: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2004, 2, 29, 0, 0, 0, 0, zone);\n    [javac]     ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1002: error: cannot find symbol\n    [javac]     DateTimeInstant instant = new DateTimeInstant(2004, 2, 29, 0, 0, 0, 0, zone);\n    [javac]                                   ^\n    [javac]   symbol:   class DateTimeInstant\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1005: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     fmt.parseInto(fields, \"20040229\");\n    [javac]        ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: String[],String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 3 errors"
            },
            "success": false
        }
    },
    "Lang_31": {
        "Lang_31_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n2.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n4.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n10.txt": "[error] JavaSyntaxError('')"
    },
    "Time_1": {
        "Time_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1970, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1970, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.yearOfCentury(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.yearOfCentury(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Fields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1970, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Weekfields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Weekfields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1970, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1135: error: cannot find symbol\n    [javac]         partial.with(Weekfields.weekyear(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable Weekfields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2010, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.weekyear(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1133: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(1, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestLocalDate_Basics.java:1134: error: cannot find symbol\n    [javac]     partial.with(Fields.yearOfCentury(), 1);\n    [javac]                  ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestLocalDate_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:658: error: cannot find symbol\n    [javac]         partial.with(WeekFields.year(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:656: error: no suitable constructor found for Partial(int,int)\n    [javac]     Partial partial = new Partial(2000, 1);\n    [javac]                       ^\n    [javac]     constructor Partial.Partial(DateTimeFieldType,int) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType)\n    [javac]     constructor Partial.Partial(DateTimeFieldType[],int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to DateTimeFieldType[])\n    [javac]     constructor Partial.Partial(Partial,int[]) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to Partial)\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/TestYearMonth_Basics.java:658: error: cannot find symbol\n    [javac]         partial.with(WeekFields.year(), 1);\n    [javac]                      ^\n    [javac]   symbol:   variable WeekFields\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Time_18": {
        "Time_18_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected org.joda.time.IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_18/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_18/src/test/java/org/joda/time/TestIllegalFieldValueException.java:341: error: cannot find symbol\n    [javac]         gjdt.isValid();\n    [javac]             ^\n    [javac]   symbol:   method isValid()\n    [javac]   location: variable gjdt of type DateTime\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_18/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_18/src/test/java/org/joda/time/TestIllegalFieldValueException.java:341: error: cannot find symbol\n    [javac]         gjdt.isValid();\n    [javac]             ^\n    [javac]   symbol:   method isValid()\n    [javac]   location: variable gjdt of type DateTime\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_18_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected org.joda.time.IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue130AutoGen\njunit.framework.AssertionFailedError: expected same:<1500-02-29T00:00:00.000Z> was not:<1500-02-29T00:00:00.000Z>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:235)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_38": {
        "Lang_38_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: cannot find symbol\n    [javac]     assertNotEquals(\"2009-10-16T16:42:16.000Z\", format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1564: error: cannot find symbol\n    [javac]     assertNotEquals(\"2009-10-16T16:42:16.000Z\", format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtilsIssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:593: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, formattedDate);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DurationFormatUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DurationFormatUtilsTest.java:593: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, formattedDate);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DurationFormatUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_11": {
        "Lang_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 3);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 10, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 10, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 3);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 3);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 10);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 10);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInts(5, 3);\n    [javac]                          ^\n    [javac]   symbol:   method randomInts(int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInts(5, 3);\n    [javac]                          ^\n    [javac]   symbol:   method randomInts(int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.randomInt(5, 10, 5);\n    [javac]                          ^\n    [javac]   symbol:   method randomInt(int,int,int)\n    [javac]   location: class RandomStringUtils\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_41": {
        "Lang_41_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayIssueAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayIssueAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayIssueAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<[String;]> but was:<[Class]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_7": {
        "Lang_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingMinusMinusAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingMinusMinusAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but no exception was thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberLeadingMinusMinusAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but no exception was thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsLeadingDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsLeadingHyphensAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsLeadingHyphensAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberLeadingDashDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsLeadingDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but no exception was thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberLeadingDashDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njunit.framework.AssertionFailedError: expected:<[For input string: '--123']> but was:<[Illegal embedded sign character]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberLeadingDashDashAutoGen(NumberUtilsTest.java:1291)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberLeadingDashDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but no exception was thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberLeadingDashDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberLeadingDashDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_4": {
        "Time_4_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                           ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                           ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:471: error: cannot find symbol\n    [javac]     assertNotSame(new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1), new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1096: error: cannot find symbol\n    [javac]     } catch (UnsupportedTemporalTypeException e) {\n    [javac]              ^\n    [javac]   symbol:   class UnsupportedTemporalTypeException\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1103: error: cannot find symbol\n    [javac]     } catch (UnsupportedTemporalTypeException e) {\n    [javac]              ^\n    [javac]   symbol:   class UnsupportedTemporalTypeException\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 10 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1096: error: cannot find symbol\n    [javac]     } catch (UnsupportedTemporalTypeException e) {\n    [javac]              ^\n    [javac]   symbol:   class UnsupportedTemporalTypeException\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1103: error: cannot find symbol\n    [javac]     } catch (UnsupportedTemporalTypeException e) {\n    [javac]              ^\n    [javac]   symbol:   class UnsupportedTemporalTypeException\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 10 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:663: error: cannot find symbol\n    [javac]     Partial partial = new Partial(clockHourOfDay(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]         partial.with(hourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]     } catch (UnsupportedFieldChangeException e) {\n    [javac]              ^\n    [javac]   symbol:   class UnsupportedFieldChangeException\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]     Partial partial2 = new Partial(hourOfDay(), 1);\n    [javac]                                    ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:673: error: cannot find symbol\n    [javac]         partial.with(clockHourOfDay(), 1).isEqual(partial2.with(clockHourOfDay(), 1));\n    [javac]                                                                 ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:673: error: cannot find symbol\n    [javac]         partial.with(clockHourOfDay(), 1).isEqual(partial2.with(clockHourOfDay(), 1));\n    [javac]                      ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:663: error: cannot find symbol\n    [javac]     Partial partial = new Partial(clockHourOfDay(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:665: error: cannot find symbol\n    [javac]         partial.with(hourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:667: error: cannot find symbol\n    [javac]     } catch (UnsupportedFieldChangeException e) {\n    [javac]              ^\n    [javac]   symbol:   class UnsupportedFieldChangeException\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]     Partial partial2 = new Partial(hourOfDay(), 1);\n    [javac]                                    ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:673: error: cannot find symbol\n    [javac]         partial.with(clockHourOfDay(), 1).isEqual(partial2.with(clockHourOfDay(), 1));\n    [javac]                                                                 ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:673: error: cannot find symbol\n    [javac]         partial.with(clockHourOfDay(), 1).isEqual(partial2.with(clockHourOfDay(), 1));\n    [javac]                      ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:472: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(UnsupportedOperationException.class, () -> new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1}));\n    [javac]                                                          ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:457: error: lambda expressions are not supported in -source 6\n    [javac]     assertThrows(UnsupportedOperationException.class, () -> new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1}));\n    [javac]                                                          ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_4_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                           ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                           ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                                                ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                           ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:662: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                                                ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                                                           ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:666: error: cannot find symbol\n    [javac]     assertFalse(new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1)));\n    [javac]                             ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial partial = new Partial(clockhourOfDay(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1095: error: cannot find symbol\n    [javac]         partial.with(hourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]     partial = new Partial(clockhourOfDay(), 1);\n    [javac]                           ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1102: error: cannot find symbol\n    [javac]     partial = partial.with(hourOfDay(), 1);\n    [javac]                            ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1104: error: cannot find symbol\n    [javac]         partial.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                          ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1104: error: cannot find symbol\n    [javac]         partial.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                     ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial partial = new Partial(clockhourOfDay(), 1);\n    [javac]                                   ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1095: error: cannot find symbol\n    [javac]         partial.with(hourOfDay(), 1);\n    [javac]                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1101: error: cannot find symbol\n    [javac]     partial = new Partial(clockhourOfDay(), 1);\n    [javac]                           ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1102: error: cannot find symbol\n    [javac]     partial = partial.with(hourOfDay(), 1);\n    [javac]                            ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1104: error: cannot find symbol\n    [javac]         partial.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                          ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1104: error: cannot find symbol\n    [javac]         partial.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                     ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                               ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:657: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockHourOfDay(), hourOfDay()}, new int[] {1, 1});\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:664: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                                        ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestYearMonth_Basics.java:671: error: cannot find symbol\n    [javac]         new Partial(clockHourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(), 1).with(clockHourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockHourOfDay()\n    [javac]   location: class TestYearMonth_Basics\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    }
}